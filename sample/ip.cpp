/**
 * @file: ip.cpp
 * @date: 2025-03-02
 * @license: GPL-3.0
 *
 * @telegram: @forman
 * @author: Yuriy Lobarev
 * @phone: +7 (910) 983-95-90
 * @email: forman@anyks.com
 * @site: https://anyks.com
 *
 * @copyright: Copyright © 2025
 */

/**
 * Подключаем заголовочные файлы проекта
 */
#include <net/net.hpp>

/**
 * Подписываемся на пространство имён AWH
 */
using namespace awh;

/**
 * main Главная функция приложения
 * @param argc длина массива параметров
 * @param argv массив параметров
 * @return     код выхода из приложения
 */
int32_t main(int32_t argc, char * argv[]){
	// Создаём объект фреймворка
	fmk_t fmk;
	// Создаём объект для работы с логами
	log_t log(&fmk);
	// Выполняем создание объекта IP-адреса
	net_t net(&log);

	// Выводим тесты IP-адресов
	net = "[2001:0db8:11a3:09d7:1f34:8a2e:07a0:765d]";
	// Выводим IP-адрес в консоль
	cout << " [2001:0db8:11a3:09d7:1f34:8a2e:07a0:765d] || " << net << " === " << net.get(net_t::format_t::LONG_IPV4) << " === " << net.get(net_t::format_t::MIDDLE_IPV4) << " === " << net.get(net_t::format_t::SHORT_IPV4) << endl;

	// Выводим тесты IP-адресов
	net = "2001:0db8:0000:0000:0000:0000:ae21:ad12";
	// Выводим IP-адрес в консоль
	cout << " 2001:0db8:0000:0000:0000:0000:ae21:ad12 || " << net << endl;

	// Выводим тесты IP-адресов
	net = "2001:db8::ae21:ad12";
	// Выводим IP-адрес в консоль
	cout << " 2001:db8::ae21:ad12 || " << net.get(net_t::format_t::LONG) << " and " << net.get(net_t::format_t::MIDDLE) << endl;

	// Выводим тесты IP-адресов
	net = "0000:0000:0000:0000:0000:0000:ae21:ad12";
	// Выводим IP-адрес в консоль
	cout << " 0000:0000:0000:0000:0000:0000:ae21:ad12 || " << net.get(net_t::format_t::SHORT) << endl;

	// Выводим тесты IP-адресов
	net = "::ae21:ad12";
	// Выводим IP-адрес в консоль
	cout << " ::ae21:ad12 || " << net.get(net_t::format_t::MIDDLE) << endl;

	// Выводим тесты IP-адресов
	net = "2001:0db8:11a3:09d7:1f34::";
	// Выводим IP-адрес в консоль
	cout << " 2001:0db8:11a3:09d7:1f34:: || " << net.get(net_t::format_t::LONG) << endl;

	// Выводим тесты IP-адресов
	net = "::ffff:192.0.2.1";
	// Разрешаем вывод булевых переменных
	cout << boolalpha;
	// Выводим IP-адрес в консоль
	cout << " ::ffff:192.0.2.1 || " << net << " ==== " << net.broadcastIPv6ToIPv4() << endl;

	// Выводим тесты IP-адресов
	net = "::1";
	// Выводим IP-адрес в консоль
	cout << " ::1 || " << net.get(net_t::format_t::LONG) << endl;

	// Выводим тесты IP-адресов
	net = "[::]";
	// Выводим IP-адрес в консоль
	cout << " [::] || " << net.get(net_t::format_t::LONG) << endl;

	// Выводим тесты IP-адресов
	net = "46.39.230.51";
	// Выводим IP-адрес в консоль
	cout << " 46.39.230.51 || " << net.get(net_t::format_t::LONG) << " ==== " << net.broadcastIPv6ToIPv4() << endl;

	// Выводим тесты IP-адресов
	net = "192.16.0.1";
	// Выводим IP-адрес в консоль
	cout << " 192.16.0.1 || " << net.get(net_t::format_t::LONG) << " === " << net.get(net_t::format_t::LONG_IPV6) << " === " << net.get(net_t::format_t::SHORT_IPV6) << " === " << net.get(net_t::format_t::MIDDLE_IPV6) << endl;

	// Выводим тесты IP-адресов
	net = "2001:0db8:11a3:09d7:1f34:8a2e:07a0:765d";
	// Выводим составную часть IP-адреса
	cout << " Составная часть адреса: 2001:0db8:11a3:09d7:1f34:8a2e:07a0:765d || " << net.v6()[0] << " and " << net.v6()[1] << endl;

	// Выводим тесты IP-адресов
	net = "46.39.230.51";
	// Выводим составную часть IP-адреса
	cout << " Составная часть адреса: 46.39.230.51 || " << net.v4() << endl;

	// Выводим тесты IP-адресов
	net = "2001:1234:abcd:5678:9877:3322:5541:aabb";
	// Накладываем префикс 53
	net.impose(53, net_t::addr_t::NETWORK);
	// Выводим составную часть IP-адреса
	cout << " Наложение префикса: 2001:1234:abcd:5678:9877:3322:5541:aabb/53 || " << net << endl;

	// Выводим тесты IP-адресов
	net = "2001:1234:abcd:5678:9877:3322:5541:aabb";
	// Накладываем префикс 53
	net.impose("FFFF:FFFF:FFFF:F800::", net_t::addr_t::NETWORK);
	// Выводим составную часть IP-адреса
	cout << " Наложение префикса: 2001:1234:abcd:5678:9877:3322:5541:aabb/FFFF:FFFF:FFFF:F800:: || " << net << endl;

	// Выводим тесты IP-адресов
	net = "192.168.3.192";
	// Накладываем префикс 9
	net.impose(9, net_t::addr_t::NETWORK);
	// Выводим составную часть IP-адреса
	cout << " Наложение префикса: 192.168.3.192/9 || " << net << endl;

	// Выводим тесты IP-адресов
	net = "192.168.3.192";
	// Накладываем префикс 9
	net.impose("255.128.0.0", net_t::addr_t::NETWORK);
	// Выводим составную часть IP-адреса
	cout << " Наложение префикса: 192.168.3.192/255.128.0.0 || " << net << endl;

	// Выводим тесты IP-адресов
	net = "192.168.3.192";
	// Накладываем префикс 9
	net.impose("255.255.255.0", net_t::addr_t::NETWORK);
	// Выводим составную часть IP-адреса
	cout << " Наложение префикса: 192.168.3.192/255.255.255.0 || " << net << endl;

	// Выводим тесты IP-адресов
	net = "2001:1234:abcd:5678:9877:3322:5541:aabb";
	// Накладываем префикс 53
	net.impose(53, net_t::addr_t::HOST);
	// Выводим составную часть IP-адреса
	cout << " Получаем хост адреса: 2001:1234:abcd:5678:9877:3322:5541:aabb/53 || " << net << endl;

	// Выводим тесты IP-адресов
	net = "2001:1234:abcd:5678:9877:3322:5541:aabb";
	// Накладываем префикс 53
	net.impose("FFFF:FFFF:FFFF:F800::", net_t::addr_t::HOST);
	// Выводим составную часть IP-адреса
	cout << " Получаем хост адреса: 2001:1234:abcd:5678:9877:3322:5541:aabb/FFFF:FFFF:FFFF:F800:: || " << net << endl;

	// Выводим тесты IP-адресов
	net = "192.168.3.192";
	// Накладываем префикс 9
	net.impose(9, net_t::addr_t::HOST);
	// Выводим составную часть IP-адреса
	cout << " Получаем хост адреса: 192.168.3.192/9 || " << net << endl;

	// Выводим тесты IP-адресов
	net = "192.168.3.192";
	// Накладываем префикс 9
	net.impose("255.128.0.0", net_t::addr_t::HOST);
	// Выводим составную часть IP-адреса
	cout << " Получаем хост адреса: 192.168.3.192/255.128.0.0 || " << net << endl;

	// Выводим тесты IP-адресов
	net = "192.168.3.192";
	// Накладываем префикс 9
	net.impose(24, net_t::addr_t::HOST);
	// Выводим составную часть IP-адреса
	cout << " Получаем хост адреса: 192.168.3.192/24 || " << net << endl;

	// Выводим тесты IP-адресов
	net = "192.168.3.192";
	// Накладываем префикс 9
	net.impose("255.255.255.0", net_t::addr_t::HOST);
	// Выводим составную часть IP-адреса
	cout << " Получаем хост адреса: 192.168.3.192/255.255.255.0 || " << net << endl;

	// Выводим тесты IP-адресов
	net = "192.168.3.192";
	// Выводим составную часть IP-адреса
	cout << " Получаем маску адреса из префикса сети 9 || " << net.prefix2Mask(9) << endl;
	// Выводим составную часть IP-адреса
	cout << " Получаем префикс сети из маски адреса 255.128.0.0 || " << static_cast <uint16_t> (net.mask2Prefix("255.128.0.0")) << endl;

	// Выводим тесты IP-адресов
	net = "2001:1234:abcd:5678:9877:3322:5541:aabb";
	// Выводим составную часть IP-адреса
	cout << " Получаем маску адреса из префикса сети 53 || " << net.prefix2Mask(53) << endl;
	// Выводим составную часть IP-адреса
	cout << " Получаем префикс сети из маски адреса FFFF:FFFF:FFFF:F800:: || " << static_cast <uint16_t> (net.mask2Prefix("FFFF:FFFF:FFFF:F800::")) << endl;

	// Выводим тесты IP-адресов
	net = "192.168.3.192";
	// Разрешаем вывод булевых переменных
	cout << boolalpha;
	// Выполняем проверку маппинга адреса
	cout << " Выполняем проверку соответствия адреса 192.168.3.192 сети 192.168.0.0 || " << net.mapping("192.168.0.0") << endl;

	// Выводим тесты IP-адресов
	net = "2001:1234:abcd:5678:9877:3322:5541:aabb";
	// Разрешаем вывод булевых переменных
	cout << boolalpha;
	// Выполняем проверку маппинга адреса
	cout << " Выполняем проверку соответствия адреса 2001:1234:abcd:5678:9877:3322:5541:aabb сети 2001:1234:abcd:5678:: || " << net.mapping("2001:1234:abcd:5678::") << endl;

	// Выводим тесты IP-адресов
	net = "192.168.3.192";
	// Разрешаем вывод булевых переменных
	cout << boolalpha;
	// Выполняем проверку маппинга адреса
	cout << " Выполняем проверку соответствия адреса 192.168.3.192 сети 192.128.0.0/9 || " << net.mapping("192.128.0.0", 9, net_t::addr_t::NETWORK) << endl;

	// Выводим тесты IP-адресов
	net = "2001:1234:abcd:5678:9877:3322:5541:aabb";
	// Разрешаем вывод булевых переменных
	cout << boolalpha;
	// Выполняем проверку маппинга адреса
	cout << " Выполняем проверку соответствия адреса 2001:1234:abcd:5678:9877:3322:5541:aabb сети 2001:1234:abcd:5000::/53 || " << net.mapping("2001:1234:abcd:5000::", 53, net_t::addr_t::NETWORK) << endl;

	// Выводим тесты IP-адресов
	net = "192.168.3.192";
	// Разрешаем вывод булевых переменных
	cout << boolalpha;
	// Выполняем проверку маппинга адреса
	cout << " Выполняем проверку соответствия адреса 192.168.3.192 сети 192.128.0.0/255.128.0.0 || " << net.mapping("192.128.0.0", "255.128.0.0", net_t::addr_t::NETWORK) << endl;

	// Выводим тесты IP-адресов
	net = "2001:1234:abcd:5678:9877:3322:5541:aabb";
	// Разрешаем вывод булевых переменных
	cout << boolalpha;
	// Выполняем проверку маппинга адреса
	cout << " Выполняем проверку соответствия адреса 2001:1234:abcd:5678:9877:3322:5541:aabb сети 2001:1234:abcd:5000::/FFFF:FFFF:FFFF:F800:: || " << net.mapping("2001:1234:abcd:5000::", "FFFF:FFFF:FFFF:F800::", net_t::addr_t::NETWORK) << endl;

	// Выводим тесты IP-адресов
	net = "192.168.3.192";
	// Разрешаем вывод булевых переменных
	cout << boolalpha;
	// Выполняем проверку маппинга адреса
	cout << " Выполняем проверку соответствия адреса 192.168.3.192 хосту 9/0.40.3.192 || " << net.mapping("0.40.3.192", 9, net_t::addr_t::HOST) << endl;

	// Выводим тесты IP-адресов
	net = "2001:1234:abcd:5678:9877:3322:5541:aabb";
	// Разрешаем вывод булевых переменных
	cout << boolalpha;
	// Выполняем проверку маппинга адреса
	cout << " Выполняем проверку соответствия адреса 2001:1234:abcd:5678:9877:3322:5541:aabb хосту 53/::678:9877:3322:5541:AABB || " << net.mapping("::678:9877:3322:5541:AABB", 53, net_t::addr_t::HOST) << endl;

	// Выводим тесты IP-адресов
	net = "192.168.3.192";
	// Разрешаем вывод булевых переменных
	cout << boolalpha;
	// Выполняем проверку маппинга адреса
	cout << " Выполняем проверку соответствия адреса 192.168.3.192 хосту 255.128.0.0/0.40.3.192 || " << net.mapping("0.40.3.192", "255.128.0.0", net_t::addr_t::HOST) << endl;

	// Выводим тесты IP-адресов
	net = "2001:1234:abcd:5678:9877:3322:5541:aabb";
	// Разрешаем вывод булевых переменных
	cout << boolalpha;
	// Выполняем проверку маппинга адреса
	cout << " Выполняем проверку соответствия адреса 2001:1234:abcd:5678:9877:3322:5541:aabb хосту FFFF:FFFF:FFFF:F800::/::678:9877:3322:5541:AABB || " << net.mapping("::678:9877:3322:5541:AABB", "FFFF:FFFF:FFFF:F800::", net_t::addr_t::HOST) << endl;

	// Выводим тесты IP-адресов
	net = "192.168.3.192";
	// Разрешаем вывод булевых переменных
	cout << boolalpha;
	// Выполняем проверку на вхождение адреса в диапазон
	cout << " Выполняем проверку на вхождение адреса в диапазон 192.168.3.192 в диапазон [192.168.3.100 - 192.168.3.200] || " << net.range("192.168.3.100", "192.168.3.200", 24) << endl;

	// Выводим тесты IP-адресов
	net = "46.39.230.51";
	// Разрешаем вывод булевых переменных
	cout << boolalpha;
	// Выполняем проверку является ли IP-адрес глобальным
	cout << " Выполняем проверку является ли IP-адрес глобальным 46.39.230.51 || " << (net.mode() == net_t::mode_t::WAN) << endl;

	// Выводим тесты IP-адресов
	net = "192.168.31.12";
	// Разрешаем вывод булевых переменных
	cout << boolalpha;
	// Выполняем проверку является ли IP-адрес локальным
	cout << " Выполняем проверку является ли IP-адрес локальным 192.168.31.12 || " << (net.mode() == net_t::mode_t::LAN) << endl;

	// Выводим тесты IP-адресов
	net = "0.0.0.0";
	// Разрешаем вывод булевых переменных
	cout << boolalpha;
	// Выполняем проверку является ли IP-адрес зарезервированным
	cout << " Выполняем проверку является ли IP-адрес зарезервированным 0.0.0.0 || " << (net.mode() == net_t::mode_t::SYS) << endl;

	// Выводим тесты IP-адресов
	net = "[2a00:1450:4010:c0a::8b]";
	// Разрешаем вывод булевых переменных
	cout << boolalpha;
	// Выполняем проверку является ли IP-адрес глобальным
	cout << " Выполняем проверку является ли IP-адрес глобальным [2a00:1450:4010:c0a::8b] || " << (net.mode() == net_t::mode_t::WAN) << endl;

	// Выводим тесты IP-адресов
	net = "::1";
	// Разрешаем вывод булевых переменных
	cout << boolalpha;
	// Выполняем проверку является ли IP-адрес локальным
	cout << " Выполняем проверку является ли IP-адрес локальным [::1] || " << (net.mode() == net_t::mode_t::LAN) << endl;

	// Выводим тесты IP-адресов
	net = "::";
	// Разрешаем вывод булевых переменных
	cout << boolalpha;
	// Выполняем проверку является ли IP-адрес зарезервированным
	cout << " Выполняем проверку является ли IP-адрес зарезервированным [::] || " << (net.mode() == net_t::mode_t::SYS) << endl;

	// Создаём IP-адрес
	string ip = "2001:0db8:0000:0000:0000:0000:ae21:ad12";
	// Выводим результат IP-адреса
	cout << " Длинная запись адреса || " << ip << endl;
	// Присваиваем IP-адрес объекту сети
	ip = net = ip;
	// Выводим результат IP-адреса
	cout << " Короткая запись адреса || " << ip << endl;

	// Создаём MAC адрес
	net = "73:0b:04:0d:db:79";
	// Выводим MAC адрес в консоль
	cout << " 73:0b:04:0d:db:79 || " << net << endl;

	// Устанавливаем ARPA-адрес
	net.arpa("70.255.255.5.in-addr.arpa");
	// Выводим полученный в результате IP-адрес
	cout << " 70.255.255.5.in-addr.arpa || " << net << endl;
	// Выводим сформированный ARPA-адрес
	cout << " ARPA IPv4: " << net.arpa() << endl;

	// Устанавливаем ARPA-адрес
	net.arpa("b.a.9.8.7.6.5.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa");
	// Выводим полученный в результате IP-адрес
	cout << " b.a.9.8.7.6.5.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa || " << net << endl;
	// Выводим сформированный ARPA-адрес
	cout << " ARPA IPv6: " << net.arpa() << endl;

	// Выводим результат
	return EXIT_SUCCESS;
}
