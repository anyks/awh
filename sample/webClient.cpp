/**
 * author:    Yuriy Lobarev
 * telegram:  @forman
 * phone:     +7(910)983-95-90
 * email:     forman@anyks.com
 * site:      https://anyks.com
 * copyright: © Yuriy Lobarev
 */

/**
 * Подключаем заголовочные файлы проекта
 */
#include <client/awh.hpp>

// Подключаем пространство имён
using namespace std;
using namespace awh;

/**
 * WebClient Класс объекта исполнителя
 */
class WebClient {
	private:
		// Количество выполненных запросов
		uint8_t _count;
	private:
		// Создаём объект фреймворка
		const fmk_t * _fmk;
		// Создаём объект работы с логами
		const log_t * _log;
	public:
		/**
		 * response Метод получения статуса результата запроса
		 * @param sid     идентификатор потока
		 * @param rid     идентификатор запроса
		 * @param code    код ответа сервера
		 * @param message сообщение ответа сервера
		 */
		void response(const int32_t sid, const uint64_t rid, const uint32_t code, const string & message){
			// Блокируем неиспользуемые переменные
			(void) rid;
			// Проверяем на наличие ошибок
			if(code >= 300)
				// Выводим сообщение о неудачном запросе
				this->_log->print("Request failed: %u %s stream=%i", log_t::flag_t::WARNING, code, message.c_str(), sid);
		}
		/**
		 * active Метод идентификации активности на Web-клиенте
		 * @param mode режим события подключения
		 * @param awh  объект web-клиента
		 */
		void active(const client::web_t::mode_t mode, client::awh_t * awh){
			// Выводим информацию в лог
			this->_log->print("%s client", log_t::flag_t::INFO, (mode == client::web_t::mode_t::CONNECT ? "Connect" : "Disconnect"));
			// Если подключение выполнено
			if(mode == client::web_t::mode_t::CONNECT){
				// Создаём объект URI
				uri_t uri(this->_fmk);
				// Создаём объект запроса
				client::web_t::request_t req1, req2;
				// Устанавливаем метод запроса
				req1.method = web_t::method_t::GET;
				// Устанавливаем метод запроса
				req2.method = web_t::method_t::GET;
				// Устанавливаем параметры запроса
				req1.url = uri.parse("/api/v3/exchangeInfo");
				// Устанавливаем параметры запроса
				req2.url = uri.parse("/api/v3/exchangeInfo?symbol=BTCUSDT");
				// Выполняем первый запрос на сервер
				awh->send(std::move(req1));
				// Выполняем второй запрос на сервер
				awh->send(std::move(req2));
			}
		}
		/**
		 * entity Метод получения тела ответа сервера
		 * @param sid     идентификатор потока
		 * @param rid     идентификатор запроса
		 * @param code    код ответа сервера
		 * @param message сообщение ответа сервера
		 * @param entity  тело ответа сервера
		 * @param awh     объект web-клиента
		 */
		void entity(const int32_t sid, const uint64_t rid, const uint32_t code, const string & message, const vector <char> & entity, client::awh_t * awh){
			// Блокируем неиспользуемые переменные
			(void) sid;
			(void) rid;
			// Увеличиваем количество выполненных запросов
			this->_count++;
			/**
			 * Выполняем обработку ошибки
			 */
			try {
				// Получаем результат
				const string result(entity.begin(), entity.end());
				// Создаём объект JSON
				json data = json::parse(result);
				// Выводим полученный результат
				cout << " =========== " << data.dump(4) << endl;
			/**
			 * Если возникает ошибка
			 */
			} catch(const exception & error) {
				// Выводим полученный результат
				cout << " =========== " << string(entity.begin(), entity.end()) << endl;
			}
			// cout << " =========== " << result << " == " << res.code << " == " << res.ok << endl;
			// Если оба запроса выполнены
			if(this->_count == 2)
				// Выполняем остановку
				awh->stop();
		}
		/**
		 * headers Метод получения заголовков ответа сервера
		 * @param sid     идентификатор потока
		 * @param rid     идентификатор запроса
		 * @param code    код ответа сервера
		 * @param message сообщение ответа сервера
		 * @param headers заголовки ответа сервера
		 */
		void headers(const int32_t sid, const uint64_t rid, const uint32_t code, const string & message, const unordered_multimap <string, string> & headers){
			// Блокируем неиспользуемые переменные
			(void) sid;
			(void) rid;
			// Переходим по всем заголовкам
			for(auto & header : headers)
				// Выводим информацию в лог
				this->_log->print("%s : %s", log_t::flag_t::INFO, header.first.c_str(), header.second.c_str());
		}
		/**
		 * complete Метод получения ответа с сервера
		 * @param sid     идентификатор потока
		 * @param rid     идентификатор запроса
		 * @param code    код ответа сервера
		 * @param message сообщение ответа сервера
		 * @param body    данные полученного тела сообщения
		 * @param data    данные полученных заголовков сообщения
		 * @param awh     объект web-клиента
		 */
		void complete(const int32_t sid, const uint64_t rid, const uint32_t code, const string & message, const vector <char> & entity, const unordered_multimap <string, string> & headers, client::awh_t * awh){
			// Блокируем неиспользуемые переменные
			(void) sid;
			(void) rid;
			// Увеличиваем количество выполненных запросов
			this->_count++;
			// Переходим по всем заголовкам
			for(auto & header : headers)
				// Выводим информацию в лог
				this->_log->print("%s : %s", log_t::flag_t::INFO, header.first.c_str(), header.second.c_str());
			/**
			 * Выполняем обработку ошибки
			 */
			try {
				// Получаем результат
				const string result(entity.begin(), entity.end());
				// Создаём объект JSON
				json data = json::parse(result);
				// Выводим полученный результат
				cout << " =========== " << data.dump(4) << endl;
			/**
			 * Если возникает ошибка
			 */
			} catch(const exception & error) {
				// Выводим полученный результат
				cout << " =========== " << string(entity.begin(), entity.end()) << endl;
			}
			// cout << " =========== " << result << " == " << res.code << " == " << res.ok << endl;
			// Если оба запроса выполнены
			if(this->_count == 2)
				// Выполняем остановку
				awh->stop();
		}
	public:
		/**
		 * WebClient Конструктор
		 * @param fmk объект фреймворка
		 * @param log объект логирования
		 */
		WebClient(const fmk_t * fmk, const log_t * log) : _fmk(fmk), _log(log) {}
};

/**
 * main Главная функция приложения
 * @param argc длина массива параметров
 * @param argv массив параметров
 * @return     код выхода из приложения
 */
int32_t main(int32_t argc, char * argv[]){
	// Создаём объект фреймворка
	fmk_t fmk{};
	// Создаём объект для работы с логами
	log_t log(&fmk);
	// Создаём объект работы с адресами-URI
	uri_t uri(&fmk);
	// Создаём объект параметров SSL-шифрования
	node_t::ssl_t ssl;
	// Создаём объект сетевого ядра
	client::core_t core(&fmk, &log);
	// Создаём объект AWH-клиента
	client::awh_t awh(&core, &fmk, &log);
	// Создаём объект исполнителя
	WebClient executor(&fmk, &log);
	// Активируем протокол интернета IPv6
	// core.family(scheme_t::family_t::IPV6);
	// Устанавливаем активный протокол подключения
	core.proto(awh::engine_t::proto_t::HTTP2);
	// core.proto(awh::engine_t::proto_t::HTTP1_1);
	// Устанавливаем название сервиса
	log.name("WEB Client");
	// Устанавливаем формат времени
	log.format("%H:%M:%S %d.%m.%Y");
	/**
	 * 1. Устанавливаем поддержку редиректов
	 * 2. Устанавливаем флаг разрешения метода CONNECT
	 */
	awh.mode({
		// client::web_t::flag_t::ALIVE,
		// client::web_t::flag_t::NOT_INFO,
		client::web_t::flag_t::REDIRECTS,
		client::web_t::flag_t::CONNECT_METHOD_ENABLE
	});
	// Устанавливаем простое чтение базы событий
	// core.easily(true);
	// Отключаем валидацию сертификата
	ssl.verify = true;
	// Устанавливаем адрес сертификата
	ssl.ca = "./certs/ca.pem";
	/*
	// Устанавливаем SSL сертификаты сервера
	ssl.key  = "./certs/certificates/client-key.pem";
	ssl.cert = "./certs/certificates/client-cert.pem";
	*/
	// Выполняем установку параметров SSL-шифрования
	core.ssl(ssl);
	// Активируем шифрование
	// awh.encryption(true);
	// Устанавливаем пароль шифрования
	// awh.encryption(string{"PASS"});
	// Устанавливаем логин и пароль пользователя
	// awh.user("user", "password");
	// Активируем получение PUSH уведомлений
	awh.settings({
		{awh::http2_t::settings_t::ENABLE_PUSH, 1},
		{awh::http2_t::settings_t::ENABLE_ALTSVC, 1},
		{awh::http2_t::settings_t::ENABLE_ORIGIN, 1}
	});
	// Устанавливаем длительное подключение
	// awh.keepAlive(2, 3, 1);
	// Устанавливаем длительное подключение
	// awh.keepAlive(100, 30, 10);
	// Отключаем таймер ожидания входящих данных
	// awh.waitTimeDetect(0, 0, CONNECT_TIMEOUT);
	// Устанавливаем данные прокси-сервера
	// awh.proxy("http://qKseEr:t5QrcW@212.102.146.33:8000");
	// awh.proxy("socks5://3JMFxD:CWv6MP@45.130.126.236:8000");
	// awh.proxy("socks5://127.0.0.1:2222");
	// awh.proxy("socks5://user:password@127.0.0.1:2222");
	// awh.proxy("http://user:password@127.0.0.1:2222");
	// awh.proxy("http://127.0.0.1:2222");
	// awh.proxy("socks5://user:password@anyks", awh::scheme_t::family_t::NIX);
	// awh.proxy("http://anyks", awh::scheme_t::family_t::NIX);
	// awh.proxy("http://user:password@anyks", awh::scheme_t::family_t::NIX);
	// awh.proxy("http://3pvhoe:U8QFWd@193.56.188.250:8000");
	// awh.proxy("http://tARdXT:uWoRp1@217.29.62.214:13699");
	// awh.proxy("socks5://2faD0Q:mm9mw4@193.56.188.192:8000");
	// awh.proxy("socks5://kLV5jZ:ypKUKp@217.29.62.214:13700");

	// awh.proxy("http://user:password@anyks.net:2222");
	// awh.proxy("https://user:password@anyks.net:2222");
	// awh.proxy("socks5://user:password@anyks.net:2222");
	// Активируем работу прокси-сервера
	// awh.proxy(client::scheme_t::work_t::ALLOW);
	/*
	// Устанавливаем тип компрессии
	awh.compressors({
		http_t::compressor_t::ZSTD,
		http_t::compressor_t::BROTLI,
		http_t::compressor_t::GZIP,
		http_t::compressor_t::DEFLATE
	});
	*/
	// Устанавливаем тип авторизации прокси-сервера
	// awh.authTypeProxy(auth_t::type_t::BASIC);
	// awh.authTypeProxy(auth_t::type_t::DIGEST, auth_t::hash_t::MD5);
	// Выполняем инициализацию типа авторизации
	// awh.authType(auth_t::type_t::BASIC);
	// awh.authType(auth_t::type_t::DIGEST, auth_t::hash_t::MD5);
	/**
	 * Вариант с мультизапросами
	 */
	/*
	// Устанавливаем метод активации подключения
	awh.callback <void (const client::web_t::mode_t)> ("active", std::bind(&WebClient::active, &executor, _1, &awh));
	// Устанавливаем метод получения сообщения сервера
	awh.callback <void (const int32_t, const uint64_t, const uint32_t, const string &)> ("response", std::bind(&WebClient::response, &executor, _1, _2, _3, _4));
	// Устанавливаем метод получения тела ответа
	// awh.callback <void (const int32_t, const uint64_t, const uint32_t, const string &, const vector <char> &)> ("entity", std::bind(&WebClient::entity, &executor, _1, _2, _3, _4, _5, &awh));
	// Устанавливаем метод получения заголовков
	// awh.callback <void (const int32_t, const uint64_t, const uint32_t, const string &, const unordered_multimap <string, string> &)> ("headers", std::bind(&WebClient::headers, &executor, _1, _2, _3, _4, _5));
	// Устанавливаем метод получения ответа с сервера
	awh.callback <void (const int32_t, const uint64_t, const uint32_t, const string &, const vector <char> &, const unordered_multimap <string, string> &)> ("complete", std::bind(&WebClient::complete, &executor, _1, _2, _3, _4, _5, _6, &awh));
	// Выполняем инициализацию подключения
	awh.init("https://api.binance.com");
	// Выполняем запуск работы
	awh.start();
	*/
	/**
	 * Вариант с монозапросом
	 */
	// Выполняем получение URL адреса сервера
	// uri_t::url_t url = uri.parse("https://2ip.ru");
	// uri_t::url_t url = uri.parse("https://ipv6.google.com");
	// uri_t::url_t url = uri.parse("http://localhost/test");
	// uri_t::url_t url = uri.parse("http://stalin.info");
	// uri_t::url_t url = uri.parse("http://ww38.stalin.info/");
	// uri_t::url_t url = uri.parse("http://anyks.com");
	// uri_t::url_t url = uri.parse("http://www.anyks.com");
	// uri_t::url_t url = uri.parse("https://anyks.com");
	// uri_t::url_t url = uri.parse("https://www.anyks.com");
	// uri_t::url_t url = uri.parse("https://anyks.net:2222");
	uri_t::url_t url = uri.parse("http://127.0.0.1:2222/exec");
	// uri_t::url_t url = uri.parse("https://anyks.com/test.php");
	// uri_t::url_t url = uri.parse("https://www.anyks.com/test.php");
	// uri_t::url_t url = uri.parse("https://apple.com/ru/mac");
	// uri_t::url_t url = uri.parse("https://support.apple.com/ru-ru/mac");
	// uri_t::url_t url = uri.parse("https://ru.wikipedia.org/wiki/HTTP");
	// uri_t::url_t url = uri.parse("https://api.binance.com/api/v3/exchangeInfo?symbol=BTCUSDT");
	// uri_t::url_t url = uri.parse("https://testnet.binance.vision/api/v3/exchangeInfo");
	// uri_t::url_t url = uri.parse("https://api.coingecko.com/api/v3/coins/list?include_platform=true");
	// uri_t::url_t url = uri.parse("https://api.coingecko.com/api/v3/simple/price?ids=tron&vs_currencies=usd");
	// Замеряем время начала работы
	auto timeShifting = chrono::system_clock::now();
	// Формируем GET запрос
	// const auto & body = awh.GET(url);
	// const auto & body = awh.GET(url, {{"Connection", "close"}});
	// const auto & body = awh.GET(url, {{"User-Agent", "curl/7.64.1"},{"te", "trailers, gzip;q=0.5"}});
	// Подготавливаем тело запроса
	// const string entity = "<html><head><title>404</title></head><body><h1>Hello World!!!</h1></body></html>";
	const string entity = R"({"script": "SU5GTyA9IHsKICAgIG5hbWUgICAgICAgID0gInRlc3RfdnRvcm9wb3ZfZnJlZWlwYV9hYmFuZG9uIiwKICAgIGRlc2NyaXB0aW9uID0gIkF1dG9TY3JpcHQiCn0KCi0tW1sKICog0J7RgdC90L7QstC90L7QuSDQutC70LDRgdGBINGB0LrRgNC40L/RgtCwINCi0LXRgNC80LjRgtCwCiBdXQpURVJNSVQgPSB7CiAgICAtLSDQmtC70LDRgdGBIEFQSSDQotC10YDQvNC40YLQsAogICAgQVBJID0ge30sCiAgICBUZXJtaXRBcGlfX2lwID0gbmlsCn0KCgotLdCh0YLRgNC+0LrQvtCy0YvQtSDRhNGD0L3QutGG0LjQuAotLdCf0YDQtdC+0LHRgNCw0LfQvtCy0LDQvdC40LUg0Log0L3QuNC20L3QtdC80YMg0YDQtdCz0LjRgdGC0YDRgyAobG93ZXIpCmZ1bmN0aW9uIGxvd2VyU3RyaW5nKHMpCiAgICBpZiBzID09IG5pbCBvciBzID09ICIiIHRoZW4KICAgICAgICByZXR1cm4gIiIKICAgIGVuZAogICAgcmV0dXJuIFRFUk1JVC5BUEkubW9kaWZ5KHMsIFRFUk1JVC5BUEkuTU9ESUZZLkxPV0VSKQplbmQKZnVuY3Rpb24gbG93ZXIocykKICAgIGlmIHMgPT0gbmlsIG9yIHMgPT0gIiIgdGhlbgogICAgICAgIHJldHVybiAiIgogICAgZW5kCiAgICByZXR1cm4gVEVSTUlULkFQSS5tb2RpZnkocywgVEVSTUlULkFQSS5NT0RJRlkuTE9XRVIpCmVuZAotLdCf0YDQtdC+0LHRgNCw0LfQvtCy0LDQvdC40LUg0Log0LLQtdGA0YXQvdC10LzRgyDRgNC10LPQuNGB0YLRgNGDICh1cHBlcikKZnVuY3Rpb24gdXBwZXJTdHJpbmcocykKICAgIGlmIHMgPT0gbmlsIG9yIHMgPT0gIiIgdGhlbgogICAgICAgIHJldHVybiAiIgogICAgZW5kCiAgICByZXR1cm4gVEVSTUlULkFQSS5tb2RpZnkocywgVEVSTUlULkFQSS5NT0RJRlkuVVBQRVIpCmVuZAoKZnVuY3Rpb24gdXBwZXIocykKICAgIGlmIHMgPT0gbmlsIG9yIHMgPT0gIiIgdGhlbgogICAgICAgIHJldHVybiAiIgogICAgZW5kCiAgICByZXR1cm4gVEVSTUlULkFQSS5tb2RpZnkocywgVEVSTUlULkFQSS5NT0RJRlkuVVBQRVIpCmVuZAoKLS3Qo9C00LDQu9C10L3QuNC1INGN0LvQtdC80LXQvdGC0L7QsiDQuNC3INGB0YLRgNC+0LrQuCAoc3RyaXApCmZ1bmN0aW9uIHN0cmlwU3RyaW5nKGEsIHMpCiAgICBpZiAocyA9PSBuaWwgb3IgcyA9PSAiIikgdGhlbgogICAgICAgIGxvY2FsIHdvcmRzID0gVEVSTUlULkFQSS5zcGxpdChhLCAiICIpCiAgICAgICAgcmV0dXJuIFRFUk1JVC5BUEkuam9pbih3b3JkcywgIiIpCiAgICBlbmQKICAgIHJldHVybiBURVJNSVQuQVBJLnNwbGl0KGEsIHMpCmVuZApmdW5jdGlvbiBzdHJpcChhLCBzKQogICAgaWYgKHMgPT0gbmlsIG9yIHMgPT0gIiIpIHRoZW4KICAgICAgICBsb2NhbCB3b3JkcyA9IFRFUk1JVC5BUEkuc3BsaXQoYSwgIiAiKQogICAgICAgIHJldHVybiBURVJNSVQuQVBJLmpvaW4od29yZHMsICIiKQogICAgZW5kCiAgICByZXR1cm4gVEVSTUlULkFQSS5zcGxpdChhLCBzKQplbmQKCi0t0KDQsNC30LHQuNC10L3QuNC1INGB0YLRgNC+0LrQuCAoc3BsaXQpCmZ1bmN0aW9uIHNwbGl0U3RyaW5nKHMsIGEpCiAgICByZXR1cm4gVEVSTUlULkFQSS5zcGxpdChzLCBhKQplbmQKZnVuY3Rpb24gc3BsaXQocywgYSkKICAgIHJldHVybiBURVJNSVQuQVBJLnNwbGl0KHMsIGEpCmVuZAotLdCf0YDQvtCy0LXRgNC60LAg0L/QviDRgNC10LPRg9C70Y/RgNC90L7QvNGDINCy0YvRgNCw0LbQtdC90LjRjiAobWF0Y2gpCmZ1bmN0aW9uIG1hdGNoU3RyaW5nKHIsIHMpICBlbmQKCmZ1bmN0aW9uIG1hdGNoKHIsIHMpICBlbmQKLS3Ql9Cw0LzQtdC90LAg0YHRgtGA0L7QutC4IChyZXBsYWNlKQpmdW5jdGlvbiByZXBsYWNlU3RyaW5nKHMsIGEsIGIpCiAgICByZXR1cm4gVEVSTUlULkFQSS5yZXBsYWNlKHMsYSxiKQplbmQKCmZ1bmN0aW9uIHJlcGxhY2UocyxhLGIpCiAgICByZXR1cm4gVEVSTUlULkFQSS5yZXBsYWNlKHMsYSxiKQplbmQKLS3Ql9Cw0LzQtdC90LAg0YHRgtGA0L7QutC4IChjb25jYXQpCmZ1bmN0aW9uIGNvbmNhdChhLCBiKQogICAgcmV0dXJuIGEgLi4gYgplbmQKCmZ1bmN0aW9uIG1ha2VTbGljZShhLCBiKQogICAgaWYgYSA9PSBuaWwgb3IgYiA9PSBuaWwgb3IgdHlwZShhKSB+PSAidGFibGUiIG9yIHR5cGUoYikgPT0gImJvb2xlYW4iIHRoZW4KICAgICAgICByZXR1cm4gIiIKICAgIGVuZAogICAgaWYgdHlwZShiKSA9PSAibnVtYmVyIiB0aGVuCiAgICAgICAgcmV0dXJuIGFbYisxXQogICAgZW5kCiAgICByZXR1cm4gYVtiXQplbmQKCi0t0JvQvtCz0LjRh9C10YHQutC40LUg0L7Qv9C10YDQsNGC0L7RgNGLCi0tINCk0LDQsdGA0LjQutCwCmZ1bmN0aW9uIGNvbXBhcmUobWV0aG9kLCBhLCBiKQogICAgaWYoIG1ldGhvZCA9PSAnZXEnKSB0aGVuIHJldHVybiBjb21wYXJlRXEoYSxiKSBlbmQKICAgIGlmKCBtZXRob2QgPT0gJ25lcScpIHRoZW4gcmV0dXJuIGNvbXBhcmVOZXEoYSxiKSBlbmQKICAgIGlmKCBtZXRob2QgPT0gJ2d0JykgdGhlbiByZXR1cm4gY29tcGFyZUd0KGEsYikgZW5kCiAgICBpZiggbWV0aG9kID09ICdndGUnKSB0aGVuIHJldHVybiBjb21wYXJlR3RlKGEsYikgZW5kCiAgICBpZiggbWV0aG9kID09ICdsdCcpIHRoZW4gcmV0dXJuIGNvbXBhcmVMdChhLGIpIGVuZAogICAgaWYoIG1ldGhvZCA9PSAnbHRlJykgdGhlbiByZXR1cm4gY29tcGFyZUx0ZShhLGIpIGVuZAogICAgaWYoIG1ldGhvZCA9PSAnbm90JykgdGhlbiByZXR1cm4gY29tcGFyZU5vdChhKSBlbmQKICAgIGlmKCBtZXRob2QgPT0gJ2FuZCcpIHRoZW4gcmV0dXJuIGNvbXBhcmVBbmQoYSxiKSBlbmQKICAgIGlmKCBtZXRob2QgPT0gJ29yJykgdGhlbiByZXR1cm4gY29tcGFyZU9yKGEsYikgZW5kCiAgICBpZiggbWV0aG9kID09ICdpbicpIHRoZW4gcmV0dXJuIGNvbXBhcmVJbihhLGIpIGVuZAogICAgaWYoIG1ldGhvZCA9PSAnbmluJykgdGhlbiByZXR1cm4gY29tcGFyZU5vdEluKGEsYikgZW5kCmVuZAotLdCg0LDQstC10L3RgdGC0LLQviAoPT0pCmZ1bmN0aW9uIGNvbXBhcmVFcShhLCBiKQogICAgcmV0dXJuIGEgPT0gYgplbmQKLS3QndC10YDQsNCy0LXQvdGB0YLQstC+ICghPSkKZnVuY3Rpb24gY29tcGFyZU5lcShhLCBiKQogICAgcmV0dXJuIGEgfj0gYgplbmQKLS3QkdC+0LvRjNGI0LUgKD4pCmZ1bmN0aW9uIGNvbXBhcmVHdChhLCBiKQogICAgcmV0dXJuIGEgPiBiCmVuZAotLdCR0L7Qu9GM0YjQtSDQuNC70Lgg0YDQsNCy0L3QviAoPj0pCmZ1bmN0aW9uIGNvbXBhcmVHdGUoYSxiKQogICAgcmV0dXJuIGEgPj0gYgplbmQKLS3QnNC10L3RjNGI0LUgKDwpCmZ1bmN0aW9uIGNvbXBhcmVMdChhLCBiKQogICAgcmV0dXJuIGEgPCBiCmVuZAotLdCc0LXQvdGM0YjQtSDQuNC70Lgg0YDQsNCy0L3QviAoPD0pCmZ1bmN0aW9uIGNvbXBhcmVMdGUoYSwgYikKICAgIHJldHVybiBhIDw9IGIKZW5kCi0t0JvQvtCz0LjRh9C10YHQutC+0LUg0J3QlSAobm90KQpmdW5jdGlvbiBjb21wYXJlTm90KGEpCiAgICByZXR1cm4gbm90IGEKZW5kCi0t0JvQvtCz0LjRh9C10YHQutC+0LUg0JggKGFuZCkKZnVuY3Rpb24gY29tcGFyZUFuZChhLCBiKQogICAgcmV0dXJuIGEgYW5kIGIKZW5kCi0t0JvQvtCz0LjRh9C10YHQutC+0LUg0JjQm9CYIChvcikKZnVuY3Rpb24gY29tcGFyZU9yKGEsIGIpCiAgICByZXR1cm4gYSBvciBiCmVuZAotLdCf0YDQvtCy0LXRgNC60LAg0L3QsNC70LjRh9C40Y8g0Y3Qu9C10LzQtdC90YLQsCAoaW4pCmZ1bmN0aW9uIGNvbXBhcmVJbihhLCBiKQogICAgaWYodHlwZShhKSB+PSAic3RyaW5nIil0aGVuCiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICBlbmQKCiAgICBpZih0eXBlKGIpID09ICJ0YWJsZSIpIHRoZW4KICAgICAgICBmb3IgaSA9IDEsICNiIGRvCiAgICAgICAgICAgIGlmIGEgPT0gYltpXSB0aGVuCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVsc2VpZih0eXBlKGIpID09ICJzdHJpbmciKSB0aGVuCiAgICAgICAgcmV0dXJuIHN0cmluZy5maW5kIChiLCBhLCAxLCB0cnVlKQogICAgZW5kCiAgICByZXR1cm4gZmFsc2UKZW5kCgotLdCf0YDQvtCy0LXRgNC60LAg0L3QsNC70LjRh9C40Y8g0Y3Qu9C10LzQtdC90YLQsCAobm90IGluKQpmdW5jdGlvbiBjb21wYXJlTm90SW4oYSwgYikKICAgIHJldHVybiBub3QgY29tcGFyZUluKGEsIGIpCmVuZAoKCi0t0JDRgNC40YTQvNC10YLQuNGH0LXRgdC60LjQtSDQvtC/0LXRgNCw0YLQvtGA0YsKLS3Qo9C80L3QvtC20LXQvdC40LUgKCopCmZ1bmN0aW9uIG1hdGhNdWx0aShhLCBiKQogICAgcmV0dXJuIGEgKiBiCmVuZAotLdCU0LXQu9C10L3QuNC1ICgvKQpmdW5jdGlvbiBtYXRoRGl2aXNvbihhLCBiKQogICAgaWYoYiA9PSAwKSB0aGVuIHJldHVybiAwIGVuZAogICAgcmV0dXJuIGEgLyBiCmVuZAotLdCS0YvRh9C40YLQsNC90LjQtSAoLSkKZnVuY3Rpb24gbWF0aE1pbnVzKGEsIGIpCiAgICBpZiBhIH49IG5pbCBhbmQgYiB+PSBuaWwgYW5kIHRvbnVtYmVyKGEpIH49IG5pbCBhbmQgdG9udW1iZXIoYikgfj0gbmlsIHRoZW4KICAgICAgICByZXR1cm4gdG9udW1iZXIoYSkgLSB0b251bWJlcihiKQogICAgZW5kCiAgICByZXR1cm4gYQplbmQKCgotLdCj0YHQu9C+0LLQvdGL0LUg0LrQvtC90YHRgtGA0YPQutGG0LjQuAotLWNvbmQKZnVuY3Rpb24gY29uZCguLi4pCiAgICBsb2NhbCB0Ymw9ey4uLn0KICAgIGZvciBpID0xLCAjdGJsLTEsMiBkbwogICAgICAgIGlmIHRibFtpXSB0aGVuCiAgICAgICAgICAgIHJldHVybiB0YmxbaSsxXQogICAgICAgIGVuZAoKICAgIGVuZAogICAgaWYgI3RibCA9PSAxIHRoZW4KICAgICAgICByZXR1cm4gbmlsCiAgICBlbmQKICAgIGlmICN0YmwgJTIgPT0gMSB0aGVuCiAgICAgICAgcmV0dXJuIHRibFsjdGJsXQogICAgZW5kCiAgICByZXR1cm4gbmlsCmVuZAotLW9wdGlvbmFsCmZ1bmN0aW9uIG9wdGlvbmFsKGEsIGIpCiAgICBpZiB0eXBlKGEpID09ICJ0YWJsZSIgYW5kIGIgPT0gbmlsIHRoZW4KICAgICAgICByZXR1cm4gb3B0aW9uYWwoYVsxXSwgYVsyXSkKICAgIGVuZAogICAgaWYgYSB+PSBuaWwgdGhlbgogICAgICAgIHJldHVybiBhCiAgICBlbmQKICAgIHJldHVybiBiCmVuZAoKZnVuY3Rpb24gVkFSX19vcHRpb25hbChhLCBiKQogICAgcmV0dXJuIG9wdGlvbmFsKGEsIGIpCmVuZAoKLS3Qn9C+0LjRgdC6INC00LDQvdC90YvRhQotLdCf0L7QuNGB0Log0LfQvdCw0YfQtdC90LjRjyDQsiDQt9Cw0LTQsNC90L3QvtC5INGC0LDQsdC70LjRhtC1INC00LDQvdC90YvRhSAobG9va3VwKQpmdW5jdGlvbiBsb29rdXAoZGF0YSwgcywgdiwgZCkKICAgIGlmIGRhdGEgfj0gbmlsIGFuZCBzfj0gbmlsIGFuZCB2IH49IG5pbCBhbmQgZGF0YVtzXSB+PSBuaWwgYW5kIGRhdGFbc11bdl0gfj0gbmlsIHRoZW4KICAgICAgICByZXR1cm4gZGF0YVtzXVt2XQogICAgZW5kCiAgICByZXR1cm4gZAplbmQKLS0oZXhpc3RzKQpmdW5jdGlvbiBleGlzdHMocykKICAgIGlmKCBzID09IG5pbCBvciBzID09ICctJykgdGhlbiByZXR1cm4gZmFsc2UgZW5kCiAgICByZXR1cm4gdHJ1ZQplbmQKCgotLdCf0YDQtdC+0LHRgNCw0LfQvtCy0LDQvdC40LUg0YLQuNC/0LAg0LTQsNC90L3Ri9GFCi0t0KHRgtGA0L7QutC+0LLRi9C5INGE0L7RgNC80LDRgiAoc3RyKQpmdW5jdGlvbiB0b1N0cih2KQogICAgaWYgdHlwZSh2KSA9PSAibnVtYmVyIiB0aGVuCiAgICAgICAgcmV0dXJuIHRvc3RyaW5nKG1hdGguZmxvb3IodikpCiAgICBlbmQKCiAgICBpZiB0eXBlKHYpID09ICJ0YWJsZSIgdGhlbgogICAgICAgIGZvciBfLGQgIGluIHBhaXJzKHYpIGRvCiAgICAgICAgICAgIHJldHVybiBkCiAgICAgICAgZW5kCiAgICBlbmQKICAgIHJldHVybiB0b3N0cmluZyh2KQplbmQKLS3QpNC+0YDQvNCw0YIg0YbQtdC70L7Qs9C+INGH0LjRgdC70LAgKGludCkKZnVuY3Rpb24gdG9JbnQodikKICAgIHYgPSB0b251bWJlcih2KQogICAgaWYgdiB+PSBuaWwgdGhlbgogICAgICAgIHJldHVybiB2CiAgICBlbmQKICAgIHJldHVybiAwCmVuZAotLdCk0L7RgNC80LDRgiDRh9C40YHQu9CwINGBINC/0LvQsNCy0LDRjtGJ0LXQuSDRgtC+0YfQutC+0LkgKGZsb2F0KQpmdW5jdGlvbiB0b0Zsb2F0KHYpCiAgICByZXR1cm4gdG9udW1iZXIodikKZW5kCi0t0KTRg9C90LrRhtC40Lgg0L/RgNC+0LLQtdGA0LrQuCDQutC+0YDRgNC10LrRgtC90L7Qs9C+INC/0YDQtdC00YHRgtCw0LLQu9C10L3QuNGPINC00LDQvdC90YvRhQotLdCf0YDQvtCy0LXRgNC60LAgSVAt0LDQtNGA0LXRgdCwIChpc19pcCkKCmZ1bmN0aW9uIGlzSXAoaSkKICAgIGlmIGkgPT0gIiIgb3IgaSA9PSBuaWwgdGhlbgogICAgICAgIHJldHVybiBmYWxzZQogICAgZW5kCiAgICBpZiBURVJNSVQuVGVybWl0QXBpX19pcCA9PSBuaWwgdGhlbgogICAgICAgIFRFUk1JVC5UZXJtaXRBcGlfX2lwID0gVEVSTUlULklQKCkKICAgIGVuZAoKICAgIGxvY2FsIHR5cGUgPSBURVJNSVQuVGVybWl0QXBpX19pcDpob3N0KGkpCiAgICByZXR1cm4gdHlwZSA9PSBURVJNSVQuQVBJLk5FVF9UWVBFLklQVjQgb3IgdHlwZSA9PSBURVJNSVQuQVBJLk5FVF9UWVBFLklQVjYKZW5kCmZ1bmN0aW9uIGlzX2lwKGkpCiAgICByZXR1cm4gaXNJcChpKQplbmQKLS3Qn9GA0L7QstC10YDQutCwINC40LzQtdC90Lgg0YXQvtGB0YLQsCAoaXNfaG9zdG5hbWUpCmZ1bmN0aW9uIGlzSG9zdG5hbWUodikKICAgIGlmIHYgPT0gIiIgb3IgdiA9PSBuaWwgb3IgdHlwZSh2KSB+PSAic3RyaW5nIiB0aGVuCiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICBlbmQKCiAgICBpZiBURVJNSVQuQVBJLnRleHQodiwgVEVSTUlULkFQSS5URVhULlNQQUNFKSB0aGVuCiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICBlbmQKCiAgICBpZiBzdHJpbmcuZmluZCh2LCAiLiIsIDEsIHRydWUpIG9yIHN0cmluZy5maW5kKHYsICI6IiwgMSwgdHJ1ZSkgdGhlbgogICAgICAgIHJldHVybiBmYWxzZQogICAgZW5kCgogICAgcmV0dXJuIHRydWUKZW5kCgpmdW5jdGlvbiBpc19ob3N0bmFtZSh2KQogICAgcmV0dXJuIGlzSG9zdG5hbWUodikKZW5kCgotLdCf0YDQvtCy0LXRgNC60LAg0LTQvtC80LXQvdC90L7Qs9C+INC40LzQtdC90LggKGlzX2ZxZG4pCmZ1bmN0aW9uIGlzRnFkbih2KQogICAgaWYgdiA9PSAiIiBvciB2ID09IG5pbCAgb3IgdHlwZSh2KSB+PSAic3RyaW5nIiB0aGVuCiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICBlbmQKICAgIGlmIFRFUk1JVC5BUEkudGV4dCh2LCBURVJNSVQuQVBJLlRFWFQuU1BBQ0UpIHRoZW4KICAgICAgICByZXR1cm4gZmFsc2UKICAgIGVuZAoKICAgIGlmIFRFUk1JVC5UZXJtaXRBcGlfX2lwID09IG5pbCB0aGVuCiAgICAgICAgVEVSTUlULlRlcm1pdEFwaV9faXAgPSBURVJNSVQuSVAoKQogICAgZW5kCgogICAgcmV0dXJuIFRFUk1JVC5UZXJtaXRBcGlfX2lwOmhvc3QodikgPT0gVEVSTUlULkFQSS5ORVRfVFlQRS5GUUROCmVuZAoKZnVuY3Rpb24gaXNfZnFkbihmKQogICAgcmV0dXJuIGlzRnFkbihmKQplbmQKCi0t0KTRg9C90LrRhtC40Lgg0LTQu9GPINGA0LDQsdC+0YLRiyDRgdC+INCy0YDQtdC80LXQvdC90YvQvNC4INC+0YLQvNC10YLQutCw0LzQuAotLdCf0YDQuNCy0LXQtNC10L3QuNC1INC6IElTTyA4NjAxIChwYXJzZV90aW1lc3RhbXApCi0tINC/0LDRgNCw0LzQtdGC0YAgZiDQvNC+0LbQtdGCINCx0YvRgtGMINC/0LXRgNC10LPRgNGD0LbQtdC90L3Ri9C8ISDQv9GA0LjQvdC40LzQsNC10YIg0YDQsNC30LvQuNGH0L3Ri9C1INCy0LDRgNC40LDQvdGC0YssINCwINC00LDQu9GM0YjQtSDQv9C10YDQstC+0LUsINGH0YLQviDRgdGA0LDQsdC+0YLQsNC10YIKZnVuY3Rpb24gcGFyc2VfdGltZXN0YW1wKHYsIC4uLikKCgogICAgaWYgdHlwZSh2KSA9PSAibnVtYmVyIiB0aGVuCiAgICAgICAgLS1yZXR1cm4gMAogICAgICAgIHJldHVybiBzdHJpbmcuc3ViKFRFUk1JVC5BUEkudGltZTJzdHIobWF0aC5mbG9vcih2KSwiJVktJW0tJWRUJUg6JU06JVMleiIpLCAwLCAtMykuLiAiOjAwIgogICAgZW5kCgogICAgbG9jYWwgdGJsPXsuLi59CgogICAgZm9yIGkgPTEsICN0YmwgZG8KICAgICAgICBpZiB0YmxbaV0gYW5kIHR5cGUodGJsW2ldKSB+PSAidGFibGUiIHRoZW4KICAgICAgICAgICAgbG9jYWwgQSA9IFRFUk1JVC5BUEkuc3RyMnRpbWUodix0YmxbaV0pCiAgICAgICAgICAgIGlmIEEgPiAwIHRoZW4KCiAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nLnN1YihURVJNSVQuQVBJLnRpbWUyc3RyKEEsIiVZLSVtLSVkVCVIOiVNOiVTJXoiKSwgMCwgLTMpLi4gIjowMCIKICAgICAgICAgICAgZW5kCiAgICAgICAgZWxzZWlmIHRibFtpXSBhbmQgdHlwZSh0YmxbaV0pID09ICJ0YWJsZSIgdGhlbgogICAgICAgICAgICBmb3IgXywgZm10IGluIHBhaXJzKHRibFtpXSkgZG8KICAgICAgICAgICAgICAgIGxvY2FsIEEgPSBURVJNSVQuQVBJLnN0cjJ0aW1lKHYsZm10KQogICAgICAgICAgICAgICAgaWYgQSA+IDAgdGhlbgoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nLnN1YihURVJNSVQuQVBJLnRpbWUyc3RyKEEsIiVZLSVtLSVkVCVIOiVNOiVTJXoiKSwgMCwgLTMpLi4gIjowMCIKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKCiAgICBlbmQKCgogICAgcmV0dXJuIHN0cmluZy5zdWIoVEVSTUlULkFQSS50aW1lMnN0cihtYXRoLmZsb29yKFRFUk1JVC5BUEkudGltZSgpLzEwMDApLCIlWS0lbS0lZFQlSDolTTolUyV6IiksIDAsIC0zKS4uICI6MDAiCmVuZAotLdCf0YDQuNCy0LXQtNC10L3QuNC1INC6IFVuaXggdGltZSAodGltZXN0YW1wX3RvX2Vwb2NoKQpmdW5jdGlvbiB0aW1lc3RhbXBfdG9fZXBvY2godikKICAgIHJldHVybiAgc3RyaW5nLnN1YihURVJNSVQuQVBJLnN0cjJ0aW1lKHYsIiVZLSVtLSVkVCVIOiVNOiVTJXoiKSwgMCwgLTMpLi4gIjowMCIKZW5kCi0t0J/RgNC40LLQtdC00LXQvdC40LUg0LogVVRDIChlcG9jaF90b190aW1lc3RhbXApCmZ1bmN0aW9uIGVwb2NoX3RvX3RpbWVzdGFtcCh2KQogICAgaWYodHlwZSh2KSB+PSAibnVtYmVyIikgdGhlbgogICAgICAgIHYgPSB0b0Zsb2F0KHYpCiAgICBlbmQKICAgIHJldHVybiBwYXJzZV90aW1lc3RhbXAodikKZW5kCi0t0KTRg9C90LrRhtC40Lgg0LTQu9GPINC00L7Qv9C+0LvQvdC40YLQtdC70YzQvdC+0Lkg0L3QvtGA0LzQsNC70LjQt9Cw0YbQuNC4Ci0t0J3QvtGA0LzQsNC70LjQt9Cw0YbQuNGPIFVzZXIgQWdlbnQgKG5vcm1hbGl6ZV9odHRwX3VzZXJfYWdlbnQpCmZ1bmN0aW9uIG5vcm1hbGl6ZV9odHRwX3VzZXJfYWdlbnQodikKICAgIHJldHVybiB7CiAgICAgICAgZnVsbD0gIiIsCiAgICAgICAgbmFtZT0gIiIsCiAgICAgICAgb3M9ICIiLAogICAgICAgIGRldmljZT0gIiIKICAgIH0KZW5kCi0t0J3QvtGA0LzQsNC70LjQt9Cw0YbQuNGPIE1BQy3QsNC00YDQtdGB0LAgKG5vcm1hbGl6ZV9tYWNfYWRkcmVzcykKZnVuY3Rpb24gbm9ybWFsaXplX21hY19hZGRyZXNzKHYsIHMpCiAgICBsb2NhbCByZSA9IFRFUk1JVC5SZWdFeHAoKQogICAgaWYgKHJlOnRlc3QodiwgJ15bMC05QS1GXXsyfTpbMC05QS1GXXsyfTpbMC05QS1GXXsyfTpbMC05QS1GXXsyfTpbMC05QS1GXXsyfTpbMC05QS1GXXsyfSQnLCB7VEVSTUlULkFQSS5SRUdFWC5OT05FfSkpIHRoZW4KICAgICAgICByZXR1cm4gdgogICAgZW5kCgogICAgdiA9IFRFUk1JVC5BUEkucmVwbGFjZSh2LCAnOicsICcnKQogICAgdiA9IFRFUk1JVC5BUEkucmVwbGFjZSh2LCAnLicsICcnKQogICAgdiA9IFRFUk1JVC5BUEkucmVwbGFjZSh2LCAnLScsICcnKQoKICAgIGlmIChzdHJpbmcubGVuKHYpIDwgMTIgKSB0aGVuCiAgICAgICAgcmV0dXJuICIiCiAgICBlbmQKCiAgICB2ID0gVEVSTUlULkFQSS5tb2RpZnkodiwgVEVSTUlULkFQSS5NT0RJRlkuVVBQRVIpCgogICAgbG9jYWwgcmV0ID0gewogICAgICAgIFRFUk1JVC5BUEkuc3Vic3RyKHYsIDAsIDIpLAogICAgICAgIFRFUk1JVC5BUEkuc3Vic3RyKHYsIDIsIDIpLAogICAgICAgIFRFUk1JVC5BUEkuc3Vic3RyKHYsIDQsIDIpLAogICAgICAgIFRFUk1JVC5BUEkuc3Vic3RyKHYsIDYsIDIpLAogICAgICAgIFRFUk1JVC5BUEkuc3Vic3RyKHYsIDgsIDIpLAogICAgICAgIFRFUk1JVC5BUEkuc3Vic3RyKHYsIDEwLCAyKSwKICAgIH0KCiAgICByZXR1cm4gVEVSTUlULkFQSS5qb2luKHJldCwgJzonKQplbmQKCmZ1bmN0aW9uIERuTm9ybWFsaXplSG9zdChpbkEpCgogICAgbG9jYWwgaXBzID0gIiIKICAgIGxvY2FsIGZxZG5zID0gIiIKICAgIGxvY2FsIGhvc3RuYW1lcyA9ICIiCgogICAgaWYgdHlwZShpbkEpID09ICJ0YWJsZSIgdGhlbgogICAgICAgIGZvciBfLHYgIGluIHBhaXJzKGluQSkgZG8KICAgICAgICAgICAgaWYodHlwZSh2KSA9PSAidGFibGUiKSB0aGVuCiAgICAgICAgICAgICAgICByZXR1cm4gRG5Ob3JtYWxpemVIb3N0KHYpCiAgICAgICAgICAgIGVsc2VpZiAodn49ICIiIGFuZCB2IH49IG5pbCkgdGhlbgogICAgICAgICAgICAgICAgaWYgaXNfaG9zdG5hbWUodikgdGhlbgogICAgICAgICAgICAgICAgICAgIGhvc3RuYW1lcyA9IHYKICAgICAgICAgICAgICAgIGVsc2VpZiBpc19mcWRuKHYpdGhlbgogICAgICAgICAgICAgICAgICAgIGZxZG5zID0gdgogICAgICAgICAgICAgICAgZWxzZWlmIGlzX2lwKHYpIHRoZW4KICAgICAgICAgICAgICAgICAgICBpcHMgPSB2CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbHNlaWYoaW5BIH49ICIiIGFuZCBpbkEgfj0gbmlsKSB0aGVuCiAgICAgICAgaWYgaXNfaG9zdG5hbWUoaW5BKSB0aGVuCiAgICAgICAgICAgIGhvc3RuYW1lcyA9IGluQQogICAgICAgIGVsc2VpZiBpc19mcWRuKGluQSl0aGVuCiAgICAgICAgICAgIGZxZG5zID0gaW5BCiAgICAgICAgZWxzZWlmIGlzX2lwKGluQSkgdGhlbgogICAgICAgICAgICBpcHMgPSBpbkEKICAgICAgICBlbmQKICAgIGVuZAoKICAgIHJldHVybiB7CiAgICAgICAgaXAgPSBpcHMsCiAgICAgICAgZnFkbiA9IGZxZG5zLAogICAgICAgIGhvc3RuYW1lID0gaG9zdG5hbWVzCiAgICB9CmVuZAoKLS3QndC+0YDQvNCw0LvQuNC30LDRhtC40Y8g0LTQsNC90L3Ri9GFINC/0L4g0YXQvtGB0YLRgyAobm9ybWFsaXplX2hvc3QpCmZ1bmN0aW9uIG5vcm1hbGl6ZV9ob3N0KGEsYixjKQogICAgbG9jYWwgaXBzID0gIiIKICAgIGxvY2FsIGZxZG5zID0gIiIKICAgIGxvY2FsIGhvc3RuYW1lcyA9ICIiCgogICAgbG9jYWwgcmVzdWx0QSA9IERuTm9ybWFsaXplSG9zdChhKQogICAgbG9jYWwgcmVzdWx0QiA9IERuTm9ybWFsaXplSG9zdChiKQogICAgbG9jYWwgcmVzdWx0QyA9IERuTm9ybWFsaXplSG9zdChjKQoKICAgIGlmIChyZXN1bHRBLmlwIH49ICIiKSB0aGVuCiAgICAgICAgaXBzID0gcmVzdWx0QS5pcAogICAgZW5kCiAgICBpZiAocmVzdWx0Qi5pcCB+PSAiIikgdGhlbgogICAgICAgIGlwcyA9IHJlc3VsdEIuaXAKICAgIGVuZAogICAgaWYgKHJlc3VsdEMuaXAgfj0gIiIpIHRoZW4KICAgICAgICBpcHMgPSByZXN1bHRDLmlwCiAgICBlbmQKCiAgICBpZiAocmVzdWx0QS5mcWRuIH49ICIiKSB0aGVuCiAgICAgICAgZnFkbnMgPSByZXN1bHRBLmZxZG4KICAgIGVuZAogICAgaWYgKHJlc3VsdEIuZnFkbiB+PSAiIikgdGhlbgogICAgICAgIGZxZG5zID0gcmVzdWx0Qi5mcWRuCiAgICBlbmQKICAgIGlmIChyZXN1bHRDLmZxZG4gfj0gIiIpIHRoZW4KICAgICAgICBmcWRucyA9IHJlc3VsdEMuZnFkbgogICAgZW5kCgogICAgaWYgKHJlc3VsdEEuaG9zdG5hbWUgfj0gIiIpIHRoZW4KICAgICAgICBob3N0bmFtZXMgPSByZXN1bHRBLmhvc3RuYW1lCiAgICBlbmQKICAgIGlmIChyZXN1bHRCLmhvc3RuYW1lIH49ICIiKSB0aGVuCiAgICAgICAgaG9zdG5hbWVzID0gcmVzdWx0Qi5ob3N0bmFtZQogICAgZW5kCiAgICBpZiAocmVzdWx0Qy5ob3N0bmFtZSB+PSAiIikgdGhlbgogICAgICAgIGhvc3RuYW1lcyA9IHJlc3VsdEMuaG9zdG5hbWUKICAgIGVuZAoKCiAgICByZXR1cm4gewogICAgICAgIGlwID0gaXBzLAogICAgICAgIGZxZG4gPSBmcWRucywKICAgICAgICBob3N0bmFtZSA9IGhvc3RuYW1lcwogICAgfQplbmQKLS3QndC+0YDQvNCw0LvQuNC30LDRhtC40Y8g0LTQsNC90L3Ri9GFIFVSTCAobm9ybWFsaXplX3VybCkKZnVuY3Rpb24gbm9ybWFsaXplX3VybCh2LCBkKQoKCgogICAgcmV0dXJuIHsKICAgICAgICBob3N0ID0gIiIsCiAgICAgICAgcG9ydCA9ICIiLAogICAgICAgIHBhdGggPSAiIiwKICAgICAgICBwYXJhbXMgPSAiIiwKICAgICAgICBxdWVyeSA9ICIiLAogICAgICAgIHByb3RvY29sID0gIiIsCiAgICAgICAgZnJhZ21lbnQgPSAiIiwKICAgICAgICB1c2VybmFtZSA9ICIiLAogICAgICAgIHBhc3N3b3JkID0gIiIsCiAgICAgICAgb3JpZ2luYWwgPSAiIiwKICAgICAgICBzb3VyY2VfdHlwZSA9ICIiCiAgICB9CgplbmQKLS3QndC+0YDQvNCw0LvQuNC30LDRhtC40Y8g0LTQsNC90L3Ri9GFIFdpbmRvd3MgU0lEIChub3JtYWxpemVfd2luZG93c19zaWQpCmZ1bmN0aW9uIG5vcm1hbGl6ZV93aW5kb3dzX3NpZChzKQogICAgcmV0dXJuIHsKICAgICAgICBjYXRlZ29yeT0gInVuZGVmaW5lZF9hY2NvdW50X3R5cGUiLAogICAgICAgIHN1YmNhdGVnb3J5PSAidW5kZWZpbmVkX2FjY291bnRfdHlwZSIsCiAgICAgICAgZGVzYz0gInVuZGVmaW5lZF9hY2NvdW50X3R5cGUiCiAgICB9CmVuZAoKCgpmdW5jdGlvbiBtYXRoUGx1cyguLi4pCiAgICBsb2NhbCBuX2FyZ3MgPSBzZWxlY3QoIiMiLCAuLi4pCiAgICBsb2NhbCB0Ymw9ey4uLn0KICAgIGxvY2FsIGEgPSAwCiAgICBsb2NhbCBjYW5QbHVzID0gdHJ1ZQogICAgZm9yIGkgPSAxLCBuX2FyZ3MgZG8KICAgICAgICBiID0gdG9udW1iZXIodGJsW2ldKQogICAgICAgIGlmIGIgPT0gbmlsIHRoZW4KICAgICAgICAgICAgY2FuUGx1cyA9IGZhbHNlCiAgICAgICAgZW5kCiAgICAgICAgaWYgY2FuUGx1cyB0aGVuCiAgICAgICAgICAgIGEgPSBhICsgYgogICAgICAgIGVsc2UKICAgICAgICAgICAgaWYgdHlwZShhKSA9PSAibnVtYmVyIiB0aGVuCiAgICAgICAgICAgICAgICBpZiBhID4gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgYSA9IHRvU3RyKGEpCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgYSA9ICIiCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGEgPSBhIC4uIHRvc3RyaW5nKHRibFtpXSkKICAgICAgICBlbmQKICAgIGVuZAogICAgcmV0dXJuIGEKZW5kCgpmdW5jdGlvbiBURVJNSVQuRW5yaWNoKHJlc3VsdCkKICAgIC0tIEVNSVRfVEVSTUlULkVucmljaF9DT05URU5UCgogICAgcmVzdWx0ID0gVEVSTUlULkVucmljaEdlbyhyZXN1bHQpCiAgICByZXN1bHQgPSBURVJNSVQuRW5yaWNoQ3VzdG9tKHJlc3VsdCkKCiAgICByZXR1cm4gcmVzdWx0CmVuZApmdW5jdGlvbiBURVJNSVQuRW5yaWNoUnZzKHJlc3VsdCkKICAgIC0tIEVNSVRfVEVSTUlULkVucmljaFJ2c19DT05URU5UCiAgICByZXR1cm4gcmVzdWx0CmVuZAoKZnVuY3Rpb24gVEVSTUlULkVucmljaEdlbyhyZXN1bHQpCiAgICAtLSBFTUlUX1RFUk1JVC5FbnJpY2hHZW9fQ09OVEVOVAogICAgcmV0dXJuIHJlc3VsdAplbmQKZnVuY3Rpb24gVEVSTUlULkVucmljaEN1c3RvbShyZXN1bHQpCiAgICAtLSBFTUlUX1RFUk1JVC5FbnJpY2hDdXN0b21fQ09OVEVOVAogICAgcmV0dXJuIHJlc3VsdAplbmQKCi0tIEVNSVRfVEVSTUlULkVucmljaEZuX0NPTlRFTlQKCmZ1bmN0aW9uIEdyb2tQYXR0ZXJuc1BsYWNlbWVudCgpCiAgICAtLSBFTUlUX1RFUk1JVC5Hcm9rUGF0dGVybnNQbGFjZW1lbnRfQ09OVEVOVAogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiVVNFUk5BTUUiLCJbYS16QS1aMC05Ll8tXSsiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiVVNFUiIsIiV7VVNFUk5BTUV9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkVNQUlMTE9DQUxQQVJUIiwiW2EtekEtWl1bYS16QS1aMC05Xy4rLT06XSsiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiRU1BSUxBRERSRVNTIiwiJXtFTUFJTExPQ0FMUEFSVH1AJXtIT1NUTkFNRX0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiSFRUUERVU0VSIiwiJXtFTUFJTEFERFJFU1N9fCV7VVNFUn0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiSU5UIiwiKD86WystXT8oPzpbMC05XSspKSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJCQVNFMTBOVU0iLCIoPzwhWzAtOS4rLV0pKD8+WystXT8oPzooPzpbMC05XSsoPzpcXC5bMC05XSspPyl8KD86XFwuWzAtOV0rKSkpIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk5VTUJFUiIsIig/OiV7QkFTRTEwTlVNfSkiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQkFTRTE2TlVNIiwiKD88IVswLTlBLUZhLWZdKSg/OlsrLV0/KD86MHgpPyg/OlswLTlBLUZhLWZdKykpIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkJBU0UxNkZMT0FUIiwiXFxiKD88IVswLTlBLUZhLWYuXSkoPzpbKy1dPyg/OjB4KT8oPzooPzpbMC05QS1GYS1mXSsoPzpcXC5bMC05QS1GYS1mXSopPyl8KD86XFwuWzAtOUEtRmEtZl0rKSkpXFxiIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIlBPU0lOVCIsIlxcYig/OlsxLTldWzAtOV0qKVxcYiIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOT05ORUdJTlQiLCJcXGIoPzpbMC05XSspXFxiIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIldPUkQiLCJcXGJcXHcrXFxiIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk5PVFNQQUNFIiwiXFxTKyIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJTUEFDRSIsIlxccyoiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiREFUQSIsIi4qPyIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJHUkVFRFlEQVRBIiwiLioiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiUVVPVEVEU1RSSU5HIiwiKD8+KD88IVxcXFwpKD8+XCIoPz5cXFxcLnxbXlxcXCJdKykrXCJ8XCJcInwoPz4nKD8+XFxcXC58W15cXFxcJ10rKSsnKXwnJ3woPz5gKD8+XFxcXC58W15cXFxcYF0rKStgKXxgYCkpIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIlVVSUQiLCJbQS1GYS1mMC05XXs4fS0oPzpbQS1GYS1mMC05XXs0fS0pezN9W0EtRmEtZjAtOV17MTJ9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk1BQyIsIig/OiV7Q0lTQ09NQUN9fCV7V0lORE9XU01BQ318JXtDT01NT05NQUN9KSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJDSVNDT01BQyIsIig/Oig/OltBLUZhLWYwLTldezR9XFwuKXsyfVtBLUZhLWYwLTldezR9KSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJXSU5ET1dTTUFDIiwiKD86KD86W0EtRmEtZjAtOV17Mn0tKXs1fVtBLUZhLWYwLTldezJ9KSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJDT01NT05NQUMiLCIoPzooPzpbQS1GYS1mMC05XXsyfTopezV9W0EtRmEtZjAtOV17Mn0pIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIklQVjYiLCIoKChbMC05QS1GYS1mXXsxLDR9Oil7N30oWzAtOUEtRmEtZl17MSw0fXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7Nn0oOlswLTlBLUZhLWZdezEsNH18KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXs1fSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDJ9KXw6KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXs0fSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDN9KXwoKDpbMC05QS1GYS1mXXsxLDR9KT86KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7M30oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSw0fSl8KCg6WzAtOUEtRmEtZl17MSw0fSl7MCwyfTooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXsyfSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDV9KXwoKDpbMC05QS1GYS1mXXsxLDR9KXswLDN9OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezF9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsNn0pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsNH06KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KDooKCg6WzAtOUEtRmEtZl17MSw0fSl7MSw3fSl8KCg6WzAtOUEtRmEtZl17MSw0fSl7MCw1fTooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKSkoJS4rKT8iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiSVBWNCIsIig/PCFbMC05XSkoPzooPzpbMC0xXT9bMC05XXsxLDJ9fDJbMC00XVswLTldfDI1WzAtNV0pWy5dKD86WzAtMV0/WzAtOV17MSwyfXwyWzAtNF1bMC05XXwyNVswLTVdKVsuXSg/OlswLTFdP1swLTldezEsMn18MlswLTRdWzAtOV18MjVbMC01XSlbLl0oPzpbMC0xXT9bMC05XXsxLDJ9fDJbMC00XVswLTldfDI1WzAtNV0pKSg/IVswLTldKSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJJUCIsIig/OiV7SVBWNn18JXtJUFY0fSkiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiSVBBRERSIiwiKD86JXtJUFY2fXwle0lQfSkiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiSE9TVE5BTUUiLCJcXGIoPzpbMC05QS1aYS16XVswLTlBLVphLXotXXswLDYyfSkoPzpcXC4oPzpbMC05QS1aYS16XVswLTlBLVphLXotXXswLDYyfSkpKihcXC4/fFxcYikiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiSVBPUkhPU1QiLCIoPzole0lQfXwle0hPU1ROQU1FfSkiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiSE9TVFBPUlQiLCIle0lQT1JIT1NUfTole1BPU0lOVH0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiUEFUSCIsIig/OiV7VU5JWFBBVEh9fCV7V0lOUEFUSH0pIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIlVOSVhQQVRIIiwiKC8oW1xcd18lISRAOi4sfi1dK3xcXFxcLikqKSsiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiVFRZIiwiKD86L2Rldi8ocHRzfHR0eShbcHFdKT8pKFxcdyspPy8/KD86WzAtOV0rKSkiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiV0lOUEFUSCIsIig/PltBLVphLXpdKzp8XFxcXCkoPzpcXFxcW15cXFxcPypdKikrIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIlVSSVBST1RPIiwiW0EtWmEtel0rKFxcK1tBLVphLXorXSspPyIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJVUklIT1NUIiwiJXtJUE9SSE9TVH0oPzo6JXtQT1NJTlQ6cG9ydH0pPyIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJVUklQQVRIIiwiKD86L1tBLVphLXowLTkkLishKicoKXt9LH46Oz1AIyVfXFwtXSopKyIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJVUklQQVJBTSIsIlxcP1tBLVphLXowLTkkLishKid8KCl7fSx+QCMlJi89OjtfP1xcLVxcW1xcXTw+XSoiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiVVJJUEFUSFBBUkFNIiwiJXtVUklQQVRIfSg/OiV7VVJJUEFSQU19KT8iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiVVJJIiwiJXtVUklQUk9UT306Ly8oPzole1VTRVJ9KD86OlteQF0qKT9AKT8oPzole1VSSUhPU1R9KT8oPzole1VSSVBBVEhQQVJBTX0pPyIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJNT05USCIsIlxcYig/Okphbig/OnVhcnl8dWFyKT98RmViKD86cnVhcnl8cnVhcik/fE0oPzphfMOkKT9yKD86Y2h8eik/fEFwcig/OmlsKT98TWEoPzp5fGkpP3xKdW4oPzplfGkpP3xKdWwoPzp5KT98QXVnKD86dXN0KT98U2VwKD86dGVtYmVyKT98Tyg/OmN8ayk/dCg/Om9iZXIpP3xOb3YoPzplbWJlcik/fERlKD86Y3x6KSg/OmVtYmVyKT8pXFxiIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk1PTlRITlVNIiwiKD86MD9bMS05XXwxWzAtMl0pIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk1PTlRITlVNMiIsIig/OjBbMS05XXwxWzAtMl0pIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk1PTlRIREFZIiwiKD86KD86MFsxLTldKXwoPzpbMTJdWzAtOV0pfCg/OjNbMDFdKXxbMS05XSkiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiREFZIiwiKD86TW9uKD86ZGF5KT98VHVlKD86c2RheSk/fFdlZCg/Om5lc2RheSk/fFRodSg/OnJzZGF5KT98RnJpKD86ZGF5KT98U2F0KD86dXJkYXkpP3xTdW4oPzpkYXkpPykiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiWUVBUiIsIig/PlxcZFxcZCl7MSwyfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJIT1VSIiwiKD86MlswMTIzXXxbMDFdP1swLTldKSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJNSU5VVEUiLCIoPzpbMC01XVswLTldKSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJTRUNPTkQiLCIoPzooPzpbMC01XT9bMC05XXw2MCkoPzpbOi4sXVswLTldKyk/KSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJUSU1FIiwiKD8hPFswLTldKSV7SE9VUn06JXtNSU5VVEV9KD86OiV7U0VDT05EfSkoPyFbMC05XSkiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiREFURV9VUyIsIiV7TU9OVEhOVU19Wy8tXSV7TU9OVEhEQVl9Wy8tXSV7WUVBUn0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiREFURV9FVSIsIiV7TU9OVEhEQVl9Wy4vLV0le01PTlRITlVNfVsuLy1dJXtZRUFSfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJJU084NjAxX1RJTUVaT05FIiwiKD86WnxbKy1dJXtIT1VSfSg/Ojo/JXtNSU5VVEV9KSkiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiSVNPODYwMV9TRUNPTkQiLCIoPzole1NFQ09ORH18NjApIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIlRJTUVTVEFNUF9JU084NjAxIiwiJXtZRUFSfS0le01PTlRITlVNfS0le01PTlRIREFZfVtUIF0le0hPVVJ9Oj8le01JTlVURX0oPzo6PyV7U0VDT05EfSk/JXtJU084NjAxX1RJTUVaT05FfT8iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiREFURSIsIiV7REFURV9VU318JXtEQVRFX0VVfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJEQVRFU1RBTVAiLCIle0RBVEV9Wy0gXSV7VElNRX0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiVFoiLCIoPzpbUE1DRV1bU0RdVHxVVEMpIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkRBVEVTVEFNUF9SRkM4MjIiLCIle0RBWX0gJXtNT05USH0gJXtNT05USERBWX0gJXtZRUFSfSAle1RJTUV9ICV7VFp9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkRBVEVTVEFNUF9SRkMyODIyIiwiJXtEQVl9LCAle01PTlRIREFZfSAle01PTlRIfSAle1lFQVJ9ICV7VElNRX0gJXtJU084NjAxX1RJTUVaT05FfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJEQVRFU1RBTVBfT1RIRVIiLCIle0RBWX0gJXtNT05USH0gJXtNT05USERBWX0gJXtUSU1FfSAle1RafSAle1lFQVJ9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkRBVEVTVEFNUF9FVkVOVExPRyIsIiV7WUVBUn0le01PTlRITlVNMn0le01PTlRIREFZfSV7SE9VUn0le01JTlVURX0le1NFQ09ORH0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiSFRUUERFUlJPUl9EQVRFIiwiJXtEQVl9ICV7TU9OVEh9ICV7TU9OVEhEQVl9ICV7VElNRX0gJXtZRUFSfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJTWVNMT0dUSU1FU1RBTVAiLCIle01PTlRIfSArJXtNT05USERBWX0gJXtUSU1FfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJQUk9HIiwiW1xceDIxLVxceDVhXFx4NWNcXHg1ZS1cXHg3ZV0rIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIlNZU0xPR1BST0ciLCIle1BST0c6cHJvZ3JhbX0oPzpcXFsle1BPU0lOVDpwaWR9XFxdKT8iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiU1lTTE9HSE9TVCIsIiV7SVBPUkhPU1R9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIlNZU0xPR0ZBQ0lMSVRZIiwiPCV7Tk9OTkVHSU5UOmZhY2lsaXR5fS4le05PTk5FR0lOVDpwcmlvcml0eX0+IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkhUVFBEQVRFIiwiJXtNT05USERBWX0vJXtNT05USH0vJXtZRUFSfTole1RJTUV9ICV7SU5UfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJRUyIsIiV7UVVPVEVEU1RSSU5HfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJTWVNMT0dCQVNFIiwiJXtTWVNMT0dUSU1FU1RBTVA6dGltZXN0YW1wfSAoPzole1NZU0xPR0ZBQ0lMSVRZfSApPyV7U1lTTE9HSE9TVDpsb2dzb3VyY2V9ICV7U1lTTE9HUFJPR306IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNPTU1PTkFQQUNIRUxPRyIsIiV7SVBPUkhPU1Q6Y2xpZW50aXB9ICV7SFRUUERVU0VSOmlkZW50fSAle1VTRVI6YXV0aH0gXFxbJXtIVFRQREFURTp0aW1lc3RhbXB9XFxdIFwiKD86JXtXT1JEOnZlcmJ9ICV7Tk9UU1BBQ0U6cmVxdWVzdH0oPzogSFRUUC8le05VTUJFUjpodHRwdmVyc2lvbn0pP3wle0RBVEE6cmF3cmVxdWVzdH0pXCIgJXtOVU1CRVI6cmVzcG9uc2V9ICg/OiV7TlVNQkVSOmJ5dGVzfXwtKSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJDT01CSU5FREFQQUNIRUxPRyIsIiV7Q09NTU9OQVBBQ0hFTE9HfSAle1FTOnJlZmVycmVyfSAle1FTOmFnZW50fSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJIVFRQRDIwX0VSUk9STE9HIiwiXFxbJXtIVFRQREVSUk9SX0RBVEU6dGltZXN0YW1wfVxcXSBcXFsle0xPR0xFVkVMOmxvZ2xldmVsfVxcXSAoPzpcXFtjbGllbnQgJXtJUE9SSE9TVDpjbGllbnRpcH1cXF0gKXswLDF9JXtHUkVFRFlEQVRBOmVycm9ybXNnfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJIVFRQRDI0X0VSUk9STE9HIiwiXFxbJXtIVFRQREVSUk9SX0RBVEU6dGltZXN0YW1wfVxcXSBcXFsle1dPUkQ6bW9kdWxlfTole0xPR0xFVkVMOmxvZ2xldmVsfVxcXSBcXFtwaWQgJXtQT1NJTlQ6cGlkfTp0aWQgJXtOVU1CRVI6dGlkfVxcXSggXFwoJXtQT1NJTlQ6cHJveHlfZXJyb3Jjb2RlfVxcKSV7REFUQTpwcm94eV9lcnJvcm1lc3NhZ2V9Oik/KCBcXFtjbGllbnQgJXtJUE9SSE9TVDpjbGllbnR9OiV7UE9TSU5UOmNsaWVudHBvcnR9XFxdKT8gJXtEQVRBOmVycm9yY29kZX06ICV7R1JFRURZREFUQTptZXNzYWdlfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJIVFRQRF9FUlJPUkxPRyIsIiV7SFRUUEQyMF9FUlJPUkxPR318JXtIVFRQRDI0X0VSUk9STE9HfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJMT0dMRVZFTCIsIihbQWFdbGVydHxBTEVSVHxbVHRdcmFjZXxUUkFDRXxbRGRdZWJ1Z3xERUJVR3xbTm5db3RpY2V8Tk9USUNFfFtJaV1uZm98SU5GT3xbV3ddYXJuPyg/OmluZyk/fFdBUk4/KD86SU5HKT98W0VlXXJyPyg/Om9yKT98RVJSPyg/Ok9SKT98W0NjXXJpdD8oPzppY2FsKT98Q1JJVD8oPzpJQ0FMKT98W0ZmXWF0YWx8RkFUQUx8W1NzXWV2ZXJlfFNFVkVSRXxFTUVSRyg/OkVOQ1kpP3xbRWVdbWVyZyg/OmVuY3kpPykiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiRVhJTV9NU0dJRCIsIlswLTlBLVphLXpdezZ9LVswLTlBLVphLXpdezZ9LVswLTlBLVphLXpdezJ9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkVYSU1fRkxBR1MiLCIoPD18Wy09PipdPnxbKl17Mn18PT0pIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkVYSU1fREFURSIsIiV7WUVBUjpleGltX3llYXJ9LSV7TU9OVEhOVU06ZXhpbV9tb250aH0tJXtNT05USERBWTpleGltX2RheX0gJXtUSU1FOmV4aW1fdGltZX0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiRVhJTV9QSUQiLCJcXFsle1BPU0lOVH1cXF0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiRVhJTV9RVCIsIigoXFxkK3kpPyhcXGQrdyk/KFxcZCtkKT8oXFxkK2gpPyhcXGQrbSk/KFxcZCtzKT8pIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkVYSU1fRVhDTFVERV9URVJNUyIsIihNZXNzYWdlIGlzIGZyb3plbnwoU3RhcnR8RW5kKSBxdWV1ZSBydW58IFdhcm5pbmc6IHwgcmV0cnkgdGltZSBub3QgcmVhY2hlZCB8IG5vIChJUCBhZGRyZXNzfGhvc3QgbmFtZSkgZm91bmQgZm9yIChJUCBhZGRyZXNzfGhvc3QpIHwgdW5leHBlY3RlZCBkaXNjb25uZWN0aW9uIHdoaWxlIHJlYWRpbmcgU01UUCBjb21tYW5kIHwgbm8gaW1tZWRpYXRlIGRlbGl2ZXJ5OiB8YW5vdGhlciBwcm9jZXNzIGlzIGhhbmRsaW5nIHRoaXMgbWVzc2FnZSkiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiRVhJTV9SRU1PVEVfSE9TVCIsIihIPSgle05PVFNQQUNFOnJlbW90ZV9ob3N0bmFtZX0gKT8oXFwoJXtOT1RTUEFDRTpyZW1vdGVfaGVsb25hbWV9XFwpICk/XFxbJXtJUDpyZW1vdGVfaG9zdH1cXF0pIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkVYSU1fSU5URVJGQUNFIiwiKEk9XFxbJXtJUDpleGltX2ludGVyZmFjZX1cXF0oOiV7TlVNQkVSOmV4aW1faW50ZXJmYWNlX3BvcnR9KSkiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiRVhJTV9QUk9UT0NPTCIsIihQPSV7Tk9UU1BBQ0U6cHJvdG9jb2x9KSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJFWElNX01TR19TSVpFIiwiKFM9JXtOVU1CRVI6ZXhpbV9tc2dfc2l6ZX0pIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkVYSU1fSEVBREVSX0lEIiwiKGlkPSV7Tk9UU1BBQ0U6ZXhpbV9oZWFkZXJfaWR9KSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJFWElNX1NVQkpFQ1QiLCIoVD0le1FTOmV4aW1fc3ViamVjdH0pIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkJST19IVFRQIiwiJXtOVU1CRVI6dHN9XFx0JXtOT1RTUEFDRTp1aWR9XFx0JXtJUDpvcmlnX2h9XFx0JXtJTlQ6b3JpZ19wfVxcdCV7SVA6cmVzcF9ofVxcdCV7SU5UOnJlc3BfcH1cXHQle0lOVDp0cmFuc19kZXB0aH1cXHQle0dSRUVEWURBVEE6bWV0aG9kfVxcdCV7R1JFRURZREFUQTpkb21haW59XFx0JXtHUkVFRFlEQVRBOnVyaX1cXHQle0dSRUVEWURBVEE6cmVmZXJyZXJ9XFx0JXtHUkVFRFlEQVRBOnVzZXJfYWdlbnR9XFx0JXtOVU1CRVI6cmVxdWVzdF9ib2R5X2xlbn1cXHQle05VTUJFUjpyZXNwb25zZV9ib2R5X2xlbn1cXHQle0dSRUVEWURBVEE6c3RhdHVzX2NvZGV9XFx0JXtHUkVFRFlEQVRBOnN0YXR1c19tc2d9XFx0JXtHUkVFRFlEQVRBOmluZm9fY29kZX1cXHQle0dSRUVEWURBVEE6aW5mb19tc2d9XFx0JXtHUkVFRFlEQVRBOmZpbGVuYW1lfVxcdCV7R1JFRURZREFUQTpicm9fdGFnc31cXHQle0dSRUVEWURBVEE6dXNlcm5hbWV9XFx0JXtHUkVFRFlEQVRBOnBhc3N3b3JkfVxcdCV7R1JFRURZREFUQTpwcm94aWVkfVxcdCV7R1JFRURZREFUQTpvcmlnX2Z1aWRzfVxcdCV7R1JFRURZREFUQTpvcmlnX21pbWVfdHlwZXN9XFx0JXtHUkVFRFlEQVRBOnJlc3BfZnVpZHN9XFx0JXtHUkVFRFlEQVRBOnJlc3BfbWltZV90eXBlc30iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQlJPX0ROUyIsIiV7TlVNQkVSOnRzfVxcdCV7Tk9UU1BBQ0U6dWlkfVxcdCV7SVA6b3JpZ19ofVxcdCV7SU5UOm9yaWdfcH1cXHQle0lQOnJlc3BfaH1cXHQle0lOVDpyZXNwX3B9XFx0JXtXT1JEOnByb3RvfVxcdCV7SU5UOnRyYW5zX2lkfVxcdCV7R1JFRURZREFUQTpxdWVyeX1cXHQle0dSRUVEWURBVEE6cWNsYXNzfVxcdCV7R1JFRURZREFUQTpxY2xhc3NfbmFtZX1cXHQle0dSRUVEWURBVEE6cXR5cGV9XFx0JXtHUkVFRFlEQVRBOnF0eXBlX25hbWV9XFx0JXtHUkVFRFlEQVRBOnJjb2RlfVxcdCV7R1JFRURZREFUQTpyY29kZV9uYW1lfVxcdCV7R1JFRURZREFUQTpBQX1cXHQle0dSRUVEWURBVEE6VEN9XFx0JXtHUkVFRFlEQVRBOlJEfVxcdCV7R1JFRURZREFUQTpSQX1cXHQle0dSRUVEWURBVEE6Wn1cXHQle0dSRUVEWURBVEE6YW5zd2Vyc31cXHQle0dSRUVEWURBVEE6VFRMc31cXHQle0dSRUVEWURBVEE6cmVqZWN0ZWR9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkJST19DT05OIiwiJXtOVU1CRVI6dHN9XFx0JXtOT1RTUEFDRTp1aWR9XFx0JXtJUDpvcmlnX2h9XFx0JXtJTlQ6b3JpZ19wfVxcdCV7SVA6cmVzcF9ofVxcdCV7SU5UOnJlc3BfcH1cXHQle1dPUkQ6cHJvdG99XFx0JXtHUkVFRFlEQVRBOnNlcnZpY2V9XFx0JXtOVU1CRVI6ZHVyYXRpb259XFx0JXtOVU1CRVI6b3JpZ19ieXRlc31cXHQle05VTUJFUjpyZXNwX2J5dGVzfVxcdCV7R1JFRURZREFUQTpjb25uX3N0YXRlfVxcdCV7R1JFRURZREFUQTpsb2NhbF9vcmlnfVxcdCV7R1JFRURZREFUQTptaXNzZWRfYnl0ZXN9XFx0JXtHUkVFRFlEQVRBOmhpc3Rvcnl9XFx0JXtHUkVFRFlEQVRBOm9yaWdfcGt0c31cXHQle0dSRUVEWURBVEE6b3JpZ19pcF9ieXRlc31cXHQle0dSRUVEWURBVEE6cmVzcF9wa3RzfVxcdCV7R1JFRURZREFUQTpyZXNwX2lwX2J5dGVzfVxcdCV7R1JFRURZREFUQTp0dW5uZWxfcGFyZW50c30iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQlJPX0ZJTEVTIiwiJXtOVU1CRVI6dHN9XFx0JXtOT1RTUEFDRTpmdWlkfVxcdCV7SVA6dHhfaG9zdHN9XFx0JXtJUDpyeF9ob3N0c31cXHQle05PVFNQQUNFOmNvbm5fdWlkc31cXHQle0dSRUVEWURBVEE6c291cmNlfVxcdCV7R1JFRURZREFUQTpkZXB0aH1cXHQle0dSRUVEWURBVEE6YW5hbHl6ZXJzfVxcdCV7R1JFRURZREFUQTptaW1lX3R5cGV9XFx0JXtHUkVFRFlEQVRBOmZpbGVuYW1lfVxcdCV7R1JFRURZREFUQTpkdXJhdGlvbn1cXHQle0dSRUVEWURBVEE6bG9jYWxfb3JpZ31cXHQle0dSRUVEWURBVEE6aXNfb3JpZ31cXHQle0dSRUVEWURBVEE6c2Vlbl9ieXRlc31cXHQle0dSRUVEWURBVEE6dG90YWxfYnl0ZXN9XFx0JXtHUkVFRFlEQVRBOm1pc3NpbmdfYnl0ZXN9XFx0JXtHUkVFRFlEQVRBOm92ZXJmbG93X2J5dGVzfVxcdCV7R1JFRURZREFUQTp0aW1lZG91dH1cXHQle0dSRUVEWURBVEE6cGFyZW50X2Z1aWR9XFx0JXtHUkVFRFlEQVRBOm1kNX1cXHQle0dSRUVEWURBVEE6c2hhMX1cXHQle0dSRUVEWURBVEE6c2hhMjU2fVxcdCV7R1JFRURZREFUQTpleHRyYWN0ZWR9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkJBQ1VMQV9USU1FU1RBTVAiLCIle01PTlRIREFZfS0le01PTlRIfSAle0hPVVJ9OiV7TUlOVVRFfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJCQUNVTEFfSE9TVCIsIlthLXpBLVowLTktXSsiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQkFDVUxBX1ZPTFVNRSIsIiV7VVNFUn0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQkFDVUxBX0RFVklDRSIsIiV7VVNFUn0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQkFDVUxBX0RFVklDRVBBVEgiLCIle1VOSVhQQVRIfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJCQUNVTEFfQ0FQQUNJVFkiLCIle0lOVH17MSwzfSgsJXtJTlR9ezN9KSoiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQkFDVUxBX1ZFUlNJT04iLCIle1VTRVJ9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkJBQ1VMQV9KT0IiLCIle1VTRVJ9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkJBQ1VMQV9MT0dfTUFYX0NBUEFDSVRZIiwiVXNlciBkZWZpbmVkIG1heGltdW0gdm9sdW1lIGNhcGFjaXR5ICV7QkFDVUxBX0NBUEFDSVRZfSBleGNlZWRlZCBvbiBkZXZpY2UgXFxcIiV7QkFDVUxBX0RFVklDRTpkZXZpY2V9XFxcIiBcXCgle0JBQ1VMQV9ERVZJQ0VQQVRIfVxcKSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJCQUNVTEFfTE9HX0VORF9WT0xVTUUiLCJFbmQgb2YgbWVkaXVtIG9uIFZvbHVtZSBcXFwiJXtCQUNVTEFfVk9MVU1FOnZvbHVtZX1cXFwiIEJ5dGVzPSV7QkFDVUxBX0NBUEFDSVRZfSBCbG9ja3M9JXtCQUNVTEFfQ0FQQUNJVFl9IGF0ICV7TU9OVEhEQVl9LSV7TU9OVEh9LSV7WUVBUn0gJXtIT1VSfTole01JTlVURX0uIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkJBQ1VMQV9MT0dfTkVXX1ZPTFVNRSIsIkNyZWF0ZWQgbmV3IFZvbHVtZSBcXFwiJXtCQUNVTEFfVk9MVU1FOnZvbHVtZX1cXFwiIGluIGNhdGFsb2cuIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkJBQ1VMQV9MT0dfTkVXX0xBQkVMIiwiTGFiZWxlZCBuZXcgVm9sdW1lIFxcXCIle0JBQ1VMQV9WT0xVTUU6dm9sdW1lfVxcXCIgb24gZGV2aWNlIFxcXCIle0JBQ1VMQV9ERVZJQ0U6ZGV2aWNlfVxcXCIgXFwoJXtCQUNVTEFfREVWSUNFUEFUSH1cXCkuIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkJBQ1VMQV9MT0dfV1JPVEVfTEFCRUwiLCJXcm90ZSBsYWJlbCB0byBwcmVsYWJlbGVkIFZvbHVtZSBcXFwiJXtCQUNVTEFfVk9MVU1FOnZvbHVtZX1cXFwiIG9uIGRldmljZSBcXFwiJXtCQUNVTEFfREVWSUNFfVxcXCIgXFwoJXtCQUNVTEFfREVWSUNFUEFUSH1cXCkiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQkFDVUxBX0xPR19ORVdfTU9VTlQiLCJOZXcgdm9sdW1lIFxcXCIle0JBQ1VMQV9WT0xVTUU6dm9sdW1lfVxcXCIgbW91bnRlZCBvbiBkZXZpY2UgXFxcIiV7QkFDVUxBX0RFVklDRTpkZXZpY2V9XFxcIiBcXCgle0JBQ1VMQV9ERVZJQ0VQQVRIfVxcKSBhdCAle01PTlRIREFZfS0le01PTlRIfS0le1lFQVJ9ICV7SE9VUn06JXtNSU5VVEV9LiIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJCQUNVTEFfTE9HX05PT1BFTiIsIlxccytDYW5ub3Qgb3BlbiAle0RBVEF9OiBFUlI9JXtHUkVFRFlEQVRBOmJlcnJvcn0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQkFDVUxBX0xPR19OT09QRU5ESVIiLCJcXHMrQ291bGQgbm90IG9wZW4gZGlyZWN0b3J5ICV7REFUQX06IEVSUj0le0dSRUVEWURBVEE6YmVycm9yfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJCQUNVTEFfTE9HX05PU1RBVCIsIlxccytDb3VsZCBub3Qgc3RhdCAle0RBVEF9OiBFUlI9JXtHUkVFRFlEQVRBOmJlcnJvcn0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQkFDVUxBX0xPR19OT0pPQlMiLCJUaGVyZSBhcmUgbm8gbW9yZSBKb2JzIGFzc29jaWF0ZWQgd2l0aCBWb2x1bWUgXFxcIiV7QkFDVUxBX1ZPTFVNRTp2b2x1bWV9XFxcIi4gTWFya2luZyBpdCBwdXJnZWQuIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkJBQ1VMQV9MT0dfQUxMX1JFQ09SRFNfUFJVTkVEIiwiQWxsIHJlY29yZHMgcHJ1bmVkIGZyb20gVm9sdW1lIFxcXCIle0JBQ1VMQV9WT0xVTUU6dm9sdW1lfVxcXCI7IG1hcmtpbmcgaXQgXFxcIlB1cmdlZFxcXCIiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQkFDVUxBX0xPR19CRUdJTl9QUlVORV9KT0JTIiwiQmVnaW4gcHJ1bmluZyBKb2JzIG9sZGVyIHRoYW4gJXtJTlR9IG1vbnRoICV7SU5UfSBkYXlzIC4iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQkFDVUxBX0xPR19CRUdJTl9QUlVORV9GSUxFUyIsIkJlZ2luIHBydW5pbmcgRmlsZXMuIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkJBQ1VMQV9MT0dfUFJVTkVEX0pPQlMiLCJQcnVuZWQgJXtJTlR9IEpvYnMqIGZvciBjbGllbnQgJXtCQUNVTEFfSE9TVDpjbGllbnR9IGZyb20gY2F0YWxvZy4iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQkFDVUxBX0xPR19QUlVORURfRklMRVMiLCJQcnVuZWQgRmlsZXMgZnJvbSAle0lOVH0gSm9icyogZm9yIGNsaWVudCAle0JBQ1VMQV9IT1NUOmNsaWVudH0gZnJvbSBjYXRhbG9nLiIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJCQUNVTEFfTE9HX0VORFBSVU5FIiwiRW5kIGF1dG8gcHJ1bmUuIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkJBQ1VMQV9MT0dfU1RBUlRKT0IiLCJTdGFydCBCYWNrdXAgSm9iSWQgJXtJTlR9LCBKb2I9JXtCQUNVTEFfSk9COmpvYn0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQkFDVUxBX0xPR19TVEFSVFJFU1RPUkUiLCJTdGFydCBSZXN0b3JlIEpvYiAle0JBQ1VMQV9KT0I6am9ifSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJCQUNVTEFfTE9HX1VTRURFVklDRSIsIlVzaW5nIERldmljZSBcXFwiJXtCQUNVTEFfREVWSUNFOmRldmljZX1cXFwiIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkJBQ1VMQV9MT0dfRElGRl9GUyIsIlxccysle1VOSVhQQVRIfSBpcyBhIGRpZmZlcmVudCBmaWxlc3lzdGVtLiBXaWxsIG5vdCBkZXNjZW5kIGZyb20gJXtVTklYUEFUSH0gaW50byBpdC4iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQkFDVUxBX0xPR19KT0JFTkQiLCJKb2Igd3JpdGUgZWxhcHNlZCB0aW1lID0gJXtEQVRBOmVsYXBzZWR9LCBUcmFuc2ZlciByYXRlID0gJXtOVU1CRVJ9IChLfE18Ryk/IEJ5dGVzL3NlY29uZCIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJCQUNVTEFfTE9HX05PUFJVTkVfSk9CUyIsIk5vIEpvYnMgZm91bmQgdG8gcHJ1bmUuIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkJBQ1VMQV9MT0dfTk9QUlVORV9GSUxFUyIsIk5vIEZpbGVzIGZvdW5kIHRvIHBydW5lLiIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJCQUNVTEFfTE9HX1ZPTFVNRV9QUkVWV1JJVFRFTiIsIlZvbHVtZSBcXFwiJXtCQUNVTEFfVk9MVU1FOnZvbHVtZX1cXFwiIHByZXZpb3VzbHkgd3JpdHRlbiwgbW92aW5nIHRvIGVuZCBvZiBkYXRhLiIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJCQUNVTEFfTE9HX1JFQURZQVBQRU5EIiwiUmVhZHkgdG8gYXBwZW5kIHRvIGVuZCBvZiBWb2x1bWUgXFxcIiV7QkFDVUxBX1ZPTFVNRTp2b2x1bWV9XFxcIiBzaXplPSV7SU5UfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJCQUNVTEFfTE9HX0NBTkNFTExJTkciLCJDYW5jZWxsaW5nIGR1cGxpY2F0ZSBKb2JJZD0le0lOVH0uIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkJBQ1VMQV9MT0dfTUFSS0NBTkNFTCIsIkpvYklkICV7SU5UfSwgSm9iICV7QkFDVUxBX0pPQjpqb2J9IG1hcmtlZCB0byBiZSBjYW5jZWxlZC4iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQkFDVUxBX0xPR19DTElFTlRfUkJKIiwic2hlbGwgY29tbWFuZDogcnVuIENsaWVudFJ1bkJlZm9yZUpvYiBcXFwiJXtHUkVFRFlEQVRBOnJ1bmpvYn1cXFwiIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkJBQ1VMQV9MT0dfVlNTIiwiKEdlbmVyYXRlICk/VlNTIChXcml0ZXIpPyIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJCQUNVTEFfTE9HX01BWFNUQVJUIiwiRmF0YWwgZXJyb3I6IEpvYiBjYW5jZWxlZCBiZWNhdXNlIG1heCBzdGFydCBkZWxheSB0aW1lIGV4Y2VlZGVkLiIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJCQUNVTEFfTE9HX0RVUExJQ0FURSIsIkZhdGFsIGVycm9yOiBKb2JJZCAle0lOVDpkdXBsaWNhdGV9IGFscmVhZHkgcnVubmluZy4gRHVwbGljYXRlIGpvYiBub3QgYWxsb3dlZC4iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQkFDVUxBX0xPR19OT0pPQlNUQVQiLCJGYXRhbCBlcnJvcjogTm8gSm9iIHN0YXR1cyByZXR1cm5lZCBmcm9tIEZELiIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJCQUNVTEFfTE9HX0ZBVEFMX0NPTk4iLCJGYXRhbCBlcnJvcjogYnNvY2suYzoxMzMgVW5hYmxlIHRvIGNvbm5lY3QgdG8gKENsaWVudDogJXtCQUNVTEFfSE9TVDpjbGllbnR9fFN0b3JhZ2UgZGFlbW9uKSBvbiAle0hPU1ROQU1FfTole1BPU0lOVH0uIEVSUj0oPzxiZXJyb3I+JXtHUkVFRFlEQVRBfSkiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQkFDVUxBX0xPR19OT19DT05ORUNUIiwiV2FybmluZzogYnNvY2suYzoxMjcgQ291bGQgbm90IGNvbm5lY3QgdG8gKENsaWVudDogJXtCQUNVTEFfSE9TVDpjbGllbnR9fFN0b3JhZ2UgZGFlbW9uKSBvbiAle0hPU1ROQU1FfTole1BPU0lOVH0uIEVSUj0oPzxiZXJyb3I+JXtHUkVFRFlEQVRBfSkiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQkFDVUxBX0xPR19OT19BVVRIIiwiRmF0YWwgZXJyb3I6IFVuYWJsZSB0byBhdXRoZW50aWNhdGUgd2l0aCBGaWxlIGRhZW1vbiBhdCAle0hPU1ROQU1FfS4gUG9zc2libGUgY2F1c2VzOiIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJCQUNVTEFfTE9HX05PU1VJVCIsIk5vIHByaW9yIG9yIHN1aXRhYmxlIEZ1bGwgYmFja3VwIGZvdW5kIGluIGNhdGFsb2cuIERvaW5nIEZVTEwgYmFja3VwLiIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJCQUNVTEFfTE9HX05PUFJJT1IiLCJObyBwcmlvciBGdWxsIGJhY2t1cCBKb2IgcmVjb3JkIGZvdW5kLiIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJCQUNVTEFfTE9HX0pPQiIsIihFcnJvcjogKT9CYWN1bGEgJXtCQUNVTEFfSE9TVH0gJXtCQUNVTEFfVkVSU0lPTn0gXFwoJXtCQUNVTEFfVkVSU0lPTn1cXCk6IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkJBQ1VMQV9MT0dMSU5FIiwiJXtCQUNVTEFfVElNRVNUQU1QOmJ0c30gJXtCQUNVTEFfSE9TVDpob3N0bmFtZX0gSm9iSWQgJXtJTlQ6am9iaWR9OiAoJXtCQUNVTEFfTE9HX01BWF9DQVBBQ0lUWX18JXtCQUNVTEFfTE9HX0VORF9WT0xVTUV9fCV7QkFDVUxBX0xPR19ORVdfVk9MVU1FfXwle0JBQ1VMQV9MT0dfTkVXX0xBQkVMfXwle0JBQ1VMQV9MT0dfV1JPVEVfTEFCRUx9fCV7QkFDVUxBX0xPR19ORVdfTU9VTlR9fCV7QkFDVUxBX0xPR19OT09QRU59fCV7QkFDVUxBX0xPR19OT09QRU5ESVJ9fCV7QkFDVUxBX0xPR19OT1NUQVR9fCV7QkFDVUxBX0xPR19OT0pPQlN9fCV7QkFDVUxBX0xPR19BTExfUkVDT1JEU19QUlVORUR9fCV7QkFDVUxBX0xPR19CRUdJTl9QUlVORV9KT0JTfXwle0JBQ1VMQV9MT0dfQkVHSU5fUFJVTkVfRklMRVN9fCV7QkFDVUxBX0xPR19QUlVORURfSk9CU318JXtCQUNVTEFfTE9HX1BSVU5FRF9GSUxFU318JXtCQUNVTEFfTE9HX0VORFBSVU5FfXwle0JBQ1VMQV9MT0dfU1RBUlRKT0J9fCV7QkFDVUxBX0xPR19TVEFSVFJFU1RPUkV9fCV7QkFDVUxBX0xPR19VU0VERVZJQ0V9fCV7QkFDVUxBX0xPR19ESUZGX0ZTfXwle0JBQ1VMQV9MT0dfSk9CRU5EfXwle0JBQ1VMQV9MT0dfTk9QUlVORV9KT0JTfXwle0JBQ1VMQV9MT0dfTk9QUlVORV9GSUxFU318JXtCQUNVTEFfTE9HX1ZPTFVNRV9QUkVWV1JJVFRFTn18JXtCQUNVTEFfTE9HX1JFQURZQVBQRU5EfXwle0JBQ1VMQV9MT0dfQ0FOQ0VMTElOR318JXtCQUNVTEFfTE9HX01BUktDQU5DRUx9fCV7QkFDVUxBX0xPR19DTElFTlRfUkJKfXwle0JBQ1VMQV9MT0dfVlNTfXwle0JBQ1VMQV9MT0dfTUFYU1RBUlR9fCV7QkFDVUxBX0xPR19EVVBMSUNBVEV9fCV7QkFDVUxBX0xPR19OT0pPQlNUQVR9fCV7QkFDVUxBX0xPR19GQVRBTF9DT05OfXwle0JBQ1VMQV9MT0dfTk9fQ09OTkVDVH18JXtCQUNVTEFfTE9HX05PX0FVVEh9fCV7QkFDVUxBX0xPR19OT1NVSVR9fCV7QkFDVUxBX0xPR19KT0J9fCV7QkFDVUxBX0xPR19OT1BSSU9SfSkiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiUzNfUkVRVUVTVF9MSU5FIiwiKD86JXtXT1JEOnZlcmJ9ICV7Tk9UU1BBQ0U6cmVxdWVzdH0oPzogSFRUUC8le05VTUJFUjpodHRwdmVyc2lvbn0pP3wle0RBVEE6cmF3cmVxdWVzdH0pIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIlMzX0FDQ0VTU19MT0ciLCIle1dPUkQ6b3duZXJ9ICV7Tk9UU1BBQ0U6YnVja2V0fSBcXFsle0hUVFBEQVRFOnRpbWVzdGFtcH1cXF0gJXtJUDpjbGllbnRpcH0gJXtOT1RTUEFDRTpyZXF1ZXN0ZXJ9ICV7Tk9UU1BBQ0U6cmVxdWVzdF9pZH0gJXtOT1RTUEFDRTpvcGVyYXRpb259ICV7Tk9UU1BBQ0U6a2V5fSAoPzpcIiV7UzNfUkVRVUVTVF9MSU5FfVwifC0pICg/OiV7SU5UOnJlc3BvbnNlOmludH18LSkgKD86LXwle05PVFNQQUNFOmVycm9yX2NvZGV9KSAoPzole0lOVDpieXRlczppbnR9fC0pICg/OiV7SU5UOm9iamVjdF9zaXplOmludH18LSkgKD86JXtJTlQ6cmVxdWVzdF90aW1lX21zOmludH18LSkgKD86JXtJTlQ6dHVybmFyb3VuZF90aW1lX21zOmludH18LSkgKD86JXtRUzpyZWZlcnJlcn18LSkgKD86XCI/JXtRUzphZ2VudH1cIj98LSkgKD86LXwle05PVFNQQUNFOnZlcnNpb25faWR9KSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJFTEJfVVJJUEFUSFBBUkFNIiwiJXtVUklQQVRIOnBhdGh9KD86JXtVUklQQVJBTTpwYXJhbXN9KT8iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiRUxCX1VSSSIsIiV7VVJJUFJPVE86cHJvdG99Oi8vKD86JXtVU0VSfSg/OjpbXkBdKik/QCk/KD86JXtVUklIT1NUOnVyaWhvc3R9KT8oPzole0VMQl9VUklQQVRIUEFSQU19KT8iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiRUxCX1JFUVVFU1RfTElORSIsIig/OiV7V09SRDp2ZXJifSAle0VMQl9VUkk6cmVxdWVzdH0oPzogSFRUUC8le05VTUJFUjpodHRwdmVyc2lvbn0pP3wle0RBVEE6cmF3cmVxdWVzdH0pIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkVMQl9BQ0NFU1NfTE9HIiwiJXtUSU1FU1RBTVBfSVNPODYwMTp0aW1lc3RhbXB9ICV7Tk9UU1BBQ0U6ZWxifSAle0lQOmNsaWVudGlwfTole0lOVDpjbGllbnRwb3J0OmludH0gKD86KCV7SVA6YmFja2VuZGlwfTo/OiV7SU5UOmJhY2tlbmRwb3J0OmludH0pfC0pICV7TlVNQkVSOnJlcXVlc3RfcHJvY2Vzc2luZ190aW1lOmZsb2F0fSAle05VTUJFUjpiYWNrZW5kX3Byb2Nlc3NpbmdfdGltZTpmbG9hdH0gJXtOVU1CRVI6cmVzcG9uc2VfcHJvY2Vzc2luZ190aW1lOmZsb2F0fSAle0lOVDpyZXNwb25zZTppbnR9ICV7SU5UOmJhY2tlbmRfcmVzcG9uc2U6aW50fSAle0lOVDpyZWNlaXZlZF9ieXRlczppbnR9ICV7SU5UOmJ5dGVzOmludH0gXCIle0VMQl9SRVFVRVNUX0xJTkV9XCIiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiSEFQUk9YWVRJTUUiLCIoPyE8WzAtOV0pJXtIT1VSOmhhcHJveHlfaG91cn06JXtNSU5VVEU6aGFwcm94eV9taW51dGV9KD86OiV7U0VDT05EOmhhcHJveHlfc2Vjb25kfSkoPyFbMC05XSkiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiSEFQUk9YWURBVEUiLCIle01PTlRIREFZOmhhcHJveHlfbW9udGhkYXl9LyV7TU9OVEg6aGFwcm94eV9tb250aH0vJXtZRUFSOmhhcHJveHlfeWVhcn06JXtIQVBST1hZVElNRTpoYXByb3h5X3RpbWV9LiV7SU5UOmhhcHJveHlfbWlsbGlzZWNvbmRzfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJIQVBST1hZQ0FQVFVSRURSRVFVRVNUSEVBREVSUyIsIiV7REFUQTpjYXB0dXJlZF9yZXF1ZXN0X2hlYWRlcnN9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkhBUFJPWFlDQVBUVVJFRFJFU1BPTlNFSEVBREVSUyIsIiV7REFUQTpjYXB0dXJlZF9yZXNwb25zZV9oZWFkZXJzfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJIQVBST1hZSFRUUEJBU0UiLCIle0lQOmNsaWVudF9pcH06JXtJTlQ6Y2xpZW50X3BvcnR9IFxcWyV7SEFQUk9YWURBVEU6YWNjZXB0X2RhdGV9XFxdICV7Tk9UU1BBQ0U6ZnJvbnRlbmRfbmFtZX0gJXtOT1RTUEFDRTpiYWNrZW5kX25hbWV9LyV7Tk9UU1BBQ0U6c2VydmVyX25hbWV9ICV7SU5UOnRpbWVfcmVxdWVzdH0vJXtJTlQ6dGltZV9xdWV1ZX0vJXtJTlQ6dGltZV9iYWNrZW5kX2Nvbm5lY3R9LyV7SU5UOnRpbWVfYmFja2VuZF9yZXNwb25zZX0vJXtOT1RTUEFDRTp0aW1lX2R1cmF0aW9ufSAle0lOVDpodHRwX3N0YXR1c19jb2RlfSAle05PVFNQQUNFOmJ5dGVzX3JlYWR9ICV7REFUQTpjYXB0dXJlZF9yZXF1ZXN0X2Nvb2tpZX0gJXtEQVRBOmNhcHR1cmVkX3Jlc3BvbnNlX2Nvb2tpZX0gJXtOT1RTUEFDRTp0ZXJtaW5hdGlvbl9zdGF0ZX0gJXtJTlQ6YWN0Y29ubn0vJXtJTlQ6ZmVjb25ufS8le0lOVDpiZWNvbm59LyV7SU5UOnNydmNvbm59LyV7Tk9UU1BBQ0U6cmV0cmllc30gJXtJTlQ6c3J2X3F1ZXVlfS8le0lOVDpiYWNrZW5kX3F1ZXVlfSAoXFx7JXtIQVBST1hZQ0FQVFVSRURSRVFVRVNUSEVBREVSU31cXH0pPyggKT8oXFx7JXtIQVBST1hZQ0FQVFVSRURSRVNQT05TRUhFQURFUlN9XFx9KT8oICk/XCIoPEJBRFJFUT58KCV7V09SRDpodHRwX3ZlcmJ9ICgle1VSSVBST1RPOmh0dHBfcHJvdG99Oi8vKT8oPzole1VTRVI6aHR0cF91c2VyfSg/OjpbXkBdKik/QCk/KD86JXtVUklIT1NUOmh0dHBfaG9zdH0pPyg/OiV7VVJJUEFUSFBBUkFNOmh0dHBfcmVxdWVzdH0pPyggSFRUUC8le05VTUJFUjpodHRwX3ZlcnNpb259KT8pKT9cIiIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJIQVBST1hZSFRUUCIsIig/OiV7U1lTTE9HVElNRVNUQU1QOnN5c2xvZ190aW1lc3RhbXB9fCV7VElNRVNUQU1QX0lTTzg2MDE6dGltZXN0YW1wODYwMX0pICV7SVBPUkhPU1Q6c3lzbG9nX3NlcnZlcn0gJXtTWVNMT0dQUk9HfTogJXtIQVBST1hZSFRUUEJBU0V9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkhBUFJPWFlUQ1AiLCIoPzole1NZU0xPR1RJTUVTVEFNUDpzeXNsb2dfdGltZXN0YW1wfXwle1RJTUVTVEFNUF9JU084NjAxOnRpbWVzdGFtcDg2MDF9KSAle0lQT1JIT1NUOnN5c2xvZ19zZXJ2ZXJ9ICV7U1lTTE9HUFJPR306ICV7SVA6Y2xpZW50X2lwfTole0lOVDpjbGllbnRfcG9ydH0gXFxbJXtIQVBST1hZREFURTphY2NlcHRfZGF0ZX1cXF0gJXtOT1RTUEFDRTpmcm9udGVuZF9uYW1lfSAle05PVFNQQUNFOmJhY2tlbmRfbmFtZX0vJXtOT1RTUEFDRTpzZXJ2ZXJfbmFtZX0gJXtJTlQ6dGltZV9xdWV1ZX0vJXtJTlQ6dGltZV9iYWNrZW5kX2Nvbm5lY3R9LyV7Tk9UU1BBQ0U6dGltZV9kdXJhdGlvbn0gJXtOT1RTUEFDRTpieXRlc19yZWFkfSAle05PVFNQQUNFOnRlcm1pbmF0aW9uX3N0YXRlfSAle0lOVDphY3Rjb25ufS8le0lOVDpmZWNvbm59LyV7SU5UOmJlY29ubn0vJXtJTlQ6c3J2Y29ubn0vJXtOT1RTUEFDRTpyZXRyaWVzfSAle0lOVDpzcnZfcXVldWV9LyV7SU5UOmJhY2tlbmRfcXVldWV9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIlJUX0ZMT1dfRVZFTlQiLCIoUlRfRkxPV19TRVNTSU9OX0NSRUFURXxSVF9GTE9XX1NFU1NJT05fQ0xPU0V8UlRfRkxPV19TRVNTSU9OX0RFTlkpIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIlJUX0ZMT1cxIiwiJXtSVF9GTE9XX0VWRU5UOmV2ZW50fTogJXtHUkVFRFlEQVRBOmNsb3NlLXJlYXNvbn06ICV7SVA6c3JjLWlwfS8le0lOVDpzcmMtcG9ydH0tPiV7SVA6ZHN0LWlwfS8le0lOVDpkc3QtcG9ydH0gJXtEQVRBOnNlcnZpY2V9ICV7SVA6bmF0LXNyYy1pcH0vJXtJTlQ6bmF0LXNyYy1wb3J0fS0+JXtJUDpuYXQtZHN0LWlwfS8le0lOVDpuYXQtZHN0LXBvcnR9ICV7REFUQTpzcmMtbmF0LXJ1bGUtbmFtZX0gJXtEQVRBOmRzdC1uYXQtcnVsZS1uYW1lfSAle0lOVDpwcm90b2NvbC1pZH0gJXtEQVRBOnBvbGljeS1uYW1lfSAle0RBVEE6ZnJvbS16b25lfSAle0RBVEE6dG8tem9uZX0gJXtJTlQ6c2Vzc2lvbi1pZH0gXFxkK1xcKCV7REFUQTpzZW50fVxcKSBcXGQrXFwoJXtEQVRBOnJlY2VpdmVkfVxcKSAle0lOVDplbGFwc2VkLXRpbWV9IC4qIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIlJUX0ZMT1cyIiwiJXtSVF9GTE9XX0VWRU5UOmV2ZW50fTogc2Vzc2lvbiBjcmVhdGVkICV7SVA6c3JjLWlwfS8le0lOVDpzcmMtcG9ydH0tPiV7SVA6ZHN0LWlwfS8le0lOVDpkc3QtcG9ydH0gJXtEQVRBOnNlcnZpY2V9ICV7SVA6bmF0LXNyYy1pcH0vJXtJTlQ6bmF0LXNyYy1wb3J0fS0+JXtJUDpuYXQtZHN0LWlwfS8le0lOVDpuYXQtZHN0LXBvcnR9ICV7REFUQTpzcmMtbmF0LXJ1bGUtbmFtZX0gJXtEQVRBOmRzdC1uYXQtcnVsZS1uYW1lfSAle0lOVDpwcm90b2NvbC1pZH0gJXtEQVRBOnBvbGljeS1uYW1lfSAle0RBVEE6ZnJvbS16b25lfSAle0RBVEE6dG8tem9uZX0gJXtJTlQ6c2Vzc2lvbi1pZH0gLioiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiUlRfRkxPVzMiLCIle1JUX0ZMT1dfRVZFTlQ6ZXZlbnR9OiBzZXNzaW9uIGRlbmllZCAle0lQOnNyYy1pcH0vJXtJTlQ6c3JjLXBvcnR9LT4le0lQOmRzdC1pcH0vJXtJTlQ6ZHN0LXBvcnR9ICV7REFUQTpzZXJ2aWNlfSAle0lOVDpwcm90b2NvbC1pZH1cXChcXGRcXCkgJXtEQVRBOnBvbGljeS1uYW1lfSAle0RBVEE6ZnJvbS16b25lfSAle0RBVEE6dG8tem9uZX0gLioiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiU1lTTE9HNTQyNFBSSU5UQVNDSUkiLCJbIS1+XSsiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiU1lTTE9HQkFTRTIiLCIoPzole1NZU0xPR1RJTUVTVEFNUDp0aW1lc3RhbXB9fCV7VElNRVNUQU1QX0lTTzg2MDE6dGltZXN0YW1wODYwMX0pICg/OiV7U1lTTE9HRkFDSUxJVFl9ICk/JXtTWVNMT0dIT1NUOmxvZ3NvdXJjZX0rKD86ICV7U1lTTE9HUFJPR306fCkiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiU1lTTE9HUEFNU0VTU0lPTiIsIiV7U1lTTE9HQkFTRX0gKD89JXtHUkVFRFlEQVRBOm1lc3NhZ2V9KSV7V09SRDpwYW1fbW9kdWxlfVxcKCV7REFUQTpwYW1fY2FsbGVyfVxcKTogc2Vzc2lvbiAle1dPUkQ6cGFtX3Nlc3Npb25fc3RhdGV9IGZvciB1c2VyICV7VVNFUk5BTUU6dXNlcm5hbWV9KD86IGJ5ICV7R1JFRURZREFUQTpwYW1fYnl9KT8iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQ1JPTl9BQ1RJT04iLCJbQS1aIF0rIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNST05MT0ciLCIle1NZU0xPR0JBU0V9IFxcKCV7VVNFUjp1c2VyfVxcKSAle0NST05fQUNUSU9OOmFjdGlvbn0gXFwoJXtEQVRBOm1lc3NhZ2V9XFwpIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIlNZU0xPR0xJTkUiLCIle1NZU0xPR0JBU0UyfSAle0dSRUVEWURBVEE6bWVzc2FnZX0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiU1lTTE9HNTQyNFBSSSIsIjwle05PTk5FR0lOVDpzeXNsb2c1NDI0X3ByaX0+IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIlNZU0xPRzU0MjRTRCIsIlxcWyV7REFUQX1cXF0rIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIlNZU0xPRzU0MjRCQVNFIiwiJXtTWVNMT0c1NDI0UFJJfSV7Tk9OTkVHSU5UOnN5c2xvZzU0MjRfdmVyfSArKD86JXtUSU1FU1RBTVBfSVNPODYwMTpzeXNsb2c1NDI0X3RzfXwtKSArKD86JXtIT1NUTkFNRTpzeXNsb2c1NDI0X2hvc3R9fC0pICsoLXwle1NZU0xPRzU0MjRQUklOVEFTQ0lJOnN5c2xvZzU0MjRfYXBwfSkgKygtfCV7U1lTTE9HNTQyNFBSSU5UQVNDSUk6c3lzbG9nNTQyNF9wcm9jfSkgKygtfCV7U1lTTE9HNTQyNFBSSU5UQVNDSUk6c3lzbG9nNTQyNF9tc2dpZH0pICsoPzole1NZU0xPRzU0MjRTRDpzeXNsb2c1NDI0X3NkfXwtfCkiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiU1lTTE9HNTQyNExJTkUiLCIle1NZU0xPRzU0MjRCQVNFfSArJXtHUkVFRFlEQVRBOnN5c2xvZzU0MjRfbXNnfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJNQ09MTEVDVElWRUFVRElUIiwiJXtUSU1FU1RBTVBfSVNPODYwMTp0aW1lc3RhbXB9OiIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJNQ09MTEVDVElWRSIsIi4sIFxcWyV7VElNRVNUQU1QX0lTTzg2MDE6dGltZXN0YW1wfSAjJXtQT1NJTlQ6cGlkfVxcXSV7U1BBQ0V9JXtMT0dMRVZFTDpldmVudF9sZXZlbH0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTUNPTExFQ1RJVkVBVURJVCIsIiV7VElNRVNUQU1QX0lTTzg2MDE6dGltZXN0YW1wfToiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTU9OR09fTE9HIiwiJXtTWVNMT0dUSU1FU1RBTVA6dGltZXN0YW1wfSBcXFsle1dPUkQ6Y29tcG9uZW50fVxcXSAle0dSRUVEWURBVEE6bWVzc2FnZX0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTU9OR09fUVVFUlkiLCJcXHsgKD88PXsgKS4qKD89IH0gbnRvcmV0dXJuOikgXFx9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk1PTkdPX1NMT1dRVUVSWSIsIiV7V09SRH0gJXtNT05HT19XT1JEREFTSDpkYXRhYmFzZX1cXC4le01PTkdPX1dPUkREQVNIOmNvbGxlY3Rpb259ICV7V09SRH06ICV7TU9OR09fUVVFUlk6cXVlcnl9ICV7V09SRH06JXtOT05ORUdJTlQ6bnRvcmV0dXJufSAle1dPUkR9OiV7Tk9OTkVHSU5UOm50b3NraXB9ICV7V09SRH06JXtOT05ORUdJTlQ6bnNjYW5uZWR9LipucmV0dXJuZWQ6JXtOT05ORUdJTlQ6bnJldHVybmVkfS4uKyAoPzxkdXJhdGlvbj5bMC05XSspbXMiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTU9OR09fV09SRERBU0giLCJcXGJbXFx3LV0rXFxiIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk1PTkdPM19TRVZFUklUWSIsIlxcdyIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJNT05HTzNfQ09NUE9ORU5UIiwiJXtXT1JEfXwtIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk1PTkdPM19MT0ciLCIle1RJTUVTVEFNUF9JU084NjAxOnRpbWVzdGFtcH0gJXtNT05HTzNfU0VWRVJJVFk6c2V2ZXJpdHl9ICV7TU9OR08zX0NPTVBPTkVOVDpjb21wb25lbnR9JXtTUEFDRX0oPzpcXFsle0RBVEE6Y29udGV4dH1cXF0pPyAle0dSRUVEWURBVEE6bWVzc2FnZX0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TVElNRSIsIlxcWyV7TlVNQkVSOm5hZ2lvc19lcG9jaH1cXF0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX1RZUEVfQ1VSUkVOVF9TRVJWSUNFX1NUQVRFIiwiQ1VSUkVOVCBTRVJWSUNFIFNUQVRFIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk5BR0lPU19UWVBFX0NVUlJFTlRfSE9TVF9TVEFURSIsIkNVUlJFTlQgSE9TVCBTVEFURSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NfVFlQRV9TRVJWSUNFX05PVElGSUNBVElPTiIsIlNFUlZJQ0UgTk9USUZJQ0FUSU9OIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk5BR0lPU19UWVBFX0hPU1RfTk9USUZJQ0FUSU9OIiwiSE9TVCBOT1RJRklDQVRJT04iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX1RZUEVfU0VSVklDRV9BTEVSVCIsIlNFUlZJQ0UgQUxFUlQiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX1RZUEVfSE9TVF9BTEVSVCIsIkhPU1QgQUxFUlQiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX1RZUEVfU0VSVklDRV9GTEFQUElOR19BTEVSVCIsIlNFUlZJQ0UgRkxBUFBJTkcgQUxFUlQiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX1RZUEVfSE9TVF9GTEFQUElOR19BTEVSVCIsIkhPU1QgRkxBUFBJTkcgQUxFUlQiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX1RZUEVfU0VSVklDRV9ET1dOVElNRV9BTEVSVCIsIlNFUlZJQ0UgRE9XTlRJTUUgQUxFUlQiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX1RZUEVfSE9TVF9ET1dOVElNRV9BTEVSVCIsIkhPU1QgRE9XTlRJTUUgQUxFUlQiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX1RZUEVfUEFTU0lWRV9TRVJWSUNFX0NIRUNLIiwiUEFTU0lWRSBTRVJWSUNFIENIRUNLIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk5BR0lPU19UWVBFX1BBU1NJVkVfSE9TVF9DSEVDSyIsIlBBU1NJVkUgSE9TVCBDSEVDSyIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NfVFlQRV9TRVJWSUNFX0VWRU5UX0hBTkRMRVIiLCJTRVJWSUNFIEVWRU5UIEhBTkRMRVIiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX1RZUEVfSE9TVF9FVkVOVF9IQU5ETEVSIiwiSE9TVCBFVkVOVCBIQU5ETEVSIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk5BR0lPU19UWVBFX0VYVEVSTkFMX0NPTU1BTkQiLCJFWFRFUk5BTCBDT01NQU5EIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk5BR0lPU19UWVBFX1RJTUVQRVJJT0RfVFJBTlNJVElPTiIsIlRJTUVQRVJJT0QgVFJBTlNJVElPTiIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NfRUNfRElTQUJMRV9TVkNfQ0hFQ0siLCJESVNBQkxFX1NWQ19DSEVDSyIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NfRUNfRU5BQkxFX1NWQ19DSEVDSyIsIkVOQUJMRV9TVkNfQ0hFQ0siKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX0VDX0RJU0FCTEVfSE9TVF9DSEVDSyIsIkRJU0FCTEVfSE9TVF9DSEVDSyIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NfRUNfRU5BQkxFX0hPU1RfQ0hFQ0siLCJFTkFCTEVfSE9TVF9DSEVDSyIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NfRUNfUFJPQ0VTU19TRVJWSUNFX0NIRUNLX1JFU1VMVCIsIlBST0NFU1NfU0VSVklDRV9DSEVDS19SRVNVTFQiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX0VDX1BST0NFU1NfSE9TVF9DSEVDS19SRVNVTFQiLCJQUk9DRVNTX0hPU1RfQ0hFQ0tfUkVTVUxUIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk5BR0lPU19FQ19TQ0hFRFVMRV9TRVJWSUNFX0RPV05USU1FIiwiU0NIRURVTEVfU0VSVklDRV9ET1dOVElNRSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NfRUNfU0NIRURVTEVfSE9TVF9ET1dOVElNRSIsIlNDSEVEVUxFX0hPU1RfRE9XTlRJTUUiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX0VDX0RJU0FCTEVfSE9TVF9TVkNfTk9USUZJQ0FUSU9OUyIsIkRJU0FCTEVfSE9TVF9TVkNfTk9USUZJQ0FUSU9OUyIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NfRUNfRU5BQkxFX0hPU1RfU1ZDX05PVElGSUNBVElPTlMiLCJFTkFCTEVfSE9TVF9TVkNfTk9USUZJQ0FUSU9OUyIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NfRUNfRElTQUJMRV9IT1NUX05PVElGSUNBVElPTlMiLCJESVNBQkxFX0hPU1RfTk9USUZJQ0FUSU9OUyIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NfRUNfRU5BQkxFX0hPU1RfTk9USUZJQ0FUSU9OUyIsIkVOQUJMRV9IT1NUX05PVElGSUNBVElPTlMiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX0VDX0RJU0FCTEVfU1ZDX05PVElGSUNBVElPTlMiLCJESVNBQkxFX1NWQ19OT1RJRklDQVRJT05TIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk5BR0lPU19FQ19FTkFCTEVfU1ZDX05PVElGSUNBVElPTlMiLCJFTkFCTEVfU1ZDX05PVElGSUNBVElPTlMiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX1dBUk5JTkciLCJXYXJuaW5nOiV7U1BBQ0V9JXtHUkVFRFlEQVRBOm5hZ2lvc19tZXNzYWdlfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NfQ1VSUkVOVF9TRVJWSUNFX1NUQVRFIiwiJXtOQUdJT1NfVFlQRV9DVVJSRU5UX1NFUlZJQ0VfU1RBVEU6bmFnaW9zX3R5cGV9OiAle0RBVEE6bmFnaW9zX2hvc3RuYW1lfTsle0RBVEE6bmFnaW9zX3NlcnZpY2V9OyV7REFUQTpuYWdpb3Nfc3RhdGV9OyV7REFUQTpuYWdpb3Nfc3RhdGV0eXBlfTsle0RBVEE6bmFnaW9zX3N0YXRlY29kZX07JXtHUkVFRFlEQVRBOm5hZ2lvc19tZXNzYWdlfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NfQ1VSUkVOVF9IT1NUX1NUQVRFIiwiJXtOQUdJT1NfVFlQRV9DVVJSRU5UX0hPU1RfU1RBVEU6bmFnaW9zX3R5cGV9OiAle0RBVEE6bmFnaW9zX2hvc3RuYW1lfTsle0RBVEE6bmFnaW9zX3N0YXRlfTsle0RBVEE6bmFnaW9zX3N0YXRldHlwZX07JXtEQVRBOm5hZ2lvc19zdGF0ZWNvZGV9OyV7R1JFRURZREFUQTpuYWdpb3NfbWVzc2FnZX0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX1NFUlZJQ0VfTk9USUZJQ0FUSU9OIiwiJXtOQUdJT1NfVFlQRV9TRVJWSUNFX05PVElGSUNBVElPTjpuYWdpb3NfdHlwZX06ICV7REFUQTpuYWdpb3Nfbm90aWZ5bmFtZX07JXtEQVRBOm5hZ2lvc19ob3N0bmFtZX07JXtEQVRBOm5hZ2lvc19zZXJ2aWNlfTsle0RBVEE6bmFnaW9zX3N0YXRlfTsle0RBVEE6bmFnaW9zX2NvbnRhY3R9OyV7R1JFRURZREFUQTpuYWdpb3NfbWVzc2FnZX0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX0hPU1RfTk9USUZJQ0FUSU9OIiwiJXtOQUdJT1NfVFlQRV9IT1NUX05PVElGSUNBVElPTjpuYWdpb3NfdHlwZX06ICV7REFUQTpuYWdpb3Nfbm90aWZ5bmFtZX07JXtEQVRBOm5hZ2lvc19ob3N0bmFtZX07JXtEQVRBOm5hZ2lvc19zdGF0ZX07JXtEQVRBOm5hZ2lvc19jb250YWN0fTsle0dSRUVEWURBVEE6bmFnaW9zX21lc3NhZ2V9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk5BR0lPU19TRVJWSUNFX0FMRVJUIiwiJXtOQUdJT1NfVFlQRV9TRVJWSUNFX0FMRVJUOm5hZ2lvc190eXBlfTogJXtEQVRBOm5hZ2lvc19ob3N0bmFtZX07JXtEQVRBOm5hZ2lvc19zZXJ2aWNlfTsle0RBVEE6bmFnaW9zX3N0YXRlfTsle0RBVEE6bmFnaW9zX3N0YXRlbGV2ZWx9OyV7TlVNQkVSOm5hZ2lvc19hdHRlbXB0fTsle0dSRUVEWURBVEE6bmFnaW9zX21lc3NhZ2V9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk5BR0lPU19IT1NUX0FMRVJUIiwiJXtOQUdJT1NfVFlQRV9IT1NUX0FMRVJUOm5hZ2lvc190eXBlfTogJXtEQVRBOm5hZ2lvc19ob3N0bmFtZX07JXtEQVRBOm5hZ2lvc19zdGF0ZX07JXtEQVRBOm5hZ2lvc19zdGF0ZWxldmVsfTsle05VTUJFUjpuYWdpb3NfYXR0ZW1wdH07JXtHUkVFRFlEQVRBOm5hZ2lvc19tZXNzYWdlfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NfU0VSVklDRV9GTEFQUElOR19BTEVSVCIsIiV7TkFHSU9TX1RZUEVfU0VSVklDRV9GTEFQUElOR19BTEVSVDpuYWdpb3NfdHlwZX06ICV7REFUQTpuYWdpb3NfaG9zdG5hbWV9OyV7REFUQTpuYWdpb3Nfc2VydmljZX07JXtEQVRBOm5hZ2lvc19zdGF0ZX07JXtHUkVFRFlEQVRBOm5hZ2lvc19tZXNzYWdlfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NfSE9TVF9GTEFQUElOR19BTEVSVCIsIiV7TkFHSU9TX1RZUEVfSE9TVF9GTEFQUElOR19BTEVSVDpuYWdpb3NfdHlwZX06ICV7REFUQTpuYWdpb3NfaG9zdG5hbWV9OyV7REFUQTpuYWdpb3Nfc3RhdGV9OyV7R1JFRURZREFUQTpuYWdpb3NfbWVzc2FnZX0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX1NFUlZJQ0VfRE9XTlRJTUVfQUxFUlQiLCIle05BR0lPU19UWVBFX1NFUlZJQ0VfRE9XTlRJTUVfQUxFUlQ6bmFnaW9zX3R5cGV9OiAle0RBVEE6bmFnaW9zX2hvc3RuYW1lfTsle0RBVEE6bmFnaW9zX3NlcnZpY2V9OyV7REFUQTpuYWdpb3Nfc3RhdGV9OyV7R1JFRURZREFUQTpuYWdpb3NfY29tbWVudH0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX0hPU1RfRE9XTlRJTUVfQUxFUlQiLCIle05BR0lPU19UWVBFX0hPU1RfRE9XTlRJTUVfQUxFUlQ6bmFnaW9zX3R5cGV9OiAle0RBVEE6bmFnaW9zX2hvc3RuYW1lfTsle0RBVEE6bmFnaW9zX3N0YXRlfTsle0dSRUVEWURBVEE6bmFnaW9zX2NvbW1lbnR9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk5BR0lPU19QQVNTSVZFX1NFUlZJQ0VfQ0hFQ0siLCIle05BR0lPU19UWVBFX1BBU1NJVkVfU0VSVklDRV9DSEVDSzpuYWdpb3NfdHlwZX06ICV7REFUQTpuYWdpb3NfaG9zdG5hbWV9OyV7REFUQTpuYWdpb3Nfc2VydmljZX07JXtEQVRBOm5hZ2lvc19zdGF0ZX07JXtHUkVFRFlEQVRBOm5hZ2lvc19jb21tZW50fSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NfUEFTU0lWRV9IT1NUX0NIRUNLIiwiJXtOQUdJT1NfVFlQRV9QQVNTSVZFX0hPU1RfQ0hFQ0s6bmFnaW9zX3R5cGV9OiAle0RBVEE6bmFnaW9zX2hvc3RuYW1lfTsle0RBVEE6bmFnaW9zX3N0YXRlfTsle0dSRUVEWURBVEE6bmFnaW9zX2NvbW1lbnR9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk5BR0lPU19TRVJWSUNFX0VWRU5UX0hBTkRMRVIiLCIle05BR0lPU19UWVBFX1NFUlZJQ0VfRVZFTlRfSEFORExFUjpuYWdpb3NfdHlwZX06ICV7REFUQTpuYWdpb3NfaG9zdG5hbWV9OyV7REFUQTpuYWdpb3Nfc2VydmljZX07JXtEQVRBOm5hZ2lvc19zdGF0ZX07JXtEQVRBOm5hZ2lvc19zdGF0ZWxldmVsfTsle0RBVEE6bmFnaW9zX2V2ZW50X2hhbmRsZXJfbmFtZX0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX0hPU1RfRVZFTlRfSEFORExFUiIsIiV7TkFHSU9TX1RZUEVfSE9TVF9FVkVOVF9IQU5ETEVSOm5hZ2lvc190eXBlfTogJXtEQVRBOm5hZ2lvc19ob3N0bmFtZX07JXtEQVRBOm5hZ2lvc19zdGF0ZX07JXtEQVRBOm5hZ2lvc19zdGF0ZWxldmVsfTsle0RBVEE6bmFnaW9zX2V2ZW50X2hhbmRsZXJfbmFtZX0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX1RJTUVQRVJJT0RfVFJBTlNJVElPTiIsIiV7TkFHSU9TX1RZUEVfVElNRVBFUklPRF9UUkFOU0lUSU9OOm5hZ2lvc190eXBlfTogJXtEQVRBOm5hZ2lvc19zZXJ2aWNlfTsle0RBVEE6bmFnaW9zX3Vua25vd24xfTsle0RBVEE6bmFnaW9zX3Vua25vd24yfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NfRUNfTElORV9ESVNBQkxFX1NWQ19DSEVDSyIsIiV7TkFHSU9TX1RZUEVfRVhURVJOQUxfQ09NTUFORDpuYWdpb3NfdHlwZX06ICV7TkFHSU9TX0VDX0RJU0FCTEVfU1ZDX0NIRUNLOm5hZ2lvc19jb21tYW5kfTsle0RBVEE6bmFnaW9zX2hvc3RuYW1lfTsle0RBVEE6bmFnaW9zX3NlcnZpY2V9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk5BR0lPU19FQ19MSU5FX0RJU0FCTEVfSE9TVF9DSEVDSyIsIiV7TkFHSU9TX1RZUEVfRVhURVJOQUxfQ09NTUFORDpuYWdpb3NfdHlwZX06ICV7TkFHSU9TX0VDX0RJU0FCTEVfSE9TVF9DSEVDSzpuYWdpb3NfY29tbWFuZH07JXtEQVRBOm5hZ2lvc19ob3N0bmFtZX0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX0VDX0xJTkVfRU5BQkxFX1NWQ19DSEVDSyIsIiV7TkFHSU9TX1RZUEVfRVhURVJOQUxfQ09NTUFORDpuYWdpb3NfdHlwZX06ICV7TkFHSU9TX0VDX0VOQUJMRV9TVkNfQ0hFQ0s6bmFnaW9zX2NvbW1hbmR9OyV7REFUQTpuYWdpb3NfaG9zdG5hbWV9OyV7REFUQTpuYWdpb3Nfc2VydmljZX0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX0VDX0xJTkVfRU5BQkxFX0hPU1RfQ0hFQ0siLCIle05BR0lPU19UWVBFX0VYVEVSTkFMX0NPTU1BTkQ6bmFnaW9zX3R5cGV9OiAle05BR0lPU19FQ19FTkFCTEVfSE9TVF9DSEVDSzpuYWdpb3NfY29tbWFuZH07JXtEQVRBOm5hZ2lvc19ob3N0bmFtZX0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX0VDX0xJTkVfUFJPQ0VTU19TRVJWSUNFX0NIRUNLX1JFU1VMVCIsIiV7TkFHSU9TX1RZUEVfRVhURVJOQUxfQ09NTUFORDpuYWdpb3NfdHlwZX06ICV7TkFHSU9TX0VDX1BST0NFU1NfU0VSVklDRV9DSEVDS19SRVNVTFQ6bmFnaW9zX2NvbW1hbmR9OyV7REFUQTpuYWdpb3NfaG9zdG5hbWV9OyV7REFUQTpuYWdpb3Nfc2VydmljZX07JXtEQVRBOm5hZ2lvc19zdGF0ZX07JXtHUkVFRFlEQVRBOm5hZ2lvc19jaGVja19yZXN1bHR9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk5BR0lPU19FQ19MSU5FX1BST0NFU1NfSE9TVF9DSEVDS19SRVNVTFQiLCIle05BR0lPU19UWVBFX0VYVEVSTkFMX0NPTU1BTkQ6bmFnaW9zX3R5cGV9OiAle05BR0lPU19FQ19QUk9DRVNTX0hPU1RfQ0hFQ0tfUkVTVUxUOm5hZ2lvc19jb21tYW5kfTsle0RBVEE6bmFnaW9zX2hvc3RuYW1lfTsle0RBVEE6bmFnaW9zX3N0YXRlfTsle0dSRUVEWURBVEE6bmFnaW9zX2NoZWNrX3Jlc3VsdH0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX0VDX0xJTkVfRElTQUJMRV9IT1NUX1NWQ19OT1RJRklDQVRJT05TIiwiJXtOQUdJT1NfVFlQRV9FWFRFUk5BTF9DT01NQU5EOm5hZ2lvc190eXBlfTogJXtOQUdJT1NfRUNfRElTQUJMRV9IT1NUX1NWQ19OT1RJRklDQVRJT05TOm5hZ2lvc19jb21tYW5kfTsle0dSRUVEWURBVEE6bmFnaW9zX2hvc3RuYW1lfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NfRUNfTElORV9ESVNBQkxFX0hPU1RfTk9USUZJQ0FUSU9OUyIsIiV7TkFHSU9TX1RZUEVfRVhURVJOQUxfQ09NTUFORDpuYWdpb3NfdHlwZX06ICV7TkFHSU9TX0VDX0RJU0FCTEVfSE9TVF9OT1RJRklDQVRJT05TOm5hZ2lvc19jb21tYW5kfTsle0dSRUVEWURBVEE6bmFnaW9zX2hvc3RuYW1lfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NfRUNfTElORV9ESVNBQkxFX1NWQ19OT1RJRklDQVRJT05TIiwiJXtOQUdJT1NfVFlQRV9FWFRFUk5BTF9DT01NQU5EOm5hZ2lvc190eXBlfTogJXtOQUdJT1NfRUNfRElTQUJMRV9TVkNfTk9USUZJQ0FUSU9OUzpuYWdpb3NfY29tbWFuZH07JXtEQVRBOm5hZ2lvc19ob3N0bmFtZX07JXtHUkVFRFlEQVRBOm5hZ2lvc19zZXJ2aWNlfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NfRUNfTElORV9FTkFCTEVfSE9TVF9TVkNfTk9USUZJQ0FUSU9OUyIsIiV7TkFHSU9TX1RZUEVfRVhURVJOQUxfQ09NTUFORDpuYWdpb3NfdHlwZX06ICV7TkFHSU9TX0VDX0VOQUJMRV9IT1NUX1NWQ19OT1RJRklDQVRJT05TOm5hZ2lvc19jb21tYW5kfTsle0dSRUVEWURBVEE6bmFnaW9zX2hvc3RuYW1lfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NfRUNfTElORV9FTkFCTEVfSE9TVF9OT1RJRklDQVRJT05TIiwiJXtOQUdJT1NfVFlQRV9FWFRFUk5BTF9DT01NQU5EOm5hZ2lvc190eXBlfTogJXtOQUdJT1NfRUNfRU5BQkxFX0hPU1RfTk9USUZJQ0FUSU9OUzpuYWdpb3NfY29tbWFuZH07JXtHUkVFRFlEQVRBOm5hZ2lvc19ob3N0bmFtZX0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkFHSU9TX0VDX0xJTkVfRU5BQkxFX1NWQ19OT1RJRklDQVRJT05TIiwiJXtOQUdJT1NfVFlQRV9FWFRFUk5BTF9DT01NQU5EOm5hZ2lvc190eXBlfTogJXtOQUdJT1NfRUNfRU5BQkxFX1NWQ19OT1RJRklDQVRJT05TOm5hZ2lvc19jb21tYW5kfTsle0RBVEE6bmFnaW9zX2hvc3RuYW1lfTsle0dSRUVEWURBVEE6bmFnaW9zX3NlcnZpY2V9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIk5BR0lPU19FQ19MSU5FX1NDSEVEVUxFX0hPU1RfRE9XTlRJTUUiLCIle05BR0lPU19UWVBFX0VYVEVSTkFMX0NPTU1BTkQ6bmFnaW9zX3R5cGV9OiAle05BR0lPU19FQ19TQ0hFRFVMRV9IT1NUX0RPV05USU1FOm5hZ2lvc19jb21tYW5kfTsle0RBVEE6bmFnaW9zX2hvc3RuYW1lfTsle05VTUJFUjpuYWdpb3Nfc3RhcnRfdGltZX07JXtOVU1CRVI6bmFnaW9zX2VuZF90aW1lfTsle05VTUJFUjpuYWdpb3NfZml4ZWR9OyV7TlVNQkVSOm5hZ2lvc190cmlnZ2VyX2lkfTsle05VTUJFUjpuYWdpb3NfZHVyYXRpb259OyV7REFUQTphdXRob3J9OyV7REFUQTpjb21tZW50fSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJOQUdJT1NMT0dMSU5FIiwiJXtOQUdJT1NUSU1FfSAoPzole05BR0lPU19XQVJOSU5HfXwle05BR0lPU19DVVJSRU5UX1NFUlZJQ0VfU1RBVEV9fCV7TkFHSU9TX0NVUlJFTlRfSE9TVF9TVEFURX18JXtOQUdJT1NfU0VSVklDRV9OT1RJRklDQVRJT059fCV7TkFHSU9TX0hPU1RfTk9USUZJQ0FUSU9OfXwle05BR0lPU19TRVJWSUNFX0FMRVJUfXwle05BR0lPU19IT1NUX0FMRVJUfXwle05BR0lPU19TRVJWSUNFX0ZMQVBQSU5HX0FMRVJUfXwle05BR0lPU19IT1NUX0ZMQVBQSU5HX0FMRVJUfXwle05BR0lPU19TRVJWSUNFX0RPV05USU1FX0FMRVJUfXwle05BR0lPU19IT1NUX0RPV05USU1FX0FMRVJUfXwle05BR0lPU19QQVNTSVZFX1NFUlZJQ0VfQ0hFQ0t9fCV7TkFHSU9TX1BBU1NJVkVfSE9TVF9DSEVDS318JXtOQUdJT1NfU0VSVklDRV9FVkVOVF9IQU5ETEVSfXwle05BR0lPU19IT1NUX0VWRU5UX0hBTkRMRVJ9fCV7TkFHSU9TX1RJTUVQRVJJT0RfVFJBTlNJVElPTn18JXtOQUdJT1NfRUNfTElORV9ESVNBQkxFX1NWQ19DSEVDS318JXtOQUdJT1NfRUNfTElORV9FTkFCTEVfU1ZDX0NIRUNLfXwle05BR0lPU19FQ19MSU5FX0RJU0FCTEVfSE9TVF9DSEVDS318JXtOQUdJT1NfRUNfTElORV9FTkFCTEVfSE9TVF9DSEVDS318JXtOQUdJT1NfRUNfTElORV9QUk9DRVNTX0hPU1RfQ0hFQ0tfUkVTVUxUfXwle05BR0lPU19FQ19MSU5FX1BST0NFU1NfU0VSVklDRV9DSEVDS19SRVNVTFR9fCV7TkFHSU9TX0VDX0xJTkVfU0NIRURVTEVfSE9TVF9ET1dOVElNRX18JXtOQUdJT1NfRUNfTElORV9ESVNBQkxFX0hPU1RfU1ZDX05PVElGSUNBVElPTlN9fCV7TkFHSU9TX0VDX0xJTkVfRU5BQkxFX0hPU1RfU1ZDX05PVElGSUNBVElPTlN9fCV7TkFHSU9TX0VDX0xJTkVfRElTQUJMRV9IT1NUX05PVElGSUNBVElPTlN9fCV7TkFHSU9TX0VDX0xJTkVfRU5BQkxFX0hPU1RfTk9USUZJQ0FUSU9OU318JXtOQUdJT1NfRUNfTElORV9ESVNBQkxFX1NWQ19OT1RJRklDQVRJT05TfXwle05BR0lPU19FQ19MSU5FX0VOQUJMRV9TVkNfTk9USUZJQ0FUSU9OU30pIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIlBPU1RHUkVTUUwiLCIle0RBVEVTVEFNUDp0aW1lc3RhbXB9ICV7VFp9ICV7REFUQTp1c2VyX2lkfSAle0dSRUVEWURBVEE6Y29ubmVjdGlvbl9pZH0gJXtQT1NJTlQ6cGlkfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJSVVVJRCIsIlxcaHszMn0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiUkNPTlRST0xMRVIiLCIoPzxjb250cm9sbGVyPlteI10rKSMoPzxhY3Rpb24+XFx3KykiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiUkFJTFMzSEVBIiwiICg/bSlTdGFydGVkICV7V09SRDp2ZXJifSBcIiV7VVJJUEFUSFBBUkFNOnJlcXVlc3R9XCIgZm9yICV7SVBPUkhPU1Q6Y2xpZW50aXB9IGF0ICg/PHRpbWVzdGFtcD4le1lFQVJ9LSV7TU9OVEhOVU19LSV7TU9OVEhEQVl9ICV7SE9VUn06JXtNSU5VVEV9OiV7U0VDT05EfSAle0lTTzg2MDFfVElNRVpPTkV9KSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJSUFJPQ0VTU0lORyIsIlxcVypQcm9jZXNzaW5nIGJ5ICV7UkNPTlRST0xMRVJ9IGFzICg/PGZvcm1hdD5cXFMrKSg/OlxcVypQYXJhbWV0ZXJzOiB7JXtEQVRBOnBhcmFtc319XFxXKik/IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIlJBSUxTM0ZPT1QiLCJDb21wbGV0ZWQgJXtOVU1CRVI6cmVzcG9uc2V9JXtEQVRBfSBpbiAle05VTUJFUjp0b3RhbG1zfW1zICV7UkFJTFMzUFJPRklMRX0le0dSRUVEWURBVEF9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIlJBSUxTM1BST0ZJTEUiLCIoPzpcXChWaWV3czogJXtOVU1CRVI6dmlld21zfW1zIFxcfCBBY3RpdmVSZWNvcmQ6ICV7TlVNQkVSOmFjdGl2ZXJlY29yZG1zfW1zfFxcKEFjdGl2ZVJlY29yZDogJXtOVU1CRVI6YWN0aXZlcmVjb3JkbXN9bXMpPyIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJSQUlMUzMiLCIle1JBSUxTM0hFQUR9KD86JXtSUFJPQ0VTU0lOR30pPyg/PGNvbnRleHQ+KD86JXtEQVRBfVxcbikqKSg/OiV7UkFJTFMzRk9PVH0pPyIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJSRURJU1RJTUVTVEFNUCIsIiV7TU9OVEhEQVl9ICV7TU9OVEh9ICV7VElNRX0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiUkVESVNMT0ciLCJcXFsle1BPU0lOVDpwaWR9XFxdICV7UkVESVNUSU1FU1RBTVA6dGltZXN0YW1wfSBcXCoiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiUlVCWV9MT0dMRVZFTCIsIig/OkRFQlVHfEZBVEFMfEVSUk9SfFdBUk58SU5GTykiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiUlVCWV9MT0dHRVIiLCJbREZFV0ldLCBcXFsle1RJTUVTVEFNUF9JU084NjAxOnRpbWVzdGFtcH0gIyV7UE9TSU5UOnBpZH1cXF0gKiV7UlVCWV9MT0dMRVZFTDpsb2dsZXZlbH0gLS0gKyV7REFUQTpwcm9nbmFtZX06ICV7R1JFRURZREFUQTptZXNzYWdlfSIpCgoKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkpBVkFDTEFTUyIsIig/OlthLXpBLVokX11bYS16QS1aJF8wLTldKlxcLikqW2EtekEtWiRfXVthLXpBLVokXzAtOV0qIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkpBVkFGSUxFIiwiKD86W0EtWmEtejAtOV8uIC1dKykiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiSkFWQU1FVEhPRCIsIig/Oig8aW5pdD4pfFthLXpBLVokX11bYS16QS1aJF8wLTldKikiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiSkFWQVNUQUNLVFJBQ0VQQVJUIiwiJXtTUEFDRX1hdCAle0pBVkFDTEFTUzpjbGFzc31cXC4le0pBVkFNRVRIT0Q6bWV0aG9kfVxcKCV7SkFWQUZJTEU6ZmlsZX0oPzo6JXtOVU1CRVI6bGluZX0pP1xcKSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJKQVZBVEhSRUFEIiwiKD86W0EtWl17Mn0tUHJvY2Vzc29yW1xcZF0rKSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJKQVZBQ0xBU1MiLCIoPzpbYS16QS1aMC05LV0rXFwuKStbQS1aYS16MC05JF0rIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkpBVkFGSUxFIiwiKD86W0EtWmEtejAtOV8uLV0rKSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJKQVZBU1RBQ0tUUkFDRVBBUlQiLCJhdCAle0pBVkFDTEFTUzpjbGFzc31cXC4le1dPUkQ6bWV0aG9kfVxcKCV7SkFWQUZJTEU6ZmlsZX06JXtOVU1CRVI6bGluZX1cXCkiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiSkFWQUxPR01FU1NBR0UiLCIoLiopIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNBVEFMSU5BX0RBVEVTVEFNUCIsIiV7TU9OVEh9ICV7TU9OVEhEQVl9LCAyMCV7WUVBUn0gJXtIT1VSfTo/JXtNSU5VVEV9KD86Oj8le1NFQ09ORH0pICg/OkFNfFBNKSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJUT01DQVRfREFURVNUQU1QIiwiMjAle1lFQVJ9LSV7TU9OVEhOVU19LSV7TU9OVEhEQVl9ICV7SE9VUn06PyV7TUlOVVRFfSg/Ojo/JXtTRUNPTkR9KSAle0lTTzg2MDFfVElNRVpPTkV9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNBVEFMSU5BTE9HIiwiJXtDQVRBTElOQV9EQVRFU1RBTVA6dGltZXN0YW1wfSAle0pBVkFDTEFTUzpjbGFzc30gJXtKQVZBTE9HTUVTU0FHRTpsb2dtZXNzYWdlfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJUT01DQVRMT0ciLCIle1RPTUNBVF9EQVRFU1RBTVA6dGltZXN0YW1wfSBcXHwgJXtMT0dMRVZFTDpsZXZlbH0gXFx8ICV7SkFWQUNMQVNTOmNsYXNzfSAtICV7SkFWQUxPR01FU1NBR0U6bG9nbWVzc2FnZX0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiTkVUU0NSRUVOU0VTU0lPTkxPRyIsIiV7U1lTTE9HVElNRVNUQU1QOmRhdGV9ICV7SVBPUkhPU1Q6ZGV2aWNlfSAle0lQT1JIT1NUfTogTmV0U2NyZWVuIGRldmljZV9pZD0le1dPUkQ6ZGV2aWNlX2lkfSV7REFUQX06IHN0YXJ0X3RpbWU9JXtRVU9URURTVFJJTkc6c3RhcnRfdGltZX0gZHVyYXRpb249JXtJTlQ6ZHVyYXRpb259IHBvbGljeV9pZD0le0lOVDpwb2xpY3lfaWR9IHNlcnZpY2U9JXtEQVRBOnNlcnZpY2V9IHByb3RvPSV7SU5UOnByb3RvfSBzcmMgem9uZT0le1dPUkQ6c3JjX3pvbmV9IGRzdCB6b25lPSV7V09SRDpkc3Rfem9uZX0gYWN0aW9uPSV7V09SRDphY3Rpb259IHNlbnQ9JXtJTlQ6c2VudH0gcmN2ZD0le0lOVDpyY3ZkfSBzcmM9JXtJUE9SSE9TVDpzcmNfaXB9IGRzdD0le0lQT1JIT1NUOmRzdF9pcH0gc3JjX3BvcnQ9JXtJTlQ6c3JjX3BvcnR9IGRzdF9wb3J0PSV7SU5UOmRzdF9wb3J0fSBzcmMteGxhdGVkIGlwPSV7SVBPUkhPU1Q6c3JjX3hsYXRlZF9pcH0gcG9ydD0le0lOVDpzcmNfeGxhdGVkX3BvcnR9IGRzdC14bGF0ZWQgaXA9JXtJUE9SSE9TVDpkc3RfeGxhdGVkX2lwfSBwb3J0PSV7SU5UOmRzdF94bGF0ZWRfcG9ydH0gc2Vzc2lvbl9pZD0le0lOVDpzZXNzaW9uX2lkfSByZWFzb249JXtHUkVFRFlEQVRBOnJlYXNvbn0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQ0lTQ09fVEFHR0VEX1NZU0xPRyIsIl48JXtQT1NJTlQ6c3lzbG9nX3ByaX0+JXtDSVNDT1RJTUVTVEFNUDp0aW1lc3RhbXB9KCAle1NZU0xPR0hPU1Q6c3lzbG9naG9zdH0pPyA/OiAlJXtDSVNDT1RBRzpjaXNjb3RhZ306IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNJU0NPVElNRVNUQU1QIiwiJXtNT05USH0gKyV7TU9OVEhEQVl9KD86ICV7WUVBUn0pPyAle1RJTUV9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNJU0NPVEFHIiwiW0EtWjAtOV0rLSV7SU5UfS0oPzpbQS1aMC05X10rKSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJDSVNDT19BQ1RJT04iLCJCdWlsdHxUZWFyZG93bnxEZW55fERlbmllZHxkZW5pZWR8cmVxdWVzdGVkfHBlcm1pdHRlZHxkZW5pZWQgYnkgQUNMfGRpc2NhcmRlZHxlc3QtYWxsb3dlZHxEcm9wcGluZ3xjcmVhdGVkfGRlbGV0ZWQiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQ0lTQ09fUkVBU09OIiwiRHVwbGljYXRlIFRDUCBTWU58RmFpbGVkIHRvIGxvY2F0ZSBlZ3Jlc3MgaW50ZXJmYWNlfEludmFsaWQgdHJhbnNwb3J0IGZpZWxkfE5vIG1hdGNoaW5nIGNvbm5lY3Rpb258RE5TIFJlc3BvbnNlfEROUyBRdWVyeXwoPzole1dPUkR9XFxzKikqIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNJU0NPX0RJUkVDVElPTiIsIkluYm91bmR8aW5ib3VuZHxPdXRib3VuZHxvdXRib3VuZCIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJDSVNDT19JTlRFUlZBTCIsImZpcnN0IGhpdHwle0lOVH0tc2Vjb25kIGludGVydmFsIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNJU0NPX1hMQVRFX1RZUEUiLCJzdGF0aWN8ZHluYW1pYyIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJDSVNDT0ZXMTA0MDAxIiwiXFwoKD86UHJpbWFyeXxTZWNvbmRhcnkpXFwpIFN3aXRjaGluZyB0byBBQ1RJVkUgLSAle0dSRUVEWURBVEE6c3dpdGNoX3JlYXNvbn0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQ0lTQ09GVzEwNDAwMiIsIlxcKCg/OlByaW1hcnl8U2Vjb25kYXJ5KVxcKSBTd2l0Y2hpbmcgdG8gU1RBTkRCWSAtICV7R1JFRURZREFUQTpzd2l0Y2hfcmVhc29ufSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJDSVNDT0ZXMTA0MDAzIiwiXFwoKD86UHJpbWFyeXxTZWNvbmRhcnkpXFwpIFN3aXRjaGluZyB0byBGQUlMRURcXC4iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQ0lTQ09GVzEwNDAwNCIsIlxcKCg/OlByaW1hcnl8U2Vjb25kYXJ5KVxcKSBTd2l0Y2hpbmcgdG8gT0tcXC4iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQ0lTQ09GVzEwNTAwMyIsIlxcKCg/OlByaW1hcnl8U2Vjb25kYXJ5KVxcKSBNb25pdG9yaW5nIG9uIFtJaV1udGVyZmFjZSAle0dSRUVEWURBVEE6aW50ZXJmYWNlX25hbWV9IHdhaXRpbmciKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQ0lTQ09GVzEwNTAwNCIsIlxcKCg/OlByaW1hcnl8U2Vjb25kYXJ5KVxcKSBNb25pdG9yaW5nIG9uIFtJaV1udGVyZmFjZSAle0dSRUVEWURBVEE6aW50ZXJmYWNlX25hbWV9IG5vcm1hbCIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJDSVNDT0ZXMTA1MDA1IiwiXFwoKD86UHJpbWFyeXxTZWNvbmRhcnkpXFwpIExvc3QgRmFpbG92ZXIgY29tbXVuaWNhdGlvbnMgd2l0aCBtYXRlIG9uIFtJaV1udGVyZmFjZSAle0dSRUVEWURBVEE6aW50ZXJmYWNlX25hbWV9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNJU0NPRlcxMDUwMDgiLCJcXCgoPzpQcmltYXJ5fFNlY29uZGFyeSlcXCkgVGVzdGluZyBbSWldbnRlcmZhY2UgJXtHUkVFRFlEQVRBOmludGVyZmFjZV9uYW1lfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJDSVNDT0ZXMTA1MDA5IiwiXFwoKD86UHJpbWFyeXxTZWNvbmRhcnkpXFwpIFRlc3Rpbmcgb24gW0lpXW50ZXJmYWNlICV7R1JFRURZREFUQTppbnRlcmZhY2VfbmFtZX0gKD86UGFzc2VkfEZhaWxlZCkiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQ0lTQ09GVzEwNjAwMSIsIiV7Q0lTQ09fRElSRUNUSU9OOmRpcmVjdGlvbn0gJXtXT1JEOnByb3RvY29sfSBjb25uZWN0aW9uICV7Q0lTQ09fQUNUSU9OOmFjdGlvbn0gZnJvbSAle0lQOnNyY19pcH0vJXtJTlQ6c3JjX3BvcnR9IHRvICV7SVA6ZHN0X2lwfS8le0lOVDpkc3RfcG9ydH0gZmxhZ3MgJXtHUkVFRFlEQVRBOnRjcF9mbGFnc30gb24gaW50ZXJmYWNlICV7R1JFRURZREFUQTppbnRlcmZhY2V9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNJU0NPRlcxMDYwMDZfMTA2MDA3XzEwNjAxMCIsIiV7Q0lTQ09fQUNUSU9OOmFjdGlvbn0gJXtDSVNDT19ESVJFQ1RJT046ZGlyZWN0aW9ufSAle1dPUkQ6cHJvdG9jb2x9ICg/OmZyb218c3JjKSAle0lQOnNyY19pcH0vJXtJTlQ6c3JjX3BvcnR9KFxcKCV7REFUQTpzcmNfZnd1c2VyfVxcKSk/ICg/OnRvfGRzdCkgJXtJUDpkc3RfaXB9LyV7SU5UOmRzdF9wb3J0fShcXCgle0RBVEE6ZHN0X2Z3dXNlcn1cXCkpPyAoPzpvbiBpbnRlcmZhY2UgJXtEQVRBOmludGVyZmFjZX18ZHVlIHRvICV7Q0lTQ09fUkVBU09OOnJlYXNvbn0pIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNJU0NPRlcxMDYwMTQiLCIle0NJU0NPX0FDVElPTjphY3Rpb259ICV7Q0lTQ09fRElSRUNUSU9OOmRpcmVjdGlvbn0gJXtXT1JEOnByb3RvY29sfSBzcmMgJXtEQVRBOnNyY19pbnRlcmZhY2V9OiV7SVA6c3JjX2lwfShcXCgle0RBVEE6c3JjX2Z3dXNlcn1cXCkpPyBkc3QgJXtEQVRBOmRzdF9pbnRlcmZhY2V9OiV7SVA6ZHN0X2lwfShcXCgle0RBVEE6ZHN0X2Z3dXNlcn1cXCkpPyBcXCh0eXBlICV7SU5UOmljbXBfdHlwZX0sIGNvZGUgJXtJTlQ6aWNtcF9jb2RlfVxcKSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJDSVNDT0ZXMTA2MDE1IiwiJXtDSVNDT19BQ1RJT046YWN0aW9ufSAle1dPUkQ6cHJvdG9jb2x9IFxcKCV7REFUQTpwb2xpY3lfaWR9XFwpIGZyb20gJXtJUDpzcmNfaXB9LyV7SU5UOnNyY19wb3J0fSB0byAle0lQOmRzdF9pcH0vJXtJTlQ6ZHN0X3BvcnR9IGZsYWdzICV7REFUQTp0Y3BfZmxhZ3N9ICBvbiBpbnRlcmZhY2UgJXtHUkVFRFlEQVRBOmludGVyZmFjZX0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQ0lTQ09GVzEwNjAyMSIsIiV7Q0lTQ09fQUNUSU9OOmFjdGlvbn0gJXtXT1JEOnByb3RvY29sfSByZXZlcnNlIHBhdGggY2hlY2sgZnJvbSAle0lQOnNyY19pcH0gdG8gJXtJUDpkc3RfaXB9IG9uIGludGVyZmFjZSAle0dSRUVEWURBVEE6aW50ZXJmYWNlfSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJDSVNDT0ZXMTA2MDIzIiwiJXtDSVNDT19BQ1RJT046YWN0aW9ufSggcHJvdG9jb2wpPyAle1dPUkQ6cHJvdG9jb2x9IHNyYyAle0RBVEE6c3JjX2ludGVyZmFjZX06JXtEQVRBOnNyY19pcH0oLyV7SU5UOnNyY19wb3J0fSk/KFxcKCV7REFUQTpzcmNfZnd1c2VyfVxcKSk/IGRzdCAle0RBVEE6ZHN0X2ludGVyZmFjZX06JXtEQVRBOmRzdF9pcH0oLyV7SU5UOmRzdF9wb3J0fSk/KFxcKCV7REFUQTpkc3RfZnd1c2VyfVxcKSk/KCBcXCh0eXBlICV7SU5UOmljbXBfdHlwZX0sIGNvZGUgJXtJTlQ6aWNtcF9jb2RlfVxcKSk/IGJ5IGFjY2Vzcy1ncm91cCBcIj8le0RBVEE6cG9saWN5X2lkfVwiPyBcXFsle0RBVEE6aGFzaGNvZGUxfSwgJXtEQVRBOmhhc2hjb2RlMn1cXF0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQ0lTQ09GVzEwNjEwMF8yXzMiLCJhY2Nlc3MtbGlzdCAle05PVFNQQUNFOnBvbGljeV9pZH0gJXtDSVNDT19BQ1RJT046YWN0aW9ufSAle1dPUkQ6cHJvdG9jb2x9IGZvciB1c2VyICcle0RBVEE6c3JjX2Z3dXNlcn0nICV7REFUQTpzcmNfaW50ZXJmYWNlfS8le0lQOnNyY19pcH1cXCgle0lOVDpzcmNfcG9ydH1cXCkgLT4gJXtEQVRBOmRzdF9pbnRlcmZhY2V9LyV7SVA6ZHN0X2lwfVxcKCV7SU5UOmRzdF9wb3J0fVxcKSBoaXQtY250ICV7SU5UOmhpdF9jb3VudH0gJXtDSVNDT19JTlRFUlZBTDppbnRlcnZhbH0gXFxbJXtEQVRBOmhhc2hjb2RlMX0sICV7REFUQTpoYXNoY29kZTJ9XFxdIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNJU0NPRlcxMDYxMDAiLCJhY2Nlc3MtbGlzdCAle05PVFNQQUNFOnBvbGljeV9pZH0gJXtDSVNDT19BQ1RJT046YWN0aW9ufSAle1dPUkQ6cHJvdG9jb2x9ICV7REFUQTpzcmNfaW50ZXJmYWNlfS8le0lQOnNyY19pcH1cXCgle0lOVDpzcmNfcG9ydH1cXCkoXFwoJXtEQVRBOnNyY19md3VzZXJ9XFwpKT8gLT4gJXtEQVRBOmRzdF9pbnRlcmZhY2V9LyV7SVA6ZHN0X2lwfVxcKCV7SU5UOmRzdF9wb3J0fVxcKShcXCgle0RBVEE6c3JjX2Z3dXNlcn1cXCkpPyBoaXQtY250ICV7SU5UOmhpdF9jb3VudH0gJXtDSVNDT19JTlRFUlZBTDppbnRlcnZhbH0gXFxbJXtEQVRBOmhhc2hjb2RlMX0sICV7REFUQTpoYXNoY29kZTJ9XFxdIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNJU0NPRlcxMTAwMDIiLCIle0NJU0NPX1JFQVNPTjpyZWFzb259IGZvciAle1dPUkQ6cHJvdG9jb2x9IGZyb20gJXtEQVRBOnNyY19pbnRlcmZhY2V9OiV7SVA6c3JjX2lwfS8le0lOVDpzcmNfcG9ydH0gdG8gJXtJUDpkc3RfaXB9LyV7SU5UOmRzdF9wb3J0fSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJDSVNDT0ZXMzAyMDEwIiwiJXtJTlQ6Y29ubmVjdGlvbl9jb3VudH0gaW4gdXNlLCAle0lOVDpjb25uZWN0aW9uX2NvdW50X21heH0gbW9zdCB1c2VkIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNJU0NPRlczMDIwMTNfMzAyMDE0XzMwMjAxNV8zMDIwMTYiLCIle0NJU0NPX0FDVElPTjphY3Rpb259KD86ICV7Q0lTQ09fRElSRUNUSU9OOmRpcmVjdGlvbn0pPyAle1dPUkQ6cHJvdG9jb2x9IGNvbm5lY3Rpb24gJXtJTlQ6Y29ubmVjdGlvbl9pZH0gZm9yICV7REFUQTpzcmNfaW50ZXJmYWNlfTole0lQOnNyY19pcH0vJXtJTlQ6c3JjX3BvcnR9KCBcXCgle0lQOnNyY19tYXBwZWRfaXB9LyV7SU5UOnNyY19tYXBwZWRfcG9ydH1cXCkpPyhcXCgle0RBVEE6c3JjX2Z3dXNlcn1cXCkpPyB0byAle0RBVEE6ZHN0X2ludGVyZmFjZX06JXtJUDpkc3RfaXB9LyV7SU5UOmRzdF9wb3J0fSggXFwoJXtJUDpkc3RfbWFwcGVkX2lwfS8le0lOVDpkc3RfbWFwcGVkX3BvcnR9XFwpKT8oXFwoJXtEQVRBOmRzdF9md3VzZXJ9XFwpKT8oIGR1cmF0aW9uICV7VElNRTpkdXJhdGlvbn0gYnl0ZXMgJXtJTlQ6Ynl0ZXN9KT8oPzogJXtDSVNDT19SRUFTT046cmVhc29ufSk/KCBcXCgle0RBVEE6dXNlcn1cXCkpPyIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJDSVNDT0ZXMzAyMDIwXzMwMjAyMSIsIiV7Q0lTQ09fQUNUSU9OOmFjdGlvbn0oPzogJXtDSVNDT19ESVJFQ1RJT046ZGlyZWN0aW9ufSk/ICV7V09SRDpwcm90b2NvbH0gY29ubmVjdGlvbiBmb3IgZmFkZHIgJXtJUDpkc3RfaXB9LyV7SU5UOmljbXBfc2VxX251bX0oPzpcXCgle0RBVEE6Znd1c2VyfVxcKSk/IGdhZGRyICV7SVA6c3JjX3hsYXRlZF9pcH0vJXtJTlQ6aWNtcF9jb2RlX3hsYXRlZH0gbGFkZHIgJXtJUDpzcmNfaXB9LyV7SU5UOmljbXBfY29kZX0oIFxcKCV7REFUQTp1c2VyfVxcKSk/IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNJU0NPRlczMDUwMTEiLCIle0NJU0NPX0FDVElPTjphY3Rpb259ICV7Q0lTQ09fWExBVEVfVFlQRTp4bGF0ZV90eXBlfSAle1dPUkQ6cHJvdG9jb2x9IHRyYW5zbGF0aW9uIGZyb20gJXtEQVRBOnNyY19pbnRlcmZhY2V9OiV7SVA6c3JjX2lwfSgvJXtJTlQ6c3JjX3BvcnR9KT8oXFwoJXtEQVRBOnNyY19md3VzZXJ9XFwpKT8gdG8gJXtEQVRBOnNyY194bGF0ZWRfaW50ZXJmYWNlfTole0lQOnNyY194bGF0ZWRfaXB9LyV7REFUQTpzcmNfeGxhdGVkX3BvcnR9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNJU0NPRlczMTMwMDFfMzEzMDA0XzMxMzAwOCIsIiV7Q0lTQ09fQUNUSU9OOmFjdGlvbn0gJXtXT1JEOnByb3RvY29sfSB0eXBlPSV7SU5UOmljbXBfdHlwZX0sIGNvZGU9JXtJTlQ6aWNtcF9jb2RlfSBmcm9tICV7SVA6c3JjX2lwfSBvbiBpbnRlcmZhY2UgJXtEQVRBOmludGVyZmFjZX0oIHRvICV7SVA6ZHN0X2lwfSk/IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNJU0NPRlczMTMwMDUiLCIle0NJU0NPX1JFQVNPTjpyZWFzb259IGZvciAle1dPUkQ6cHJvdG9jb2x9IGVycm9yIG1lc3NhZ2U6ICV7V09SRDplcnJfcHJvdG9jb2x9IHNyYyAle0RBVEE6ZXJyX3NyY19pbnRlcmZhY2V9OiV7SVA6ZXJyX3NyY19pcH0oXFwoJXtEQVRBOmVycl9zcmNfZnd1c2VyfVxcKSk/IGRzdCAle0RBVEE6ZXJyX2RzdF9pbnRlcmZhY2V9OiV7SVA6ZXJyX2RzdF9pcH0oXFwoJXtEQVRBOmVycl9kc3RfZnd1c2VyfVxcKSk/IFxcKHR5cGUgJXtJTlQ6ZXJyX2ljbXBfdHlwZX0sIGNvZGUgJXtJTlQ6ZXJyX2ljbXBfY29kZX1cXCkgb24gJXtEQVRBOmludGVyZmFjZX0gaW50ZXJmYWNlXFwuICBPcmlnaW5hbCBJUCBwYXlsb2FkOiAle1dPUkQ6cHJvdG9jb2x9IHNyYyAle0lQOm9yaWdfc3JjX2lwfS8le0lOVDpvcmlnX3NyY19wb3J0fShcXCgle0RBVEE6b3JpZ19zcmNfZnd1c2VyfVxcKSk/IGRzdCAle0lQOm9yaWdfZHN0X2lwfS8le0lOVDpvcmlnX2RzdF9wb3J0fShcXCgle0RBVEE6b3JpZ19kc3RfZnd1c2VyfVxcKSk/IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNJU0NPRlczMjEwMDEiLCJSZXNvdXJjZSAnJXtXT1JEOnJlc291cmNlX25hbWV9JyBsaW1pdCBvZiAle1BPU0lOVDpyZXNvdXJjZV9saW1pdH0gcmVhY2hlZCBmb3Igc3lzdGVtIikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNJU0NPRlc0MDIxMTciLCIle1dPUkQ6cHJvdG9jb2x9OiBSZWNlaXZlZCBhIG5vbi1JUFNlYyBwYWNrZXQgXFwocHJvdG9jb2w9ICV7V09SRDpvcmlnX3Byb3RvY29sfVxcKSBmcm9tICV7SVA6c3JjX2lwfSB0byAle0lQOmRzdF9pcH0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQ0lTQ09GVzQwMjExOSIsIiV7V09SRDpwcm90b2NvbH06IFJlY2VpdmVkIGFuICV7V09SRDpvcmlnX3Byb3RvY29sfSBwYWNrZXQgXFwoU1BJPSAle0RBVEE6c3BpfSwgc2VxdWVuY2UgbnVtYmVyPSAle0RBVEE6c2VxX251bX1cXCkgZnJvbSAle0lQOnNyY19pcH0gXFwodXNlcj0gJXtEQVRBOnVzZXJ9XFwpIHRvICV7SVA6ZHN0X2lwfSB0aGF0IGZhaWxlZCBhbnRpLXJlcGxheSBjaGVja2luZyIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJDSVNDT0ZXNDE5MDAxIiwiJXtDSVNDT19BQ1RJT046YWN0aW9ufSAle1dPUkQ6cHJvdG9jb2x9IHBhY2tldCBmcm9tICV7REFUQTpzcmNfaW50ZXJmYWNlfTole0lQOnNyY19pcH0vJXtJTlQ6c3JjX3BvcnR9IHRvICV7REFUQTpkc3RfaW50ZXJmYWNlfTole0lQOmRzdF9pcH0vJXtJTlQ6ZHN0X3BvcnR9LCByZWFzb246ICV7R1JFRURZREFUQTpyZWFzb259IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNJU0NPRlc0MTkwMDIiLCIle0NJU0NPX1JFQVNPTjpyZWFzb259IGZyb20gJXtEQVRBOnNyY19pbnRlcmZhY2V9OiV7SVA6c3JjX2lwfS8le0lOVDpzcmNfcG9ydH0gdG8gJXtEQVRBOmRzdF9pbnRlcmZhY2V9OiV7SVA6ZHN0X2lwfS8le0lOVDpkc3RfcG9ydH0gd2l0aCBkaWZmZXJlbnQgaW5pdGlhbCBzZXF1ZW5jZSBudW1iZXIiKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiQ0lTQ09GVzUwMDAwNCIsIiV7Q0lTQ09fUkVBU09OOnJlYXNvbn0gZm9yIHByb3RvY29sPSV7V09SRDpwcm90b2NvbH0sIGZyb20gJXtJUDpzcmNfaXB9LyV7SU5UOnNyY19wb3J0fSB0byAle0lQOmRzdF9pcH0vJXtJTlQ6ZHN0X3BvcnR9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNJU0NPRlc2MDIzMDNfNjAyMzA0IiwiJXtXT1JEOnByb3RvY29sfTogQW4gJXtDSVNDT19ESVJFQ1RJT046ZGlyZWN0aW9ufSAle0dSRUVEWURBVEE6dHVubmVsX3R5cGV9IFNBIFxcKFNQST0gJXtEQVRBOnNwaX1cXCkgYmV0d2VlbiAle0lQOnNyY19pcH0gYW5kICV7SVA6ZHN0X2lwfSBcXCh1c2VyPSAle0RBVEE6dXNlcn1cXCkgaGFzIGJlZW4gJXtDSVNDT19BQ1RJT046YWN0aW9ufSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJDSVNDT0ZXNzEwMDAxXzcxMDAwMl83MTAwMDNfNzEwMDA1XzcxMDAwNiIsIiV7V09SRDpwcm90b2NvbH0gKD86cmVxdWVzdHxhY2Nlc3MpICV7Q0lTQ09fQUNUSU9OOmFjdGlvbn0gZnJvbSAle0lQOnNyY19pcH0vJXtJTlQ6c3JjX3BvcnR9IHRvICV7REFUQTpkc3RfaW50ZXJmYWNlfTole0lQOmRzdF9pcH0vJXtJTlQ6ZHN0X3BvcnR9IikKICAgIFRFUk1JVC5QQVJTRVIuYWRkUGF0dGVybkdyb2soIkNJU0NPRlc3MTMxNzIiLCJHcm91cCA9ICV7R1JFRURZREFUQTpncm91cH0sIElQID0gJXtJUDpzcmNfaXB9LCBBdXRvbWF0aWMgTkFUIERldGVjdGlvbiBTdGF0dXM6XFxzK1JlbW90ZSBlbmRcXHMqJXtEQVRBOmlzX3JlbW90ZV9uYXR0ZWR9XFxzKmJlaGluZCBhIE5BVCBkZXZpY2VcXHMrVGhpc1xccytlbmRcXHMqJXtEQVRBOmlzX2xvY2FsX25hdHRlZH1cXHMqYmVoaW5kIGEgTkFUIGRldmljZSIpCiAgICBURVJNSVQuUEFSU0VSLmFkZFBhdHRlcm5Hcm9rKCJDSVNDT0ZXNzMzMTAwIiwiXFxbXFxzKiV7REFUQTpkcm9wX3R5cGV9XFxzKlxcXSBkcm9wICV7REFUQTpkcm9wX3JhdGVfaWR9IGV4Y2VlZGVkLiBDdXJyZW50IGJ1cnN0IHJhdGUgaXMgJXtJTlQ6ZHJvcF9yYXRlX2N1cnJlbnRfYnVyc3R9IHBlciBzZWNvbmQsIG1heCBjb25maWd1cmVkIHJhdGUgaXMgJXtJTlQ6ZHJvcF9yYXRlX21heF9idXJzdH07IEN1cnJlbnQgYXZlcmFnZSByYXRlIGlzICV7SU5UOmRyb3BfcmF0ZV9jdXJyZW50X2F2Z30gcGVyIHNlY29uZCwgbWF4IGNvbmZpZ3VyZWQgcmF0ZSBpcyAle0lOVDpkcm9wX3JhdGVfbWF4X2F2Z307IEN1bXVsYXRpdmUgdG90YWwgY291bnQgaXMgJXtJTlQ6ZHJvcF90b3RhbF9jb3VudH0iKQogICAgVEVSTUlULlBBUlNFUi5hZGRQYXR0ZXJuR3JvaygiU0hPUkVXQUxMIiwiKCV7U1lTTE9HVElNRVNUQU1QOnRpbWVzdGFtcH0pICgle1dPUkQ6bmZfaG9zdH0pIGtlcm5lbDouKlNob3Jld2FsbDooJXtXT1JEOm5mX2FjdGlvbjF9KT86KCV7V09SRDpuZl9hY3Rpb24yfSk/LipJTj0oJXtVU0VSTkFNRTpuZl9pbl9pbnRlcmZhY2V9KT8uKihPVVQ9ICpNQUM9KCV7Q09NTU9OTUFDOm5mX2RzdF9tYWN9KTooJXtDT01NT05NQUM6bmZfc3JjX21hY30pP3xPVVQ9JXtVU0VSTkFNRTpuZl9vdXRfaW50ZXJmYWNlfSkuKlNSQz0oJXtJUFY0Om5mX3NyY19pcH0pLipEU1Q9KCV7SVBWNDpuZl9kc3RfaXB9KS4qTEVOPSgle1dPUkQ6bmZfbGVufSkuPypUT1M9KCV7V09SRDpuZl90b3N9KS4/KlBSRUM9KCV7V09SRDpuZl9wcmVjfSkuPypUVEw9KCV7SU5UOm5mX3R0bH0pLj8qSUQ9KCV7SU5UOm5mX2lkfSkuPypQUk9UTz0oJXtXT1JEOm5mX3Byb3RvY29sfSkuPypTUFQ9KCV7SU5UOm5mX3NyY19wb3J0fT8uKkRQVD0le0lOVDpuZl9kc3RfcG9ydH0/LiopIikKZW5kCgpmdW5jdGlvbiBvbkJlZm9yZVNlbmRSZXN1bHQocmVzdWx0KQoKICAgIGlmKHJlc3VsdFsncmF3J10gfj0gbmlsIGFuZCByZXN1bHRbJ3JhdyddIH49ICIiKSB0aGVuCiAgICAgICAgcmVzdWx0WydyYXcnXSA9IFRFUk1JVC5BUEkuaGV4MnN0cihyZXN1bHRbJ3JhdyddKQogICAgZW5kCgogICAgaWYocmVzdWx0WydAdGltZXN0YW1wJ10gPT0gIiIgb3IgcmVzdWx0WydAdGltZXN0YW1wJ10gPT0gbmlsKSB0aGVuCiAgICAgICAgcmVzdWx0WydAdGltZXN0YW1wJ10gPSBwYXJzZV90aW1lc3RhbXAobWF0aC5mbG9vcihURVJNSVQuQVBJLnRpbWUoKS8xMDAwKSkKCiAgICBlbmQKICAgIHJlc3VsdFsnQHRpbWVzdGFtcCddID0gVEVSTUlULkFQSS5tb2RpZnkocmVzdWx0WydAdGltZXN0YW1wJ10sIFRFUk1JVC5BUEkuTU9ESUZZLlRSSU0pCiAgICBpZiByZXN1bHRbImV2ZW50Il0gfj0gbmlsIGFuZCB0eXBlKHJlc3VsdFsiZXZlbnQiXSkgPT0gInRhYmxlIiB0aGVuCiAgICAgICAgaWYgcmVzdWx0WyJldmVudCJdWyJ0aW1lc3RhbXAiXSB+PSBuaWwgdGhlbgogICAgICAgICAgICByZXN1bHRbImV2ZW50Il1bInRpbWVzdGFtcCJdID0gVEVSTUlULkFQSS5tb2RpZnkocmVzdWx0WyJldmVudCJdWyJ0aW1lc3RhbXAiXSwgVEVSTUlULkFQSS5NT0RJRlkuVFJJTSkKICAgICAgICBlbmQKICAgIGVuZAogICAgcmV0dXJuIHJlc3VsdAplbmQKCmxvY2FsIGZ1bmN0aW9uIGhleGRlY29kZShoZXgpCiAgICByZXR1cm4gKGhleDpnc3ViKCIleCV4IiwgZnVuY3Rpb24oZGlnaXRzKSByZXR1cm4gc3RyaW5nLmNoYXIodG9udW1iZXIoZGlnaXRzLCAxNikpIGVuZCkpCmVuZAoKbG9jYWwgZnVuY3Rpb24gZGVlcGNvcHkobywgc2VlbikKICAgIHNlZW4gPSBzZWVuIG9yIHt9CiAgICBpZiBvID09IG5pbCB0aGVuIHJldHVybiBuaWwgZW5kCiAgICBpZiBzZWVuW29dIHRoZW4gcmV0dXJuIHNlZW5bb10gZW5kCgogICAgbG9jYWwgbm8KICAgIGlmIHR5cGUobykgPT0gJ3RhYmxlJyB0aGVuCiAgICAgICAgbm8gPSB7fQogICAgICAgIHNlZW5bb10gPSBubwoKICAgICAgICBmb3IgaywgdiBpbiBuZXh0LCBvLCBuaWwgZG8KICAgICAgICAgICAgbm9bZGVlcGNvcHkoaywgc2VlbildID0gZGVlcGNvcHkodiwgc2VlbikKICAgICAgICBlbmQKICAgICAgICBzZXRtZXRhdGFibGUobm8sIGRlZXBjb3B5KGdldG1ldGF0YWJsZShvKSwgc2VlbikpCiAgICBlbHNlIC0tIG51bWJlciwgc3RyaW5nLCBib29sZWFuLCBldGMKICAgICAgICBubyA9IG8KICAgIGVuZAogICAgcmV0dXJuIG5vCmVuZAoKZnVuY3Rpb24gZnJvbV9iYXNlNjQoZGF0YSkKICAgIGxvY2FsIGIgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLycKICAgIGRhdGEgPSBzdHJpbmcuZ3N1YihkYXRhLCAnW14nLi5iLi4nPV0nLCAnJykKICAgIHJldHVybiAoZGF0YTpnc3ViKCcuJywgZnVuY3Rpb24oeCkKICAgICAgICBpZiAoeCA9PSAnPScpIHRoZW4gcmV0dXJuICcnIGVuZAogICAgICAgIGxvY2FsIHIsZj0nJywoYjpmaW5kKHgpLTEpCiAgICAgICAgZm9yIGk9NiwxLC0xIGRvIHI9ci4uKGYlMl5pLWYlMl4oaS0xKT4wIGFuZCAnMScgb3IgJzAnKSBlbmQKICAgICAgICByZXR1cm4gcjsKICAgIGVuZCk6Z3N1YignJWQlZCVkPyVkPyVkPyVkPyVkPyVkPycsIGZ1bmN0aW9uKHgpCiAgICAgICAgaWYgKCN4IH49IDgpIHRoZW4gcmV0dXJuICcnIGVuZAogICAgICAgIGxvY2FsIGM9MAogICAgICAgIGZvciBpPTEsOCBkbyBjPWMrKHg6c3ViKGksaSk9PScxJyBhbmQgMl4oOC1pKSBvciAwKSBlbmQKICAgICAgICByZXR1cm4gc3RyaW5nLmNoYXIoYykKICAgIGVuZCkpCmVuZAoKCgoKCgoKCgoKZnVuY3Rpb24gY29weShvYmopCiAgICBpZiB0eXBlKG9iaikgfj0gJ3RhYmxlJyB0aGVuIHJldHVybiBvYmogZW5kCiAgICBpZiBzZWVuIGFuZCBzZWVuW29ial0gdGhlbiByZXR1cm4gc2VlbltvYmpdIGVuZAogICAgbG9jYWwgcyA9IHNlZW4gb3Ige30KICAgIGxvY2FsIHJlcyA9IHNldG1ldGF0YWJsZSh7fSwgZ2V0bWV0YXRhYmxlKG9iaikpCiAgICBzW29ial0gPSByZXMKICAgIGZvciBrLCB2IGluIHBhaXJzKG9iaikgZG8gcmVzW2NvcHkoaywgcyldID0gY29weSh2LCBzKSBlbmQKICAgIHJldHVybiByZXMKZW5kCgotLWNvcHkgPSB0YWJsZS5zaGFsbG93X2NvcHkoYSkKCmZ1bmN0aW9uIFRFUk1JVDptYWluKHBhcmFtcykKICAgIC0tbG9jYWwgciA9IHt9CiAgICAtLWZvciBpID0gMSwgMTUwMDAgZG8KICAgIC0tciA9IGNvcHkocGFyYW1zKQogICAgLS1yID0gVEVSTUlUOmRvX21haW4oY29weShwYXJhbXMpKQogICAgLS1Hcm9rUGF0dGVybnNQbGFjZW1lbnQoKQogICAgLS1yW2ldID0gc2VsZi5QQVJTRVIuZ3JvaygiaWx5YSB0byByb290Ii4uaS4uIiBvbiAvZGV2L3B0cy8wIiwgIl4le1VTRVJOQU1FOnVzZXJuYW1lfVxccyt0b1xccysle1VTRVJOQU1FOnN1cGVydXNlcn1cXHMrb25cXHMrJXtEQVRBOnNoZWxsfSQiLCBmYWxzZSkKCiAgICAtLXJbaV0gPSBzZWxmLlBBUlNFUi5jZWYoIjwzMD5PY3QgMjIgMTk6MTc6MjEgc3RhZmZjb3Agc3RhZmZjb3A6IENFRjoyNHxTdGFmZmNvcHxhZ2VudHwwLjE1LjAtbWFzdGVyfDMzMTl8VXNlckxvZ29ufDEyfGRldmljZUFkZHJlc3M9MTcyLjMwLjI1MC4xNDAgZGV2aWNlQ3VzdG9tRGF0ZTE9T2N0IDIyIDE5OjE1OjQyIGRldmljZUN1c3RvbURhdGUxTGFiZWw9bG9jYWxfdGltZSBkZXZpY2VDdXN0b21EYXRlMj1PY3QgMjIgMTk6MTU6NTQgZGV2aWNlQ3VzdG9tRGF0ZTJMYWJlbD10aW1lX3JlZ2lzdGVyZWQgZGV2aWNlQ3VzdG9tTnVtYmVyMj0xMDAxIGRldmljZUN1c3RvbU51bWJlcjJMYWJlbD1hZ2VudF9hZ2VudC5jb25maWdfaWQgZGV2aWNlQ3VzdG9tU3RyaW5nMT1yb290IGRldmljZUN1c3RvbVN0cmluZzFMYWJlbD1hZ2VudF9hY2NvdW50LmZ1bGxfbmFtZSBkZXZpY2VDdXN0b21TdHJpbmc0PTQxMDE0d2Vic291cmNlYUx6MDNkSC10RGdjIGRldmljZUN1c3RvbVN0cmluZzRMYWJlbD1hZ2VudF9hZ2VudC5ndWlkIGRldmljZUN1c3RvbVN0cmluZzU9RGViaWFuIEdOVS9MaW51eCAxMCAoYnVzdGVyKSA0LjE5LjAtMjctYW1kNjQgR05VL0xpbnV4IGRldmljZUN1c3RvbVN0cmluZzVMYWJlbD1hZ2VudF9hZ2VudC5vcyBkZXZpY2VFdmVudENhdGVnb3J5PXByb2R1Y3RpdmUgZGV2aWNlUHJvY2Vzc05hbWU9VXNlckxvZ29uIGRldmljZVRpbWVab25lPVVUQyswMzowMCBlbmRUaW1lPU9jdCAxNCAxMjoyNDozOSBzb3VyY2VVc2VySWQ9MzIgc291cmNlVXNlck5hbWU9cm9vdCBzdXNlcj1yb290Ii4uaSkKICAgIC0tZW5kCiAgICByZXR1cm4gVEVSTUlUOmRvX21haW4ocGFyYW1zKQoKICAgIC0tcmV0dXJuIHtyPSJyIn0KCmVuZAoKZnVuY3Rpb24gVEVSTUlUOmRvX21haW4ocGFyYW1zKQoKICAgIC0tIDY5NzA3NDYxNjI2QzY1NzMwMDJENDQwMDRGNTU1NDUwNTU1NDAwMkQ3MDAwNzQ2MzcwMDAyRDJENjQ3MDZGNzI3NDAwMzIzMTAwMkQ2QTAwNDQ1MjRGNTAKCgogICAgZnVuY3Rpb24gc2V0WE1MUmVzdWx0KHJlc3VsdCwgYmFzZV9rZXksIGssIHYpCiAgICAgICAgbG9jYWwgbmV3X2tleSA9ICIiCiAgICAgICAgaWYgKGJhc2Vfa2V5ID09ICIiKSB0aGVuCiAgICAgICAgICAgIG5ld19rZXkgPSBrCiAgICAgICAgZWxzZQogICAgICAgICAgICBuZXdfa2V5ID0gYmFzZV9rZXkgLi4gIl9fIiAuLiBrCiAgICAgICAgZW5kCgogICAgICAgIGlmICh0eXBlKHYpID09ICJ0YWJsZSIpIHRoZW4KICAgICAgICAgICAgZm9yIGtrLCB2diBpbiBwYWlycyh2KSBkbwogICAgICAgICAgICAgICAgc2V0WE1MUmVzdWx0KHJlc3VsdCwgbmV3X2tleSwga2ssIHZ2KQogICAgICAgICAgICBlbmQKICAgICAgICBlbHNlCiAgICAgICAgICAgIHJlc3VsdFtuZXdfa2V5XSA9IHYKICAgICAgICBlbmQKCiAgICAgICAgLS1yZXR1cm4gcmVzdWx0CiAgICBlbmQKCgogICAgR3Jva1BhdHRlcm5zUGxhY2VtZW50KCkKICAgIHBhcmFtcy5kYXRhLm1lc3NhZ2UgPSBURVJNSVQuQVBJLmhleDJzdHIocGFyYW1zLmRhdGEubWVzc2FnZSkKICAgIHBhcmFtcy5kYXRhLm1lc3NhZ2UgPSBURVJNSVQuQVBJLm1vZGlmeShwYXJhbXMuZGF0YS5tZXNzYWdlLCBzZWxmLkFQSS5NT0RJRlkuVFJJTSkKICAgIHBhcmFtcy5kYXRhLm1lc3NhZ2UgPSBURVJNSVQuUEFSU0VSLmpzb24ocGFyYW1zLmRhdGEubWVzc2FnZSkKICAgIGZ1bmN0aW9uIGRvX3BhcnNlKHJlc3VsdCwgcGFyYW1zKQogICAgICAgIC0tINCe0LHRgNCw0LHQvtGC0LDQvdC90YvQtSDQv9Cw0YDQsNC80LXRgtGA0YsKCiAgICAgICAgLS0g0JLRi9C/0L7Qu9C90Y/QtdC8INC/0LXRgNC10LHQvtGAINCy0YHQtdCz0L4g0L/QsNC50L/Qu9Cw0LnQvdCwCgogICAgICAgIGxvY2FsIHBhcnNlZERhdGEgPSB7IH0KCiAgICAgICAgbG9jYWwgRXJycm9yRGF0YSA9IHsgfQoKCiAgICAgICAgbG9jYWwgcHJldk1ldGhvZCA9ICIiCiAgICAgICAgbG9jYWwgcHJldkZpZWxkID0gIiIKICAgICAgICBsb2NhbCBwcmV2U3RhdHVzID0gZmFsc2UKICAgICAgICAtLSBFTUlUX1RFUk1JVC5Hcm9rUGF0dGVybnNfQ09OVEVOVAogICAgICAgIGZvciBrZXksdmFsIGluIHBhaXJzKHBhcmFtcy5wYXJzZXJzKSBkbwogICAgICAgICAgICBwYXJzZWREYXRhW2tleV0gPSB7IGlkID0ga2V5LCBzdGF0dXMgPSBmYWxzZX0KICAgICAgICAgICAgaWYgKChwcmV2TWV0aG9kID09ICJncm9rIiBvciBwcmV2TWV0aG9kID09ICJkb25vdGhpbmciKSBhbmQgdmFsLm1ldGhvZCA9PSAiZ3JvayIgYW5kIHByZXZGaWVsZCA9PSB2YWwuZmllbGQgYW5kIHByZXZTdGF0dXMgPT0gdHJ1ZSkgdGhlbgogICAgICAgICAgICAgICAgOjpjb250aW51ZTo6CiAgICAgICAgICAgICAgICB2YWwubWV0aG9kID0gImRvbm90aGluZyIKICAgICAgICAgICAgICAgIHByZXZTdGF0dXM9IHRydWUKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgcHJldlN0YXR1cz0gZmFsc2UKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIHByZXZNZXRob2QgPSB2YWwubWV0aG9kCiAgICAgICAgICAgIHByZXZGaWVsZCA9IHZhbC5maWVsZAogICAgICAgICAgICAtLXByZXZTdGF0dXM9IGZhbHNlCiAgICAgICAgICAgIGlmICh2YWwubWV0aG9kID09ICJqc29uIiBhbmQgKHR5cGUocmVzdWx0KSA9PSAic3RyaW5nIiBvciB0eXBlKHJlc3VsdCkgPT0gInRhYmxlIikpIHRoZW4KCgogICAgICAgICAgICAgICAgaWYgKHZhbC5maWVsZCB+PSBuaWwgYW5kIHZhbC5maWVsZCB+PSAiIikgdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIGpzb25SZXN1bHQgPSBzZWxmLkFQSS5tb2RpZnkocmVzdWx0W3ZhbC5maWVsZF0sIHNlbGYuQVBJLk1PRElGWS5UUklNKQogICAgICAgICAgICAgICAgICAgIGpzb25SZXN1bHQgPSBzZWxmLlBBUlNFUi5qc29uKGpzb25SZXN1bHQpCgogICAgICAgICAgICAgICAgICAgIHNpemUxID0gMAogICAgICAgICAgICAgICAgICAgIGZvciBrLCB2IGluIHBhaXJzKGpzb25SZXN1bHQpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIHNpemUxID0gc2l6ZTEgKyAxCiAgICAgICAgICAgICAgICAgICAgICAgIC0tIHJlc3VsdFtrXSA9IHYKCiAgICAgICAgICAgICAgICAgICAgICAgIC0tIHNpemUxID0gc2l6ZTEgKyAxCgogICAgICAgICAgICAgICAgICAgICAgICBzZXRYTUxSZXN1bHQocmVzdWx0LCAiIiwgaywgdikKCiAgICAgICAgICAgICAgICAgICAgICAgIC0tcmVzdWx0W2tdID0gdgoKICAgICAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgICAgICAgaWYgc2l6ZTEgPiAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkRGF0YVtrZXldID0geyBpZCA9IGtleSwgc3RhdHVzID0gdHJ1ZX0KICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIEVycnJvckRhdGFba2V5XSAgPSB7IGlkID0ga2V5LCBlcnJvciA9ICdKc29uIEVycm9yJ30KICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBzZWxmLkFQSS5tb2RpZnkocmVzdWx0LCBzZWxmLkFQSS5NT0RJRlkuVFJJTSkKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBzZWxmLlBBUlNFUi5qc29uKHJlc3VsdCkKCiAgICAgICAgICAgICAgICAgICAgc2l6ZTEgPSAwCiAgICAgICAgICAgICAgICAgICAgZm9yIF8gaW4gcGFpcnMocmVzdWx0KSBkbyBzaXplMSA9IHNpemUxICsgMSBlbmQKCiAgICAgICAgICAgICAgICAgICAgaWYgc2l6ZTEgPiAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkRGF0YVtrZXldID0geyBpZCA9IGtleSwgc3RhdHVzID0gdHJ1ZX0KICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIEVycnJvckRhdGFba2V5XSAgPSB7IGlkID0ga2V5LCBlcnJvciA9ICdKc29uIEVycm9yJ30KICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAoKCiAgICAgICAgICAgICAgICAtLSDQldGB0LvQuCDQvdGD0LbQvdC+INC+0LHRgNCw0LHQvtGC0LDRgtGMIEdyb2sKCiAgICAgICAgICAgIGVsc2VpZiAodmFsLm1ldGhvZCA9PSAiZm4iKSB0aGVuCgogICAgICAgICAgICAgICAgaWYgKHZhbC5maWVsZCB+PSBuaWwgYW5kIHZhbC5maWVsZCB+PSAiIiBhbmQgcmVzdWx0W3ZhbC5maWVsZF0gfj0gbmlsKSB0aGVuCgogICAgICAgICAgICAgICAgICAgIHJlc3VsdFt2YWwuZmllbGRdID0gaGV4ZGVjb2RlKHJlc3VsdFt2YWwuZmllbGRdKQoKICAgICAgICAgICAgICAgICAgICBwYXJzZWREYXRhW2tleV0gPSB7IGlkID0ga2V5LCBzdGF0dXMgPSB0cnVlfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHBhcnNlZERhdGFba2V5XSA9IHsgaWQgPSBrZXksIHN0YXR1cyA9IGZhbHNlfQogICAgICAgICAgICAgICAgICAgIEVycnJvckRhdGFba2V5XSAgPSB7IGlkID0ga2V5LCBlcnJvciA9ICdObyBmaWVsZCd9CiAgICAgICAgICAgICAgICBlbmQKCgoKICAgICAgICAgICAgZWxzZWlmICh2YWwubWV0aG9kID09ICJzeXNsb2ciKSB0aGVuCgogICAgICAgICAgICAgICAgc3lzbG9nRCA9IFRFUk1JVC5QQVJTRVIuc3lzbG9nKHJlc3VsdFt2YWwuZmllbGRdKQogICAgICAgICAgICAgICAgc2l6ZTEgPSAwCiAgICAgICAgICAgICAgICBsb2NhbCBwcmVmaXggPSAiIgogICAgICAgICAgICAgICAgaWYgdmFsLmV4cHJlc3Npb25zWzFdfj0gbmlsIGFuZCB2YWwuZXhwcmVzc2lvbnNbMV0ucHJlZml4IH49IG5pbCBhbmQgdmFsLmV4cHJlc3Npb25zWzFdLnByZWZpeCB+PSAiIiB0aGVuCiAgICAgICAgICAgICAgICAgICBwcmVmaXggPSB2YWwuZXhwcmVzc2lvbnNbMV0ucHJlZml4IC4uICJfXyIKICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICAgIGZvciBrLHYgIGluIHBhaXJzKHN5c2xvZ0QpIGRvCiAgICAgICAgICAgICAgICAgICAgc2l6ZTEgPSBzaXplMSArIDEKICAgICAgICAgICAgICAgICAgICByZXN1bHRbcHJlZml4Li5rXSA9IHYKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgaWYgKHNpemUxID4gMCkgdGhlbgogICAgICAgICAgICAgICAgICAgIHBhcnNlZERhdGFba2V5XSA9IHsgaWQgPSBrZXksIHN0YXR1cyA9IHRydWV9CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgRXJycm9yRGF0YVtrZXldICA9IHsgaWQgPSBrZXksIGVycm9yID0gJ1N5c2xvZyBFcnJvcid9CiAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgIGVsc2VpZiAodmFsLm1ldGhvZCA9PSAia3YiKSB0aGVuCgogICAgICAgICAgICAgICAgbG9jYWwga3ZzZXAgPSAiOiIKICAgICAgICAgICAgICAgIGxvY2FsIGl0ZW1zZXAgPSAiXCI7ICIKICAgICAgICAgICAgICAgIGxvY2FsIHN0cmlwZCA9ICJcIiIKICAgICAgICAgICAgICAgIGlmICh2YWwuZXhwcmVzc2lvbnNbMV0gfj0gbmlsKSBhbmQgKHZhbC5leHByZXNzaW9uc1sxXS5rdnNlcCB+PSBuaWwpIHRoZW4KICAgICAgICAgICAgICAgICAgICBrdnNlcCA9IHZhbC5leHByZXNzaW9uc1sxXS5rdnNlcAogICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgICAgaWYgKHZhbC5leHByZXNzaW9uc1sxXSB+PSBuaWwpIGFuZCAodmFsLmV4cHJlc3Npb25zWzFdLml0ZW1zZXAgfj0gbmlsKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgaXRlbXNlcCA9IHZhbC5leHByZXNzaW9uc1sxXS5pdGVtc2VwCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGlmICh2YWwuZXhwcmVzc2lvbnNbMV0gfj0gbmlsKSBhbmQgKHZhbC5leHByZXNzaW9uc1sxXS5zdHJpcGQgfj0gbmlsKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgc3RyaXBkID0gdmFsLmV4cHJlc3Npb25zWzFdLnN0cmlwZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBsb2NhbCBwcmVmaXggPSAiIgogICAgICAgICAgICAgICAgaWYgKHZhbC5leHByZXNzaW9uc1sxXSB+PSBuaWwpIGFuZCAodmFsLmV4cHJlc3Npb25zWzFdLnByZWZpeCB+PSBuaWwgYW5kIHZhbC5leHByZXNzaW9uc1sxXS5wcmVmaXggfj0gIiIpIHRoZW4KICAgICAgICAgICAgICAgICAgIHByZWZpeCA9IHZhbC5leHByZXNzaW9uc1sxXS5wcmVmaXggLi4gIl9fIgogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBsb2NhbCBsaW5lcyA9IFRFUk1JVC5BUEkuc3BsaXQocmVzdWx0W3ZhbC5maWVsZF0sIGl0ZW1zZXApCiAgICAgICAgICAgICAgICBzaXplMSA9IDAKICAgICAgICAgICAgICAgIGZvciBfIGluIHBhaXJzKGxpbmVzKSBkbyBzaXplMSA9IHNpemUxICsgMSBlbmQKICAgICAgICAgICAgICAgIGlmIChzaXplMSA+IDApIHRoZW4KICAgICAgICAgICAgICAgICAgICBmb3IgaWksIGkgaW4gcGFpcnMobGluZXMpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGogPSBURVJNSVQuQVBJLnNwbGl0KGksIGt2c2VwKQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpbMV0gfj0gbmlsIGFuZCBqWzJdIH49bmlsKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLWxvY2FsIGpqID0gZGVlcGNvcHkoaikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGprID0galsxXQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHZhbC5leHByZXNzaW9uc1sxXS5maWVsZHMgfj0gbmlsIGFuZCB2YWwuZXhwcmVzc2lvbnNbMV0uZmllbGRzW2lpXX49IG5pbCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqayA9IHZhbC5leHByZXNzaW9uc1sxXS5maWVsZHNbaWldCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqWzFdID0gbmlsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbcHJlZml4Li5qa10gPSBURVJNSVQuQVBJLmhleDJzdHIoc3RyaW5nLmdzdWIodG9TdHIoVEVSTUlULkFQSS5qb2luKGosIGt2c2VwKSksc3RyaXBkLCIiKSkKCgkJCSAgICBpZiB2YWwuZXhwcmVzc2lvbnNbMV0uZ3JvdXAgfj0gbmlsIGFuZCB2YWwuZXhwcmVzc2lvbnNbMV0uZ3JvdXAgfj0gIiIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgcmVzdWx0W3ZhbC5leHByZXNzaW9uc1sxXS5ncm91cF0gPT0gbmlsIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFt2YWwuZXhwcmVzc2lvbnNbMV0uZ3JvdXBdID0ge30KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3ZhbC5leHByZXNzaW9uc1sxXS5ncm91cF1baWldID0gcmVzdWx0W3ByZWZpeC4uamtdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWREYXRhW2tleV0gPSB7IGlkID0ga2V5LCBzdGF0dXMgPSB0cnVlfQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgaWYgcGFyc2VkRGF0YVtrZXldW3N0YXR1c10gfj0gdHJ1ZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgRXJycm9yRGF0YVtrZXldICA9IHsgaWQgPSBrZXksIGVycm9yID0gJ2tleS12YWx1ZSBFcnJvcid9CiAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgIGVsc2VpZiAodmFsLm1ldGhvZCA9PSAicWt2IikgdGhlbgogICAgICAgICAgICAgICAgbG9jYWwgcmVnID0gc2VsZi5SZWdFeHAoKQogICAgICAgICAgICAgICAgcWt2RGF0YSA9IHJlZzpleGVjKHJlc3VsdFt2YWwuZmllbGRdLCAnKC4qPyk9KCg/OlteIl0qPyl8Iig/OlxcInwuKSo/IikoPzpcXHN8JCknLCB7VEVSTUlULkFQSS5SRUdFWC5OT05FfSkKCgogICAgICAgICAgICAgICAgaWYocWt2RGF0YSB+PSBuaWwgYW5kIHFrdkRhdGFbMl0gfj0gIiIgYW5kIHFrdkRhdGFbM10gfj0gIiIgYW5kIHFrdkRhdGFbMl0gfj0gbmlsIGFuZCBxa3ZEYXRhWzNdIH49IG5pbCkgdGhlbgoKCgogICAgICAgICAgICAgICAgICAgIHJlc3VsdFtxa3ZEYXRhWzJdXSA9IHFrdkRhdGFbM10KCiAgICAgICAgICAgICAgICAgICAgcGFyc2VkRGF0YVtrZXldID0geyBpZCA9IGtleSwgc3RhdHVzID0gdHJ1ZX0KICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICAgIGlmIHBhcnNlZERhdGFba2V5XVtzdGF0dXNdIH49IHRydWUgdGhlbgogICAgICAgICAgICAgICAgICAgIEVycnJvckRhdGFba2V5XSAgPSB7IGlkID0ga2V5LCBlcnJvciA9ICdxdW90ZWQta2V5LXZhbHVlJ30KICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgZWxzZWlmICh2YWwubWV0aG9kID09ICJ4bWwiKSB0aGVuCgogICAgICAgICAgICAgICAgaWYgKHZhbC5maWVsZCA9PSBuaWwgb3IgcmVzdWx0W3ZhbC5maWVsZF0gPT0gbmlsKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgRXJycm9yRGF0YVtrZXldICA9IHsgaWQgPSBrZXksIGVycm9yID0gJ1hNTCBFcnJvcid9CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgeG1sRCA9IFRFUk1JVC5QQVJTRVIueG1sKHJlc3VsdFt2YWwuZmllbGRdKQogICAgICAgICAgICAgICAgICAgIHNpemUxID0gMAogICAgICAgICAgICAgICAgICAgIGZvciBrLHYgIGluIHBhaXJzKHhtbEQpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIHNpemUxID0gc2l6ZTEgKyAxCgogICAgICAgICAgICAgICAgICAgICAgICBzZXRYTUxSZXN1bHQocmVzdWx0LCAiIiwgaywgdikKCiAgICAgICAgICAgICAgICAgICAgICAgIC0tcmVzdWx0W2tdID0gdgogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGlmIChzaXplMSA+IDApIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkRGF0YVtrZXldID0geyBpZCA9IGtleSwgc3RhdHVzID0gdHJ1ZSwgeG1sRCA9IHhtbER9CiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgaWYgcGFyc2VkRGF0YVtrZXldWyJzdGF0dXMiXSB+PSB0cnVlIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgRXJycm9yRGF0YVtrZXldICA9IHsgaWQgPSBrZXksIGVycm9yID0gJ1hNTCBFcnJvcicsIHJyID0geG1sRH0KICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgZWxzZWlmICh2YWwubWV0aG9kID09ICJncm9rIikgdGhlbgogICAgICAgICAgICAgICAgLS0g0JXRgdC70Lgg0Y3RgtC+INC/0LXRgNCy0LDRjyDQuNGC0LXRgNCw0YbQuNGPCiAgICAgICAgICAgICAgICAtLSDQldGB0LvQuCDQv9Cw0YDQsNC80LXRgtGA0Ysg0L/QtdGA0LXQtNCw0L3RiwogICAgICAgICAgICAgICAgaWYgKHZhbC5leHByZXNzaW9uc1sxXSB+PSBuaWwpIGFuZCAodmFsLmV4cHJlc3Npb25zWzFdLnZhbHVlIH49IG5pbCkgdGhlbgogICAgICAgICAgICAgICAgICAgIC0tINCf0LXRgNC10YXQvtC00LjQvCDQv9C+INCy0YHQtdC8INC/0LDRgNCw0LzQtdGC0YDQsNC8INCz0YDQvtC60LAKICAgICAgICAgICAgICAgICAgICBmb3IgXyxpdGVtIGluIHBhaXJzKHZhbC5leHByZXNzaW9ucykgZG8KICAgICAgICAgICAgICAgICAgICAgICAgLS0gaWYgKHNlbGYuUEFSU0VSLmdyb2socmVzdWx0W3ZhbC5maWVsZF0sIHZhbC5leHByZXNzaW9uc1sxXS52YWx1ZSwgdHJ1ZSkgb3IgdHJ1ZSkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBncm9rID0gc2VsZi5QQVJTRVIuZ3JvayhyZXN1bHRbdmFsLmZpZWxkXSwgdmFsLmV4cHJlc3Npb25zWzFdLnZhbHVlLCBmYWxzZSkKICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTEgPSAwCgogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBwcmVmaXggPSAiIgogICAgICAgICAgICAgICAgICAgICAgICBpZiBpdGVtLnByZWZpeCB+PSBuaWwgYW5kIGl0ZW0ucHJlZml4IH49ICIiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZWZpeCA9IGl0ZW0ucHJlZml4IC4uICJfXyIKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgICAgICAgICAgICBpZiBpdGVtLmdyb3VwIH49IG5pbCBhbmQgaXRlbS5ncm91cCB+PSAiIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiByZXN1bHRbaXRlbS5ncm91cF0gPT0gbmlsIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbaXRlbS5ncm91cF0gPSB7fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3Igayx2ICBpbiBwYWlycyhncm9rKSBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpdGVtLmdyb3VwXVtrXSA9IHYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBrLHYgIGluIHBhaXJzKGdyb2spIGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplMSA9IHNpemUxICsgMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3ByZWZpeCAuLiBrXSA9IHYKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2l6ZTEgPiAwKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2U3RhdHVzID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkRGF0YVtrZXldID0geyBpZCA9IGtleSwgc3RhdHVzID0gdHJ1ZSwgZ3Jva1JldCA9IGdyb2t9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgLS0gZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgaWYgcGFyc2VkRGF0YVtrZXldWyJzdGF0dXMiXSB+PSB0cnVlIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgcHJldlN0YXR1cyA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIEVycnJvckRhdGFba2V5XSAgPSB7IGlkID0ga2V5LCBlcnJvciA9ICdHcm9rIEVycm9yIDEnfQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICBlbHNlaWYgKHZhbC5tZXRob2QgPT0gImNzdiIpIHRoZW4KCiAgICAgICAgICAgICAgICBsb2NhbCBpdGVtc2VwID0gIiwiCiAgICAgICAgICAgICAgICBsb2NhbCBzdHJpcGQgPSAiLCIKCiAgICAgICAgICAgICAgICBpZiAodmFsLmV4cHJlc3Npb25zWzFdIH49IG5pbCkgYW5kICh2YWwuZXhwcmVzc2lvbnNbMV0uaXRlbXNlcCB+PSBuaWwpIHRoZW4KICAgICAgICAgICAgICAgICAgICBpdGVtc2VwID0gdmFsLmV4cHJlc3Npb25zWzFdLml0ZW1zZXAKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgaWYgKHZhbC5leHByZXNzaW9uc1sxXSB+PSBuaWwpIGFuZCAodmFsLmV4cHJlc3Npb25zWzFdLnN0cmlwZCB+PSBuaWwpIHRoZW4KICAgICAgICAgICAgICAgICAgICBzdHJpcGQgPSB2YWwuZXhwcmVzc2lvbnNbMV0uc3RyaXBkCiAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgICBsb2NhbCBjc3ZEID0gc2VsZi5QQVJTRVIuY3N2KHJlc3VsdFt2YWwuZmllbGRdLCBpdGVtc2VwLCBmYWxzZSkKICAgICAgICAgICAgICAgIGxvY2FsIHByZWZpeCA9ICIiCiAgICAgICAgICAgICAgICBpZiB2YWwuZXhwcmVzc2lvbnNbMV0ucHJlZml4IH49IG5pbCBhbmQgdmFsLmV4cHJlc3Npb25zWzFdLnByZWZpeCB+PSAiIiB0aGVuCiAgICAgICAgICAgICAgICAgICBwcmVmaXggPSB2YWwuZXhwcmVzc2lvbnNbMV0ucHJlZml4CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIHNpemUxID0gMAogICAgICAgICAgICAgICAgZm9yIF8sdnYgIGluIHBhaXJzKGNzdkQpIGRvCiAgICAgICAgICAgICAgICAgICAgZm9yIGssdiBpbiBwYWlycyh2dikgZG8KICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTEgPSBzaXplMSArIDEKICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwga2V5ID0gdmFsLmZpZWxkIC4uICJfX2Nzdl9fIi4uawogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCB2YWx1ZSA9IFRFUk1JVC5BUEkuaGV4MnN0cihzdHJpbmcuZ3N1Yih2LHN0cmlwZCwiIikpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHZhbC5leHByZXNzaW9uc1sxXS5maWVsZHMgfj0gbmlsIGFuZCB2YWwuZXhwcmVzc2lvbnNbMV0uZmllbGRzW2tdfj0gbmlsIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleSA9IHZhbC5leHByZXNzaW9uc1sxXS5maWVsZHNba10KICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHZhbC5leHByZXNzaW9uc1sxXS5ncm91cCB+PSBuaWwgYW5kIHZhbC5leHByZXNzaW9uc1sxXS5ncm91cCB+PSAiIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiByZXN1bHRbdmFsLmV4cHJlc3Npb25zWzFdLmdyb3VwXSA9PSBuaWwgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFt2YWwuZXhwcmVzc2lvbnNbMV0uZ3JvdXBdID0ge30KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0WE1MUmVzdWx0KHJlc3VsdFt2YWwuZXhwcmVzc2lvbnNbMV0uZ3JvdXBdLCAiIiwgaywgdmFsdWUpCgogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgc2V0WE1MUmVzdWx0KHJlc3VsdCwgcHJlZml4LCBrZXksIHZhbHVlKQoKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgaWYgc2l6ZTEgPiAwIHRoZW4KICAgICAgICAgICAgICAgICAgICBwYXJzZWREYXRhW2tleV0gPSB7IGlkID0ga2V5LCBzdGF0dXMgPSB0cnVlLCBlcnJvciA9ICdDU1YgRXJyb3InLCBleD12YWwuZXhwcmVzc2lvbnNbMV0uZmllbGRzLCByZXR0dD0gY3N2RH0KICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICAgIGlmIHBhcnNlZERhdGFba2V5XVtzdGF0dXNdIH49IHRydWUgdGhlbgogICAgICAgICAgICAgICAgICAgIEVycnJvckRhdGFba2V5XSA9IHsgaWQgPSBrZXksIGVycm9yID0gJ0NTViBFcnJvcicsIHJldHR0PSBjc3ZEfQogICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgICAgLS0g0JXRgdC70Lgg0L3Rg9C20L3QviDQvtCx0YDQsNCx0L7RgtCw0YLRjCDQtNCw0L3QvdGL0LUg0YEg0L/QvtC80L7RidGM0Y4gQ0VGCiAgICAgICAgICAgIGVsc2VpZiAodmFsLm1ldGhvZCA9PSAiY2VmIikgdGhlbgogICAgICAgICAgICAgICAgLS0g0KHQvtC30LTQsNGR0Lwg0LLRgNC10LzQtdC90L3Rg9GOINGC0LDQsdC70LjRhtGDINGA0LXQt9GD0LvRjNGC0LDRgtC+0LIKICAgICAgICAgICAgICAgIC0tINCV0YHQu9C4INGN0YLQviDQvdC1INC/0LXRgNCy0LDRjyDQuNGC0LXRgNCw0YbQuNGPCiAgICAgICAgICAgICAgICAtLSDQn9C10YDQtdGF0L7QtNC40Lwg0L/QviDQstGB0LXQvNGDINGB0L/QuNGB0LrRgyDQv9Cw0YDQsNC80LXRgtGA0L7QsgogICAgICAgICAgICAgICAgLS0gICAgICAgICAgICAgICAgZm9yIF8saXRlbSBpbiBwYWlycyh2YWwuZXhwcmVzc2lvbnNbMV0pIGRvCiAgICAgICAgICAgICAgICAtLSDQktGL0L/QvtC70L3Rj9C10Lwg0L7QsdGA0LDQsdC+0YLQutGDIENFRiDRgdC+0L7QsdGJ0LXQvdC40Y8KICAgICAgICAgICAgICAgIGxvY2FsIGNlZiA9IHNlbGYuUEFSU0VSLmNlZihyZXN1bHRbdmFsLmZpZWxkXSkKICAgICAgICAgICAgICAgIC0tINCU0L7QsdCw0LLQu9GP0LXQvCDRgNC10LfRg9C70YzRgtCw0YIg0LIg0YHQv9C40YHQvtC6INGA0LXQt9GD0LvRjNGC0LDRgtCwCgogICAgICAgICAgICAgICAgLS0gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0WyJmZHNmZHNmZHMiXSA9IGNlZgogICAgICAgICAgICAgICAgbG9jYWwgcHJlZml4ID0gIiIKICAgICAgICAgICAgICAgIGlmIHZhbC5leHByZXNzaW9uc1sxXS5wcmVmaXggfj0gbmlsIGFuZCB2YWwuZXhwcmVzc2lvbnNbMV0ucHJlZml4IH49ICIiIHRoZW4KICAgICAgICAgICAgICAgICAgICBwcmVmaXggPSB2YWwuZXhwcmVzc2lvbnNbMV0ucHJlZml4CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIHNpemUxID0gMAogICAgICAgICAgICAgICAgZm9yIGssdiAgaW4gcGFpcnMoY2VmKSBkbwogICAgICAgICAgICAgICAgICAgIHNpemUxID0gc2l6ZTEgKyAxCgogICAgICAgICAgICAgICAgICAgIGlmIHZhbC5leHByZXNzaW9uc1sxXS5ncm91cCB+PSBuaWwgYW5kIHZhbC5leHByZXNzaW9uc1sxXS5ncm91cCB+PSAiIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJlc3VsdFt2YWwuZXhwcmVzc2lvbnNbMV0uZ3JvdXBdID09IG5pbCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbdmFsLmV4cHJlc3Npb25zWzFdLmdyb3VwXSA9IHt9CiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBzZXRYTUxSZXN1bHQocmVzdWx0W3ZhbC5leHByZXNzaW9uc1sxXS5ncm91cF0sICIiLCBrLCB2KQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIHNldFhNTFJlc3VsdChyZXN1bHQsIHByZWZpeCwgaywgdikKCiAgICAgICAgICAgICAgICAgICAgLS1zZXRYTUxSZXN1bHQocmVzdWx0LCAiIiwgaywgdikKICAgICAgICAgICAgICAgICAgICAtLXJlc3VsdFsiY2VmIl0gPSBjZWYKICAgICAgICAgICAgICAgICAgICAtLXJlc3VsdFtrXSA9IHYKICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICAgIC0tZm9yIF8gaW4gcGFpcnMoY2VmKSBkbyBzaXplMSA9IHNpemUxICsgMSBlbmQKCiAgICAgICAgICAgICAgICBpZiBzaXplMSA+IDAgdGhlbgogICAgICAgICAgICAgICAgICAgIC0tdGFibGUuaW5zZXJ0KHJlc3VsdCwgY2VmKQogICAgICAgICAgICAgICAgICAgIHBhcnNlZERhdGFba2V5XSA9IHsgaWQgPSBrZXksIHN0YXR1cyA9IHRydWV9CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIC0tICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBpZiBwYXJzZWREYXRhW2tleV1bc3RhdHVzXSB+PSB0cnVlIHRoZW4KICAgICAgICAgICAgICAgICAgICBFcnJyb3JEYXRhW2tleV0gPSB7IGlkID0ga2V5LCBlcnJvciA9ICdDRUYgRXJyb3InfQogICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKCiAgICAgICAgcmV0dXJuIHtyZXN1bHQgPSByZXN1bHQsIHBhcnNlZERhdGEgPSBwYXJzZWREYXRhLCBFcnJyb3JEYXRhID0gRXJycm9yRGF0YX0KICAgIGVuZAoKCiAgICBmdW5jdGlvbiBkb19ub3JtYWxpemUocmVzdWx0LCBwYXJhbXMpCgogICAgICAgIGxvY2FsIHJlcyA9IHt9CgogICAgICAgIGZvciBrZXksdmFsIGluIHBhaXJzKHBhcmFtcy5ub3JtYWxpemVycykgZG8KCiAgICAgICAgICAgIGlmIHZhbC5tZXRob2QgPT0gImtleSIgdGhlbgogICAgICAgICAgICAgICAgcmVzW2tleV0gPSB7a2V5ID0ga2V5LCB2YWx1ZSA9IHJlc3VsdFt2YWwudmFsdWVdLCBmaWVsZCA9IHZhbC5maWVsZH0KICAgICAgICAgICAgZWxzZWlmIHZhbC5tZXRob2QgPT0gImZuIiB0aGVuCiAgICAgICAgICAgICAgICBpZiB2YWwuZm4gPT0gImxvd2VyIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgcmVzW2tleV0gPSB7a2V5ID0ga2V5LCB2YWx1ZSA9IGxvd2VyU3RyaW5nKHJlc3VsdFt2YWwudmFsdWVdKSwgZmllbGQgPSB2YWwuZmllbGR9CiAgICAgICAgICAgICAgICBlbHNlaWYgdmFsLmZuID09ICJwYXJzZV90aW1lc3RhbXAiIHRoZW4KICAgICAgICAgICAgICAgICAgICByZXNba2V5XSA9IHtrZXkgPSBrZXksIHZhbHVlID0gcGFyc2VfdGltZXN0YW1wKHJlc3VsdFt2YWwudmFsdWVdLCB2YWwucGFyYW1zX2ZuKSwgZmllbGQgPSB2YWwuZmllbGR9CiAgICAgICAgICAgICAgICBlbHNlaWYgdmFsLmZuID09ICJiYXNlNjRfZGVjb2RlIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgcmVzW2tleV0gPSB7a2V5ID0ga2V5LCB2YWx1ZSA9IGZyb21fYmFzZTY0KHJlc3VsdFt2YWwudmFsdWVdKSwgZmllbGQgPSB2YWwuZmllbGR9CiAgICAgICAgICAgICAgICBlbHNlaWYgdmFsLmZuID09ICJoZXgyc3RyIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgcmVzW2tleV0gPSB7a2V5ID0ga2V5LCB2YWx1ZSA9IGhleGRlY29kZShyZXN1bHRbdmFsLnZhbHVlXSksIGZpZWxkID0gdmFsLmZpZWxkfQogICAgICAgICAgICAgICAgZWxzZWlmIHZhbC5mbiA9PSAibWF0aFBsdXMiIHRoZW4KICAgICAgICAgICAgICAgICAgICBpZiB2YWwucGFyYW1zX2ZuIH49IG5pbCBhbmQgdmFsLnBhcmFtc19mblsxXSB+PSBuaWwgYW5kIHZhbC5wYXJhbXNfZm5bMl0gfj0gbmlsIGFuZCByZXN1bHRbdmFsLnBhcmFtc19mblsxXV0gfj0gbmlsIGFuZCByZXN1bHRbdmFsLnBhcmFtc19mblsyXV0gfj0gbmlsICAgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICByZXNba2V5XSA9IHtrZXkgPSBrZXksIHZhbHVlID0gbWF0aFBsdXMocmVzdWx0W3ZhbC5wYXJhbXNfZm5bMV1dLCByZXN1bHRbdmFsLnBhcmFtc19mblsyXV0pLCBmaWVsZCA9IHZhbC5maWVsZH0KICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc1trZXldID0ge2tleSA9IGtleSwgdmFsdWUgPSAiIiwgZmllbGQgPSB2YWwuZmllbGR9CiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbHNlaWYgdmFsLmZuID09ICJtYXRoTWludXMiIHRoZW4KICAgICAgICAgICAgICAgICAgICBpZiB2YWwucGFyYW1zX2ZuIH49IG5pbCBhbmQgdmFsLnBhcmFtc19mblsxXSB+PSBuaWwgYW5kIHZhbC5wYXJhbXNfZm5bMl0gfj0gbmlsIGFuZCByZXN1bHRbdmFsLnBhcmFtc19mblsxXV0gfj0gbmlsIGFuZCByZXN1bHRbdmFsLnBhcmFtc19mblsyXV0gfj0gbmlsIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgcmVzW2tleV0gPSB7a2V5ID0ga2V5LCB2YWx1ZSA9IG1hdGhNaW51cyhyZXN1bHRbdmFsLnBhcmFtc19mblsxXV0sIHJlc3VsdFt2YWwucGFyYW1zX2ZuWzJdXSksIGZpZWxkID0gdmFsLmZpZWxkfQogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgcmVzW2tleV0gPSB7a2V5ID0ga2V5LCB2YWx1ZSA9ICIiLCBmaWVsZCA9IHZhbC5maWVsZH0KICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVsc2VpZiB2YWwuZm4gPT0gInN0cmluZ3NKb2luIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgaWYgdmFsLnBhcmFtc19mbiB+PSBuaWwgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBhID0ge307CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBfLHYgaW4gcGFpcnModmFsLnBhcmFtc19mbikgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJlc3VsdFt2XSB+PSBuaWwgYW5kIHR5cGUocmVzdWx0W3ZdKSA9PSAidGFibGUiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQoYSwgVEVSTUlULkFQSS5qb2luKHJlc3VsdFt2XSwgdmFsLnZhbHVlKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VpZiByZXN1bHRbdl0gfj0gbmlsIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQoYSwgcmVzdWx0W3ZdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICByZXNba2V5XSA9IHtrZXkgPSBrZXksIHZhbHVlID0gVEVSTUlULkFQSS5qb2luKGEsIHZhbC52YWx1ZSksIGZpZWxkID0gdmFsLmZpZWxkfQogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgcmVzW2tleV0gPSB7a2V5ID0ga2V5LCB2YWx1ZSA9ICIiLCBmaWVsZCA9IHZhbC5maWVsZH0KICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgZWxzZWlmIHZhbC5tZXRob2QgPT0gInZhbHVlIiB0aGVuCiAgICAgICAgICAgICAgICByZXNba2V5XSA9IHtrZXkgPSBrZXksIHZhbHVlID0gdmFsLnZhbHVlLCBmaWVsZCA9IHZhbC5maWVsZH0KICAgICAgICAgICAgZW5kCgogICAgICAgIGVuZAoKICAgICAgICByZXR1cm4gcmVzCiAgICBlbmQKCgogICAgbG9jYWwgcmVzdWx0ID0gewogICAgICAgIHJvb3QgPSB7CiAgICAgICAgICAgIC0tIHNvbWUgPSBoZXhkZWNvZGUoIjY5NzA3NDYxNjI2QzY1NzMwMDJENDQwMDRGNTU1NDUwNTU1NDAwMkQ3MDAwNzQ2MzcwMDAyRDJENjQ3MDZGNzI3NDAwMzIzMTAwMkQ2QTAwNDQ1MjRGNTAiKSwKICAgICAgICAgICAgcGFyc2VycyA9IHt9LAogICAgICAgICAgICBub3JtYWxpemVzID0ge30sCiAgICAgICAgICAgIGRhdGEgPSBkZWVwY29weShwYXJhbXMuZGF0YS5tZXNzYWdlKSwKICAgICAgICAgICAgZGF0YXBhcnNlcnMgPSB7fQogICAgICAgIH0sCiAgICAgICAgY3VycmVudCA9IHsKICAgICAgICAgICAgZmlsdGVycyA9IHt9LAogICAgICAgICAgICBwYXJzZXJzID0ge30sCiAgICAgICAgICAgIG5vcm1hbGl6ZXMgPSB7fSwKICAgICAgICAgICAgZGF0YSA9IGRlZXBjb3B5KHBhcmFtcy5kYXRhLm1lc3NhZ2UpLAogICAgICAgICAgICBkYXRhZmlsdGVycyA9IGRlZXBjb3B5KHBhcmFtcy5kYXRhLm1lc3NhZ2UpLAogICAgICAgICAgICBkYXRhcGFyc2VycyA9IGRlZXBjb3B5KHBhcmFtcy5kYXRhLm1lc3NhZ2UpLAogICAgICAgIH0sCiAgICAgICAgc3RhdHVzZXMgPSB7CiAgICAgICAgICAgIGZpbHRlcnMgPSB0cnVlLAogICAgICAgICAgICBwYXJzZXJzID0gdHJ1ZSwKICAgICAgICAgICAgbm9ybWFsaXplcyA9IHRydWUKICAgICAgICB9LAogICAgICAgIGVycm9ycyA9IHsKICAgICAgICAgICAgcGFyc2VkID0ge30KICAgICAgICB9CiAgICB9CgoKCiAgICBpZiBwYXJhbXMucGFyYW1zLnJvb3QuaWQgfj0gIiIgdGhlbgogICAgICAgIC0tIHJldHVybiBwYXJhbXMucGFyYW1zLnJvb3QuaWQKCiAgICAgICAgLS0gbG9jYWwgcmVzdWx0ID0gcGFyYW1zLm1lc3NhZ2UKCiAgICAgICAgciA9IGRvX3BhcnNlKHBhcmFtcy5kYXRhLm1lc3NhZ2UsIHBhcmFtcy5wYXJhbXMucm9vdCkKCiAgICAgICAgcmVzdWx0LnJvb3QucGFyc2VycyA9IHIucGFyc2VkRGF0YQoKICAgICAgICByZXN1bHQuY3VycmVudC5kYXRhcGFyc2VycyA9IGRlZXBjb3B5KHIucmVzdWx0KQogICAgICAgIHJlc3VsdC5jdXJyZW50LmRhdGFmaWx0ZXJzID0gZGVlcGNvcHkoci5yZXN1bHQpCgogICAgICAgIHJlc3VsdC5yb290LmRhdGFwYXJzZXJzID0gZGVlcGNvcHkoci5yZXN1bHQpCiAgICAgICAgLS0gICAgICAgIHJldHVybiB7ciA9IHJ9CgoKICAgICAgICBybiA9IGRvX25vcm1hbGl6ZShyLnJlc3VsdCwgcGFyYW1zLnBhcmFtcy5yb290KQogICAgICAgIHJlc3VsdC5yb290Lm5vcm1hbGl6ZXMgPSBybgogICAgZW5kCgogICAgbG9jYWwgcHJldk1ldGhvZCA9ICIiCiAgICBsb2NhbCBwcmV2RmllbGQgPSAiIgogICAgbG9jYWwgcHJldlN0YXR1cyA9IGZhbHNlCgogICAgZm9yIGtleSwgdmFsdWUgaW4gcGFpcnMocGFyYW1zLnBhcmFtcy5jdXJyZW50LmZpbHRlcnMpIGRvCiAgICAgICAgaWYgcmVzdWx0LmN1cnJlbnQuZGF0YWZpbHRlcnNbdmFsdWUuZmllbGRdID09IG5pbCB0aGVuCiAgICAgICAgICAgIHJlc3VsdC5jdXJyZW50LmZpbHRlcnNba2V5XSA9IHsKICAgICAgICAgICAgICAgIHN0YXR1cyA9IDEsCiAgICAgICAgICAgICAgICByZXN1bHQgPSBmYWxzZQogICAgICAgICAgICB9CiAgICAgICAgICAgIDo6Y29udGludWU6OgogICAgICAgIGVsc2UKICAgICAgICAgICAgcmVzdWx0LmN1cnJlbnQuZmlsdGVyc1trZXldID0gewogICAgICAgICAgICAgICAgc3RhdHVzID0gMiwKICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlCiAgICAgICAgICAgIH0KICAgICAgICBlbmQKCgogICAgICAgIC0tIGlmIChwcmV2TWV0aG9kID09ICJncm9rIiBhbmQgdmFsdWUubWV0aG9kID09ICJncm9rIiBhbmQgcHJldkZpZWxkID09IHZhbHVlLmZpZWxkIGFuZCAocHJldlN0YXR1cyA9PSB0cnVlIG9yIHByZXZTdGF0dXMgPT0gZmFsc2UpKSB0aGVuCiAgICAgICAgaWYgKHByZXZNZXRob2QgPT0gImdyb2siIGFuZCB2YWx1ZS5tZXRob2QgPT0gImdyb2siIGFuZCBwcmV2RmllbGQgPT0gdmFsdWUuZmllbGQgYW5kIHByZXZTdGF0dXMgPT0gdHJ1ZSkgdGhlbgogICAgICAgICAgICA6OmNvbnRpbnVlOjoKICAgICAgICAgICAgdmFsdWUubWV0aG9kID0gImRvbm90aGluZyIKICAgICAgICBlbmQKICAgICAgICBwcmV2TWV0aG9kID0gdmFsdWUubWV0aG9kCiAgICAgICAgcHJldkZpZWxkID0gdmFsdWUuZmllbGQKICAgICAgICBwcmV2U3RhdHVzID0gZmFsc2UKCiAgICAgICAgaWYgdmFsdWUubWV0aG9kID09ICJlcSIgYW5kIHZhbHVlLm5lZ2F0aW9uID09IGZhbHNlIHRoZW4KICAgICAgICAgICAgaWYgdmFsdWUuZXhwcmVzc2lvbnNbMV0gfj0gbmlsIHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsIGYxID0gdG9TdHIocmVzdWx0LmN1cnJlbnQuZGF0YWZpbHRlcnNbdmFsdWUuZmllbGRdKQogICAgICAgICAgICAgICAgbG9jYWwgZjIgPSB0b1N0cih2YWx1ZS5leHByZXNzaW9uc1sxXS52YWx1ZSkKCiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlLmlnbm9yZV9jYXNlIH49IHRydWUgYW5kIGYxID09IGYyICkgb3IgKCB2YWx1ZS5pZ25vcmVfY2FzZSA9PSB0cnVlIGFuZCBsb3dlcihmMSkgPT0gbG93ZXIoZjIpICkgdGhlbgogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5jdXJyZW50LmZpbHRlcnNba2V5XS5yZXN1bHQgPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmN1cnJlbnQuZmlsdGVyc1trZXldLnN0YXR1cyA9IDMKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICByZXN1bHQuY3VycmVudC5maWx0ZXJzW2tleV0ucmVzdWx0ID0gZmFsc2UKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICByZXN1bHQuY3VycmVudC5maWx0ZXJzW2tleV0ucmVzdWx0ID0gZmFsc2UKICAgICAgICAgICAgZW5kCgogICAgICAgIGVsc2VpZiB2YWx1ZS5tZXRob2QgPT0gImVxIiBhbmQgdmFsdWUubmVnYXRpb24gPT0gdHJ1ZSB0aGVuCiAgICAgICAgICAgIGlmIHZhbHVlLmV4cHJlc3Npb25zWzFdIH49IG5pbCB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBmMSA9IHRvU3RyKHJlc3VsdC5jdXJyZW50LmRhdGFmaWx0ZXJzW3ZhbHVlLmZpZWxkXSkKICAgICAgICAgICAgICAgIGxvY2FsIGYyID0gdG9TdHIodmFsdWUuZXhwcmVzc2lvbnNbMV0udmFsdWUpCgogICAgICAgICAgICAgICAgaWYgKCB2YWx1ZS5pZ25vcmVfY2FzZSB+PSB0cnVlIGFuZCBmMSA9PSBmMiApIG9yICggdmFsdWUuaWdub3JlX2Nhc2UgPT0gdHJ1ZSBhbmQgbG93ZXIoZjEpID09IGxvd2VyKGYyKSApIHRoZW4KICAgICAgICAgICAgICAgICAgICByZXN1bHQuY3VycmVudC5maWx0ZXJzW2tleV0ucmVzdWx0ID0gZmFsc2UKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICByZXN1bHQuY3VycmVudC5maWx0ZXJzW2tleV0ucmVzdWx0ID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5jdXJyZW50LmZpbHRlcnNba2V5XS5zdGF0dXMgPSAzCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgcmVzdWx0LmN1cnJlbnQuZmlsdGVyc1trZXldLnJlc3VsdCA9IHRydWUKICAgICAgICAgICAgZW5kCgogICAgICAgIGVsc2VpZiB2YWx1ZS5tZXRob2QgPT0gImluIiBhbmQgdmFsdWUubmVnYXRpb24gPT0gZmFsc2UgdGhlbgoKICAgICAgICAgICAgbG9jYWwgdCA9IHRvU3RyKHJlc3VsdC5jdXJyZW50LmRhdGFmaWx0ZXJzW3ZhbHVlLmZpZWxkXSkKICAgICAgICAgICAgcmVzdWx0LmN1cnJlbnQuZmlsdGVyc1trZXldLnN0YXR1cyA9IDIKCiAgICAgICAgICAgIGlmIHZhbHVlLmV4cHJlc3Npb25zWzFdID09IG5pbCB0aGVuCiAgICAgICAgICAgICAgICA6OmNvbnRpbnVlOjoKICAgICAgICAgICAgZW5kCgogICAgICAgICAgICBmb3Igayx2IGluIHBhaXJzKHZhbHVlLmV4cHJlc3Npb25zWzFdLnZhbHVlcykgZG8KCiAgICAgICAgICAgICAgICBpZiB2ID09IHQgdGhlbgogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5jdXJyZW50LmZpbHRlcnNba2V5XS5yZXN1bHQgPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmN1cnJlbnQuZmlsdGVyc1trZXldLnN0YXR1cyA9IDMKICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgZW5kCgogICAgICAgIGVsc2VpZiB2YWx1ZS5tZXRob2QgPT0gImluIiBhbmQgdmFsdWUubmVnYXRpb24gPT0gdHJ1ZSB0aGVuCgogICAgICAgICAgICBsb2NhbCB0ID0gdG9TdHIocmVzdWx0LmN1cnJlbnQuZGF0YWZpbHRlcnNbdmFsdWUuZmllbGRdKQogICAgICAgICAgICByZXN1bHQuY3VycmVudC5maWx0ZXJzW2tleV0uc3RhdHVzID0gMwogICAgICAgICAgICByZXN1bHQuY3VycmVudC5maWx0ZXJzW2tleV0ucmVzdWx0ID0gdHJ1ZQogICAgICAgICAgICBpZiB2YWx1ZS5leHByZXNzaW9uc1sxXSA9PSBuaWwgdGhlbgogICAgICAgICAgICAgICAgOjpjb250aW51ZTo6CiAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgZm9yIGssdiBpbiBwYWlycyh2YWx1ZS5leHByZXNzaW9uc1sxXS52YWx1ZXMpIGRvCgogICAgICAgICAgICAgICAgaWYgdiA9PSB0IHRoZW4KICAgICAgICAgICAgICAgICAgICByZXN1bHQuY3VycmVudC5maWx0ZXJzW2tleV0ucmVzdWx0ID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICByZXN1bHQuY3VycmVudC5maWx0ZXJzW2tleV0uc3RhdHVzID0gMgogICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICBlbmQKCiAgICAgICAgZWxzZWlmIHZhbHVlLm1ldGhvZCA9PSAic3Vic3RyIiB0aGVuCgogICAgICAgICAgICBpZiByZXN1bHQuY3VycmVudC5kYXRhZmlsdGVyc1t2YWx1ZS5maWVsZF0gfj0gbmlsIGFuZCBzdHJpbmcuZmluZChyZXN1bHQuY3VycmVudC5kYXRhZmlsdGVyc1t2YWx1ZS5maWVsZF0sIHZhbHVlLmV4cHJlc3Npb25zWzFdLnZhbHVlKSB0aGVuCiAgICAgICAgICAgICAgICByZXN1bHQuY3VycmVudC5maWx0ZXJzW2tleV0ucmVzdWx0ID0gdHJ1ZQogICAgICAgICAgICAgICAgcmVzdWx0LmN1cnJlbnQuZmlsdGVyc1trZXldLnN0YXR1cyA9IDMKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgcmVzdWx0LmN1cnJlbnQuZmlsdGVyc1trZXldLnJlc3VsdCA9IGZhbHNlCiAgICAgICAgICAgICAgICByZXN1bHQuY3VycmVudC5maWx0ZXJzW2tleV0uc3RhdHVzID0gMgogICAgICAgICAgICBlbmQKCiAgICAgICAgZWxzZWlmIHZhbHVlLm1ldGhvZCA9PSAiZXhpc3QiIHRoZW4KICAgICAgICAgICAgaWYgKHJlc3VsdC5jdXJyZW50LmRhdGFmaWx0ZXJzW3ZhbHVlLmZpZWxkXSB+PSBuaWwgYW5kIG5vdCB2YWx1ZS5uZWdhdGlvbikgb3IgKHJlc3VsdC5jdXJyZW50LmRhdGFmaWx0ZXJzW3ZhbHVlLmZpZWxkXSA9PSBuaWwgYW5kIHZhbHVlLm5lZ2F0aW9uKSB0aGVuCiAgICAgICAgICAgICAgICByZXN1bHQuY3VycmVudC5maWx0ZXJzW2tleV0ucmVzdWx0ID0gdHJ1ZQogICAgICAgICAgICAgICAgcmVzdWx0LmN1cnJlbnQuZmlsdGVyc1trZXldLnN0YXR1cyA9IDMKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgcmVzdWx0LmN1cnJlbnQuZmlsdGVyc1trZXldLnJlc3VsdCA9IGZhbHNlCiAgICAgICAgICAgICAgICByZXN1bHQuY3VycmVudC5maWx0ZXJzW2tleV0uc3RhdHVzID0gMgogICAgICAgICAgICBlbmQKICAgICAgICBlbHNlaWYgdmFsdWUubWV0aG9kID09ICJncm9rIiB0aGVuCiAgICAgICAgICAgIHByZXZTdGF0dXMgPSBmYWxzZQogICAgICAgICAgICBpZiB2YWx1ZS5leHByZXNzaW9uc1sxXSB+PSBuaWwgYW5kIHZhbHVlLmV4cHJlc3Npb25zWzFdLnZhbHVlIH49ICIiIHRoZW4KCiAgICAgICAgICAgICAgICAtLSAgICAgICAgICAgICAgICBpZiAoc2VsZi5QQVJTRVIuZ3JvayhyZXN1bHQuY3VycmVudC5kYXRhZmlsdGVyc1t2YWx1ZS5maWVsZF0sIHZhbHVlLmV4cHJlc3Npb25zWzFdLnZhbHVlLCB0cnVlKSkgdGhlbgoKCiAgICAgICAgICAgICAgICBsb2NhbCBncm9rID0gc2VsZi5QQVJTRVIuZ3JvayhyZXN1bHQuY3VycmVudC5kYXRhZmlsdGVyc1t2YWx1ZS5maWVsZF0sIHZhbHVlLmV4cHJlc3Npb25zWzFdLnZhbHVlLCBmYWxzZSkKICAgICAgICAgICAgICAgIHNpemUxID0gMAogICAgICAgICAgICAgICAgZm9yIGssdiAgaW4gcGFpcnMoZ3JvaykgZG8KICAgICAgICAgICAgICAgICAgICBzaXplMSA9IHNpemUxICsgMQogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5jdXJyZW50LmRhdGFmaWx0ZXJzW2tdID0gdgogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICByZXN1bHQuY3VycmVudC5maWx0ZXJzW2tleV0ucmVzdWx0ID0gZmFsc2UKICAgICAgICAgICAgICAgIGlmIChzaXplMSA+IDApIHRoZW4KICAgICAgICAgICAgICAgICAgICBwcmV2U3RhdHVzID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5jdXJyZW50LmZpbHRlcnNba2V5XS5yZXN1bHQgPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmN1cnJlbnQuZmlsdGVyc1trZXldLnN0YXR1cyA9IDMKICAgICAgICAgICAgICAgICAgICAtLWJyZWFrCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIC0tICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIC0tICAgICAgICAgICAgICAgICAgICByZXN1bHQuY3VycmVudC5maWx0ZXJzW2tleV0ucmVzdWx0ID0gZmFsc2UKICAgICAgICAgICAgICAgIC0tICAgICAgICAgICAgICAgICAgICByZXN1bHQuY3VycmVudC5maWx0ZXJzW2tleV0uc3RhdHVzID0gMgogICAgICAgICAgICAgICAgLS0gICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHJlc3VsdC5jdXJyZW50LmZpbHRlcnNba2V5XS5yZXN1bHQgPSBmYWxzZQogICAgICAgICAgICAgICAgcmVzdWx0LmN1cnJlbnQuZmlsdGVyc1trZXldLnN0YXR1cyA9IDEKICAgICAgICAgICAgZW5kCgogICAgICAgIGVsc2VpZiB2YWx1ZS5tZXRob2QgPT0gImZuIiB0aGVuCiAgICAgICAgICAgIGlmIHZhbHVlLmV4cHJlc3Npb25zWzFdIH49IG5pbCBhbmQgdmFsdWUuZXhwcmVzc2lvbnNbMV0udmFsdWUgfj0gIiIgdGhlbgoKICAgICAgICAgICAgICAgIHJlc3VsdC5jdXJyZW50LmRhdGFmaWx0ZXJzW3ZhbHVlLmZpZWxkXSA9IGhleGRlY29kZShyZXN1bHQuY3VycmVudC5kYXRhZmlsdGVyc1t2YWx1ZS5maWVsZF0pCgogICAgICAgICAgICAgICAgcmVzdWx0LmN1cnJlbnQuZmlsdGVyc1trZXldLnJlc3VsdCA9IHRydWUKICAgICAgICAgICAgICAgIHJlc3VsdC5jdXJyZW50LmZpbHRlcnNba2V5XS5zdGF0dXMgPSAzCgogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICByZXN1bHQuY3VycmVudC5maWx0ZXJzW2tleV0ucmVzdWx0ID0gZmFsc2UKICAgICAgICAgICAgICAgIHJlc3VsdC5jdXJyZW50LmZpbHRlcnNba2V5XS5zdGF0dXMgPSAxCiAgICAgICAgICAgIGVuZAogICAgICAgIGVsc2VpZiB2YWx1ZS5tZXRob2QgPT0gImt2IiB0aGVuCiAgICAgICAgICAgIGlmIHZhbHVlLmV4cHJlc3Npb25zWzFdIH49IG5pbCBhbmQgdmFsdWUuZXhwcmVzc2lvbnNbMV0udmFsdWUgfj0gIiIgdGhlbgogICAgICAgICAgICAgICAgbG9jYWwga3ZzZXAgPSAiOiIKICAgICAgICAgICAgICAgIGxvY2FsIGl0ZW1zZXAgPSAiXCI7ICIKICAgICAgICAgICAgICAgIGxvY2FsIHN0cmlwZCA9ICJcIiIKCiAgICAgICAgICAgICAgICBpZiAodmFsdWUuZXhwcmVzc2lvbnNbMV0ua3ZzZXAgfj0gbmlsKSB0aGVuCiAgICAgICAgICAgICAgICAgICAga3ZzZXAgPSB2YWx1ZS5leHByZXNzaW9uc1sxXS5rdnNlcAogICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgICAgaWYgKHZhbHVlLmV4cHJlc3Npb25zWzFdLml0ZW1zZXAgfj0gbmlsKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgaXRlbXNlcCA9IHZhbHVlLmV4cHJlc3Npb25zWzFdLml0ZW1zZXAKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgaWYgKHZhbHVlLmV4cHJlc3Npb25zWzFdLnN0cmlwZCB+PSBuaWwpIHRoZW4KICAgICAgICAgICAgICAgICAgICBzdHJpcGQgPSB2YWx1ZS5leHByZXNzaW9uc1sxXS5zdHJpcGQKICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICAgIHJlc3VsdC5jdXJyZW50LmZpbHRlcnNba2V5XS5yZXN1bHQgPSBmYWxzZQogICAgICAgICAgICAgICAgcmVzdWx0LmN1cnJlbnQuZmlsdGVyc1trZXldLnN0YXR1cyA9IDIKCiAgICAgICAgICAgICAgICBsb2NhbCBsaW5lcyA9IFRFUk1JVC5BUEkuc3BsaXQocmVzdWx0LmN1cnJlbnQuZGF0YWZpbHRlcnNbdmFsdWUuZmllbGRdLCBpdGVtc2VwKQogICAgICAgICAgICAgICAgc2l6ZTEgPSAwCiAgICAgICAgICAgICAgICBmb3IgXyBpbiBwYWlycyhsaW5lcykgZG8gc2l6ZTEgPSBzaXplMSArIDEgZW5kCiAgICAgICAgICAgICAgICBpZiAoc2l6ZTEgPiAwKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgZm9yIF8sIGkgaW4gcGFpcnMobGluZXMpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGogPSBURVJNSVQuQVBJLnNwbGl0KGksIGt2c2VwKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoalsxXSB+PSBuaWwgYW5kIGpbMl0gfj1uaWwpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGpqID0galsxXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgalsxXSA9IG5pbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmN1cnJlbnQuZGF0YWZpbHRlcnNbampdID0gVEVSTUlULkFQSS5oZXgyc3RyKHN0cmluZy5nc3ViKHRvU3RyKFRFUk1JVC5BUEkuam9pbihqLCBrdnNlcCkpLHN0cmlwZCwiIikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLXJlc3VsdC5jdXJyZW50LmRhdGFmaWx0ZXJzW2pbMV1dID0gVEVSTUlULkFQSS5oZXgyc3RyKHN0cmluZy5nc3ViKHRvU3RyKGpbMl0pLHN0cmlwZCwiIikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuY3VycmVudC5maWx0ZXJzW2tleV0ucmVzdWx0ID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmN1cnJlbnQuZmlsdGVyc1trZXldLnN0YXR1cyA9IDMKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGlmIHBhcnNlZERhdGEgfj0gdHJ1ZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgRXJycm9yRGF0YSAgPSAna2V5LXZhbHVlIEVycm9yJwogICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICByZXN1bHQuY3VycmVudC5maWx0ZXJzW2tleV0ucmVzdWx0ID0gZmFsc2UKICAgICAgICAgICAgICAgIHJlc3VsdC5jdXJyZW50LmZpbHRlcnNba2V5XS5zdGF0dXMgPSAxCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCgogICAgZm9yIGtleSwgdmFsdWUgaW4gcGFpcnMoIHJlc3VsdC5jdXJyZW50LmZpbHRlcnMpIGRvCiAgICAgICAgaWYgdmFsdWUuc3RhdHVzIH49IDMgdGhlbgogICAgICAgICAgICByZXN1bHQuc3RhdHVzZXMuZmlsdGVycyA9IGZhbHNlCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBpZiBmYWxzZSB0aGVuCgogICAgICAgIHJldHVybiB7ciA9IHJlc3VsdC5jdXJyZW50LmRhdGFwYXJzZXJzLCAgcCA9IHBhcmFtcy5wYXJhbXMuY3VycmVudC5wYXJzZXJzfQogICAgZW5kCgogICAgaWYgdHJ1ZSB0aGVuCiAgICAgICAgcnAgPSBkb19wYXJzZShyZXN1bHQuY3VycmVudC5kYXRhcGFyc2VycywgcGFyYW1zLnBhcmFtcy5jdXJyZW50KQoKICAgICAgICByZXN1bHQuY3VycmVudC5wYXJzZXJzID0gcnAucGFyc2VkRGF0YQogICAgICAgIHJlc3VsdC5jdXJyZW50LmRhdGFwYXJzZXJzID0gcnAucmVzdWx0CiAgICAgICAgcmVzdWx0LmVycm9ycy5wYXJzZWQgPSBycC5FcnJyb3JEYXRhCgogICAgICAgIGZvciBrZXksIHZhbHVlIGluIHBhaXJzKHJlc3VsdC5jdXJyZW50LnBhcnNlcnMpIGRvCiAgICAgICAgICAgIGlmIHZhbHVlLnN0YXR1cyB+PSB0cnVlIHRoZW4KICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0dXNlcy5wYXJzZXJzID0gZmFsc2UKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKCgogICAgaWYgdHJ1ZSB0aGVuCgogICAgICAgIHJuID0gZG9fbm9ybWFsaXplKHJlc3VsdC5jdXJyZW50LmRhdGFwYXJzZXJzLCBwYXJhbXMucGFyYW1zLmN1cnJlbnQpCgogICAgICAgIHJlc3VsdC5jdXJyZW50Lm5vcm1hbGl6ZXMgPSBybgogICAgZW5kCgogICAgaWYgdHJ1ZSB0aGVuCiAgICAgICAgLS0gcmVzdWx0LnBhcmFtcyA9IHBhcmFtcwogICAgICAgIHJldHVybiByZXN1bHQKICAgIGVuZAoKICAgIHIgPSBkb19wYXJzZShyZXN1bHQsIHBhcmFtcykKCiAgICBsb2NhbCByZXN1bHQgPSByLnJlc3VsdAogICAgbG9jYWwgcGFyc2VkRGF0YSA9IHIucGFyc2VkRGF0YQogICAgbG9jYWwgRXJycm9yRGF0YSA9IHIuRXJycm9yRGF0YQoKCiAgICBpZiBwYXJzZWREYXRhIH49IHRydWUgdGhlbgoKICAgICAgICBsb2NhbCByc19tb2R1bGUgPSBJTkZPLm5hbWUKICAgICAgICBsb2NhbCByc19yZWxheV9pcCA9ICIiCiAgICAgICAgbG9jYWwgcnNfY29sbGVjdG9yX3RzID0gIiIKCiAgICAgICAgaWYgcmVzdWx0Wydyc19jb2xsZWN0b3JfdHMnXSB+PSBuaWwgdGhlbgogICAgICAgICAgICByc19jb2xsZWN0b3JfdHMgPSByZXN1bHRbJ3JzX2NvbGxlY3Rvcl90cyddCiAgICAgICAgZWxzZQogICAgICAgICAgICByc19jb2xsZWN0b3JfdHMgPSBwYXJzZV90aW1lc3RhbXAoKQogICAgICAgIGVuZAoKICAgICAgICBpZiByZXN1bHRbJ19fcnNfbW9kdWxlJ10gfj0gbmlsIHRoZW4KICAgICAgICAgICAgcnNfbW9kdWxlID0gcmVzdWx0WydfX3JzX21vZHVsZSddCiAgICAgICAgZW5kCgogICAgICAgIGlmIHJlc3VsdFsncnNfcmVsYXlfaXAnXSB+PSBuaWwgdGhlbgogICAgICAgICAgICByc19yZWxheV9pcCA9IHJlc3VsdFsncnNfcmVsYXlfaXAnXQogICAgICAgIGVuZAoKICAgICAgICB1dWlkID0gc2VsZi5BUEkuVVVJRDQoKQogICAgICAgIHJlc3VsdEVycm9yID0gewogICAgICAgICAgICBlbGFzdGljX2tleSA9ICdlcnJvcicsCiAgICAgICAgICAgIHJhdyA9IHBhcmFtcy5tZXNzYWdlLAogICAgICAgICAgICBpZCA9IHV1aWQsCiAgICAgICAgICAgIGV2ZW50ID0gewogICAgICAgICAgICAgICAgdXVpZCA9IHV1aWQsCiAgICAgICAgICAgICAgICBsb2dzb3VyY2UgPSB7CiAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSByc19tb2R1bGUsCiAgICAgICAgICAgICAgICAgICAgaG9zdCA9IHJzX3JlbGF5X2lwCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVycm9yID0gY29uY2F0KCdVbm5hYmxlIHRvIHBhcnNlIGlucHV0OiAnLCBFcnJyb3JEYXRhKQogICAgICAgIH0KICAgICAgICByZXN1bHRFcnJvclsnQHRpbWVzdGFtcCddID0gcnNfY29sbGVjdG9yX3RzCgogICAgICAgIHJlc3VsdEVycm9yID0gb25CZWZvcmVTZW5kUmVzdWx0KHJlc3VsdEVycm9yKQogICAgICAgIFRFUk1JVC5BUEkuc2VuZCgidGVybWl0ZV9vdXRwdXRfZXJyb3JzIiwgIiIsIHJlc3VsdEVycm9yKQoKICAgICAgICByZXR1cm4gcmVzdWx0RXJyb3IKICAgIGVuZAoKICAgIC0tINCV0YHQu9C4INGA0LXQt9GD0LvRjNGC0LDRgiDRgtC+0LvRjNC60L4g0L7QtNC40L0sINGE0L7RgNC80LjRgNGD0LXQvCDQv9GA0LDQstC40LvRjNC90YvQuSDQvtGC0LLQtdGCCiAgICBpZiAoI3Jlc3VsdCA9PSAxKSB0aGVuCiAgICAgICAgLS0g0KPQtNCw0LvRj9C10Lwg0LzQsNGB0YHQuNCyCiAgICAgICAgcmVzdWx0ID0gcmVzdWx0WzFdCiAgICBlbmQKCgoKICAgIGZvciBrLHYgaW4gcGFpcnMocmVzdWx0KSBkbwogICAgICAgIF9HWydWQVJfXycgLi4ga10gPSB2CiAgICBlbmQKCgogICAgaWYoVkFSX19ldmVudF9tb250aCB+PSBuaWwgYW5kIFZBUl9fZXZlbnRfZGF5IH49IG5pbCBhbmQgIFZBUl9fZXZlbnRfeWVhciB+PSBuaWwgIGFuZCBWQVJfX2V2ZW50X3RpbWUgfj0gbmlsKSB0aGVuCgogICAgICAgIFZBUl9fZXZlbnR0aW1lID0gcGFyc2VfdGltZXN0YW1wKFZBUl9fZXZlbnRfbW9udGggLi4gIiAiIC4uIFZBUl9fZXZlbnRfZGF5IC4uICIgIi4uIFZBUl9fZXZlbnRfeWVhciAuLiAiIiAuLiBWQVJfX2V2ZW50X3RpbWUsICclYiAlZCAlWSAlSDolTTolUy4lZicpCiAgICBlbmQKCiAgICBpZiAocGFyc2VkRGF0YSA9PSB0cnVlIGFuZCBJTkZPWyJuYW1lIl0gPT0gIjI1MTEtY2hlY2twb2ludF9maXJld2FsbCIpIHRoZW4KICAgICAgICBWQVJfX3NldmVyaXR5ID0gdG9JbnQoVkFSX19wcmlvcml0eSkgJSA4CiAgICBlbmQKCiAgICAtLSBFTUlUX1RFUk1JVC5Ob3JtYWxpemVfQ09OVEVOVAoKICAgIHJldHVybiByZXN1bHQKZW5kCg==", "message": {"data":{"message":"{\"a_src_ip\":\"172.30.249.201\",\"a_src_o\":\"9999\",\"a_c\":\"\",\"a_src_t\":[\"\"],\"a_src_r\":\"\",\"a_ts\":\"2024-11-20T12:11:23.529.529883578+00:00\",\"a\":\"651bf201-48c3-4b14-8b3e-c20eab75a47b\",\"Message\":\"freeipa_log [05\\/Apr\\/2023:16:45:23.456789012 +0300] conn=9876 op=8 ABANDON msgID=1234\"}"},"params":{"current":{"created_at":"0001-01-01T00:00:00Z","filters":[{"expressions":[{"group":"","prefix":"","type":"grok-string","value":"ABANDON%{GREEDYDATA:msg}"}],"field":"Message","id":"d794634f-f093-4ef3-a1a8-30c037d6cabd","ignore_case":false,"method":"grok","negation":false,"order":1,"status":0}],"id":"00000000-0000-0000-0000-000000000000","is_active":false,"is_root":false,"name":"test_vtoropov_freeipa_abandon","normalizers":[{"field":"action","fn":"lower","id":"69aa2c49-e4b1-4d4d-b639-cc1e7a29c36e","method":"key","order":1,"req":false,"status":"","type":"normalizer-data","value":"action"}],"order":0,"parsers":[{"expressions":[],"field":"Message","id":"3a1a8c9a-7cc8-4ab2-879d-435e3973c66c","method":"json","order":1,"status":0,"type":"parser-data"}],"raw":"{\"a_src_ip\":\"172.30.249.201\",\"a_src_o\":\"9999\",\"a_c\":\"\",\"a_src_t\":[\"\"],\"a_src_r\":\"\",\"a_ts\":\"2024-11-20T12:11:23.529.529883578+00:00\",\"a\":\"651bf201-48c3-4b14-8b3e-c20eab75a47b\",\"Message\":\"freeipa_log [05\\/Apr\\/2023:16:45:23.456789012 +0300] conn=9876 op=8 ABANDON msgID=1234\"}","source_id":"8bce1d6d-4f32-2e4b-2836-5b02b2dc27c5","trace_id":"","updated_at":"0001-01-01T00:00:00Z"},"root":{"created_at":"2024-10-23T13:42:24.305164Z","filters":[{"expressions":[{"type":"const-string","value":"UserLogon"}],"field":"Message","id":"71561145-b886-4f64-946d-01594050bc93","ignore_case":true,"method":"substr","negation":false,"order":1,"status":0}],"id":"62f31ee9-c0ff-40b2-b178-f3c1a9ab779b","is_active":false,"is_root":true,"name":"staffcop_root","normalizers":[{"field":"event.logsource.name","fn":"lower","id":"93fcde78-afae-4233-8b93-9d07748e1771","method":"value","order":2,"req":false,"status":"","type":"normalizer-data","value":"Staffcop Enterprise"},{"field":"event.logsource.product","fn":"lower","id":"7e3bd379-e8e4-4f4d-a224-3538c0ad238a","method":"value","order":2,"req":false,"status":"","type":"normalizer-data","value":"DLP"},{"field":"event.logsource.vendor","fn":"lower","id":"1db529f1-130a-4f05-9b81-22b28ffc7f87","method":"value","order":3,"req":false,"status":"","type":"normalizer-data","value":"Staffcop "},{"field":"@timestamp","fn":"lower","id":"60bdc3ce-ee99-49c6-b4c8-5663c6d2023a","method":"key","order":4,"req":false,"status":"","type":"normalizer-data","value":"a_ts"},{"field":"event.severity","fn":"lower","id":"a3a1ca69-0260-4b11-96da-b23d72d15884","method":"key","order":5,"req":false,"status":"","type":"normalizer-data","value":"importance"},{"field":"observer.host.ip","fn":"lower","id":"f40462ab-9e12-4801-b21a-dcf20eb8f81f","method":"key","order":6,"req":false,"status":"","type":"normalizer-data","value":"a_src_ip"},{"field":"observer.service.name","fn":"lower","id":"46f140e1-f7f0-464a-ad5d-15ba8be7d175","method":"key","order":7,"req":false,"status":"","type":"normalizer-data","value":"a_src_r"}],"order":0,"parsers":[{"expressions":[{"type":"parser-syslog-exp","value":null}],"field":"Message","id":"334f0e57-682b-484a-aca0-4a202276b287","method":"syslog","order":2,"status":0,"type":"parser-data"},{"expressions":[{"type":"parser-cef-exp","value":null}],"field":"Message","id":"ad9b7626-19f2-4c40-9f17-2656a8981395","method":"cef","order":2,"status":0,"type":"parser-data"}],"raw":"{\"Message\":\"<30>Oct 22 19:17:21 staffcop staffcop: CEF:24|Staffcop|agent|0.15.0-master|3319|UserLogon|12|deviceAddress=172.30.250.140 deviceCustomDate1=Oct 22 19:15:42 deviceCustomDate1Label=local_time deviceCustomDate2=Oct 22 19:15:54 deviceCustomDate2Label=time_registered deviceCustomNumber2=1001 deviceCustomNumber2Label=agent_agent.config_id deviceCustomString1=root deviceCustomString1Label=agent_account.full_name deviceCustomString4=41014websourceaLz03dH-tDgc deviceCustomString4Label=agent_agent.guid deviceCustomString5=Debian GNU/Linux 10 (buster) 4.19.0-27-amd64 GNU/Linux deviceCustomString5Label=agent_agent.os deviceEventCategory=productive deviceProcessName=UserLogon deviceTimeZone=UTC+03:00 endTime=Oct 14 12:24:39 sourceUserId=32 sourceUserName=root suser=root\",\"a\":\"a7e42e20-03a1-4998-a301-c97fa77cbe73\",\"a_c\":\"\",\"a_src_ip\":\"172.30.250.148\",\"a_src_o\":\"49254\",\"a_src_r\":\"udp_receiver\",\"a_src_t\":[],\"a_ts\":\"2024-10-22T16:17:21.738Z\"}","source_id":"8bce1d6d-4f32-2e4b-2836-5b02b2dc27c5","trace_id":"","updated_at":"2024-11-01T05:47:34.174952Z"}}}})";
	// Выполняем тело запроса на сервер
	const auto & body = awh.POST(url, vector <char> (entity.begin(), entity.end()), {{"User-Agent", "curl/7.64.1"}});
	// Выводим время запроса
	cout << " ++++++++++ Time Shifting " << chrono::duration_cast <chrono::milliseconds> (chrono::system_clock::now() - timeShifting).count() << endl;
	// Если данные получены
	if(!body.empty()){
		// Создаём объект JSON
		// json data = json::parse(body);
		// Выводим полученный результат
		// cout << " =========== " << data.dump(4) << endl;
		cout << " =========== " << string(body.begin(), body.end()) << endl;
	}
	// Выводим результат
	return EXIT_SUCCESS;
}
