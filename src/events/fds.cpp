/**
 * @file: fds.cpp
 * @date: 2025-09-17
 * @license: GPL-3.0
 *
 * @telegram: @forman
 * @author: Yuriy Lobarev
 * @phone: +7 (910) 983-95-90
 * @email: forman@anyks.com
 * @site: https://anyks.com
 *
 * @copyright: Copyright ¬© 2025
 */

/**
 * –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã MS Windows
 */
#if _WIN32 || _WIN64
	/**
	 * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏
	 */
	#include <vector>
#endif

/**
 * –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã MS Windows
 */
#if _WIN32 || _WIN64
	/**
	 * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏
	 */
	#include <winsock2.h>
	#include <ws2tcpip.h>
	#pragma comment(lib, "ws2_32.lib")
/**
 * –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
 */
#else
	/**
	 * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏
	 */
	#include <sys/types.h>
	#include <sys/resource.h>
#endif

/**
 * –ü–æ–¥–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª
 */
#include <events/fds.hpp>

/**
 * –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º—ë–Ω
 */
using namespace std;

/**
 * @brief –ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞ –≤ –ª–æ–≥ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –ø–æ–º–æ—â–∏
 *
 * @param actual  —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
 * @param desired –∂–µ–ª–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
 */
void awh::FDS::help(const uint64_t actual, const uint64_t desired) const noexcept {
	/**
	 * –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã MS Windows
	 */
	#if _WIN32 || _WIN64
		// –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∞
		this->_log->print(
			"\nMaximum sockets requested: %llu, but current system limit is: %llu.\n"
			"On Windows, the default handle limit is ~16K. If you need more, increase it programmatically.\n\n"
			"üîß How to increase the limit on Windows:\n\n"
			"1. Programmatically ‚Äî call early in your application (before creating sockets!):\n"
			"   SetHandleCount(%llu);\n\n"
			"   C++ Example:\n"
			"      #include <windows.h>\n"
			"      int main() {\n"
			"          SetHandleCount(%llu); // Call as early as possible!\n"
			"          // ... rest of your code ...\n"
			"      }\n\n"
			"2. Via Registry (affects GUI handles, may not affect sockets):\n"
			"   Open regedit ‚Üí navigate to:\n"
			"      HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\SubSystems\n"
			"   Find \"Windows\" value, a string like:\n"
			"      %%SystemRoot%%\\system32\\csrss.exe ... SharedSection=1024,20480,768\n"
			"   Increase the THIRD number (e.g., to %llu).\n"
			"   Reboot system.\n\n"
			"3. For server applications ‚Äî prefer SetHandleCount().\n\n"
			"üí° Important: SetHandleCount() is a hint to the system ‚Äî actual limit depends on Windows version and available memory.\n"
			"üí° Tip: Check current handle usage in Task Manager ‚Üí Details tab ‚Üí \"Handles\" column.",
			log_t::flag_t::WARNING, desired, actual, desired, desired, desired
		);
	/**
	 * –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Linux
	 */
	#elif __linux__
		// –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∞
		this->_log->print(
			"\nMaximum sockets requested: %llu, but current system limit is: %llu.\n"
			"This may cause failures under high load.\n\n"
			"üîß How to increase the limit on Linux:\n\n"
			"1. Temporary increase (for current session):\n"
			"   ulimit -n %llu\n\n"
			"2. Permanent increase:\n"
			"   Edit: /etc/security/limits.conf\n"
			"   Add lines:\n"
			"      * soft nofile %llu\n"
			"      * hard nofile %llu\n\n"
			"   (Replace '*' with username if setting for a specific user)\n\n"
			"3. For systemd services:\n"
			"   Edit: /etc/systemd/system.conf\n"
			"   Add:\n"
			"      DefaultLimitNOFILE=%llu\n\n"
			"   Then run:\n"
			"      sudo systemctl daemon-reload\n\n"
			"4. Restart your application or re-login to apply.\n\n"
			"üí° Tip: You can also increase system-wide limit:\n"
			"   echo 'fs.file-max = 2000000' | sudo tee -a /etc/sysctl.conf\n"
			"   sudo sysctl -p",
			log_t::flag_t::WARNING, desired, actual, desired, desired, desired, desired
		);
	/**
	 * –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã OpenBSD
	 */
	#elif __OpenBSD__
		// –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∞
		this->_log->print(
			"\nMaximum sockets requested: %llu, but current system limit is: %llu.\n"
			"OpenBSD has strict defaults for security.\n\n"
			"üîß How to increase the limit on OpenBSD:\n\n"
			"1. Temporary increase:\n"
			"   ulimit -n %llu\n\n"
			"2. Permanent increase:\n"
			"   Edit: /etc/login.conf\n"
			"   In target class (e.g., \"default:\"), add:\n"
			"      :openfiles-cur=%llu:\n"
			"      :openfiles-max=%llu:\n\n"
			"3. Rebuild database:\n"
			"   cap_mkdb /etc/login.conf\n\n"
			"4. Increase system limits (if needed):\n"
			"   sysctl kern.maxfiles=%llu\n"
			"   sysctl kern.maxfilesperproc=%llu\n\n"
			"   For permanent change, add to /etc/sysctl.conf:\n"
			"      kern.maxfiles=%llu\n"
			"      kern.maxfilesperproc=%llu\n\n"
			"5. Reboot or re-login to apply.\n\n"
			"üí° Note: OpenBSD may require reboot for some changes to take effect.",
			log_t::flag_t::WARNING, desired, actual, desired, desired, desired, desired, desired, desired, desired
		);
	/**
	 * –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Sun Solaris
	 */
	#elif __sun__
		// –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∞
		this->_log->print(
			"\nMaximum sockets requested: %llu, but current system limit is: %llu.\n"
			"Solaris requires configuration via projects and system parameters.\n\n"
			"üîß How to increase the limit on Solaris:\n\n"
			"1. Check current limits:\n"
			"   ulimit -n\n\n"
			"2. Set temporary limit:\n"
			"   ulimit -n %llu\n\n"
			"3. For permanent limit ‚Äî use projects:\n"
			"   Create project (if not exists):\n"
			"      projadd -U $USER network\n\n"
			"   Set limit for project:\n"
			"      projmod -s -K \"process.max-file-descriptor=(priv,%llu,deny)\" network\n\n"
			"   Assign project to user:\n"
			"      usermod -K project=network $USER\n\n"
			"4. Re-login or start app within project:\n"
			"   newtask -p network ./your_app\n\n"
			"5. Optionally, increase system-wide limit:\n"
			"   echo \"rlim_fd_max=%llu\" >> /etc/system\n"
			"   echo \"rlim_fd_cur=%llu\" >> /etc/system\n"
			"   Reboot system.\n\n"
			"üí° Tip: Use `prctl -n process.max-file-descriptor -i process $$` to check current process limit.",
			log_t::flag_t::WARNING, desired, actual, desired, desired, desired, desired
		);
	/**
	 * –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã FreeBSD
	 */
	#elif __FreeBSD__
		// –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∞
		this->_log->print(
			"\nMaximum sockets requested: %llu, but current system limit is: %llu.\n"
			"FreeBSD allows tuning limits via login.conf and sysctl.\n\n"
			"üîß How to increase the limit on FreeBSD:\n\n"
			"1. Temporary increase:\n"
			"   ulimit -n %llu\n\n"
			"2. Permanent increase via login.conf:\n"
			"   Edit: /etc/login.conf\n"
			"   Find class (e.g., \"default:\") and add/modify:\n"
			"      :openfiles=%llu:\n\n"
			"3. Rebuild database:\n"
			"   cap_mkdb /etc/login.conf\n\n"
			"4. Assign class to user (if needed):\n"
			"   pw usermod $USER -L <class_name>\n\n"
			"5. Increase system limits (optional):\n"
			"   sysctl kern.maxfiles=%llu\n"
			"   sysctl kern.maxfilesperproc=%llu\n\n"
			"   For permanent change, add to /etc/sysctl.conf:\n"
			"      kern.maxfiles=%llu\n"
			"      kern.maxfilesperproc=%llu\n\n"
			"6. Restart application or re-login.",
			log_t::flag_t::WARNING, desired, actual, desired, desired, desired, desired, desired, desired
		);
	/**
	 * –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã NetBSD
	 */
	#elif ___NetBSD__
		// –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∞
		this->_log->print(
			"\nMaximum sockets requested: %llu, but current system limit is: %llu.\n"
			"NetBSD uses login.conf and sysctl for tuning limits.\n\n"
			"üîß How to increase the limit on NetBSD:\n\n"
			"1. Temporary increase:\n"
			"   ulimit -n %llu\n\n"
			"2. Permanent increase:\n"
			"   Edit: /etc/login.conf\n"
			"   In target class (e.g., \"default:\"), add:\n"
			"      :openfiles=%llu:\n\n"
			"3. Rebuild database:\n"
			"   cap_mkdb /etc/login.conf\n\n"
			"4. Increase system limits:\n"
			"   sysctl kern.maxfiles=%llu\n"
			"   sysctl kern.maxfilesperproc=%llu\n\n"
			"   For permanent change, add to /etc/sysctl.conf:\n"
			"      kern.maxfiles=%llu\n"
			"      kern.maxfilesperproc=%llu\n\n"
			"5. Restart application or re-login.\n\n"
			"üí° Tip: Use `sysctl -a | grep maxfiles` to view current system limits.",
			log_t::flag_t::WARNING, desired, actual, desired, desired, desired, desired, desired, desired
		);
	/**
	 * –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã MacOS X
	 */
	#elif __APPLE__ || __MACH__
		// –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∞
		this->_log->print(
			"\nMaximum sockets requested: %llu, but current system limit is: %llu.\n"
			"MacOS X default limits are often too low for server applications.\n\n"
			"üîß How to increase the limit on MacOS X:\n\n"
			"1. Temporary increase (in current terminal):\n"
			"   ulimit -n %llu\n\n"
			"2. Permanent increase:\n"
			"   Create file: /Library/LaunchDaemons/limit.maxfiles.plist\n"
			"   Paste content:\n\n"
			"   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
			"   <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n"
			"   <plist version=\"1.0\">\n"
			"     <dict>\n"
			"       <key>Label</key>\n"
			"       <string>limit.maxfiles</string>\n"
			"       <key>ProgramArguments</key>\n"
			"       <array>\n"
			"         <string>launchctl</string>\n"
			"         <string>limit</string>\n"
			"         <string>maxfiles</string>\n"
			"         <string>%llu</string>\n"
			"         <string>%llu</string>\n"
			"       </array>\n"
			"       <key>RunAtLoad</key>\n"
			"       <true/>\n"
			"       <key>ServiceIPC</key>\n"
			"       <false/>\n"
			"     </dict>\n"
			"   </plist>\n\n"
			"3. Set permissions and load:\n"
			"   sudo chown root:wheel /Library/LaunchDaemons/limit.maxfiles.plist\n"
			"   sudo chmod 644 /Library/LaunchDaemons/limit.maxfiles.plist\n"
			"   sudo launchctl load -w /Library/LaunchDaemons/limit.maxfiles.plist\n\n"
			"4. Reboot or restart your application.\n\n"
			"üí° Note: On some MacOS X versions, disabling SIP (System Integrity Protection) may be required ‚Äî proceed with caution.",
			log_t::flag_t::WARNING, desired, actual, desired, desired, desired
		);
	#endif
}
/**
 * @brief –ú–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
 *
 * @param limit –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
 * @return      —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
 */
bool awh::FDS::limit(const uint64_t limit) const noexcept {
	/**
	 * –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã MS Windows
	 */
	#if _WIN32 || _WIN64
		// SetHandleCount ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–µ, –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ª–∏–º–∏—Ç
		if(::SetHandleCount(static_cast <uint32_t> (limit))){
			/**
			 * –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
			 */
			#if DEBUG_MODE
				// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				this->_log->print("Called SetHandleCount(%llu) successfully", log_t::flag_t::INFO, limit);
			#endif
			// –í—ã–≤–æ–¥–∏–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			return true;
		// –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
		} else {
			/**
			 * –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
			 */
			#if DEBUG_MODE
				// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
				this->_log->debug("SetHandleCount(%llu) failed", __PRETTY_FUNCTION__, std::make_tuple(limit), log_t::flag_t::WARNING, limit);
			/**
			* –ï—Å–ª–∏ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –Ω–µ –≤–∫–ª—é—á—ë–Ω
			*/
			#else
				// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
				this->_log->print("SetHandleCount(%llu) failed", log_t::flag_t::WARNING, limit);
			#endif
			// –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
			return false;
		}
	/**
	 * –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
	 */
	#else
		/**
		 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
		 */
		struct rlimit rl;
		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã
		if(::getrlimit(RLIMIT_NOFILE, &rl) != 0){
			/**
			 * –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
			 */
			#if DEBUG_MODE
				// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
				this->_log->debug("%s", __PRETTY_FUNCTION__, std::make_tuple(limit), log_t::flag_t::CRITICAL, ::strerror(errno));
			/**
			* –ï—Å–ª–∏ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –Ω–µ –≤–∫–ª—é—á—ë–Ω
			*/
			#else
				// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
				this->_log->print("%s", log_t::flag_t::CRITICAL, ::strerror(errno));
			#endif
			// –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
			return false;
		}
		// –ü–æ–ª—É—á–∞–µ–º –º—è–≥–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
		const uint64_t currentSoft = static_cast <uint64_t> (rl.rlim_cur);
		// –ü–æ–ª—É—á–∞–µ–º –∂–µ—Å—Ç–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
		const uint64_t currentHard = static_cast <uint64_t> (rl.rlim_max);
		/**
		 * –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
		 */
		#if DEBUG_MODE
			// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			this->_log->print("Current FD limits: soft=%llu, hard=%llu", log_t::flag_t::INFO, currentSoft, currentHard);
		#endif
		// –ï—Å–ª–∏ soft –ª–∏–º–∏—Ç —É–∂–µ >= target ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
		if(currentSoft >= limit)
			// –í—ã–≤–æ–¥–∏–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			return true;
		// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–Ω—è—Ç—å soft –ª–∏–º–∏—Ç –¥–æ min(target, hard)
		const rlim_t soft = static_cast <rlim_t> (limit <= currentHard ? limit : currentHard);
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
		rl.rlim_cur = soft;
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
		if(::setrlimit(RLIMIT_NOFILE, &rl) == 0){
			/**
			 * –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
			 */
			#if DEBUG_MODE
				// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				this->_log->print("Successfully raised soft FD limit to %llu", log_t::flag_t::INFO, static_cast <uint64_t> (soft));
			#endif
			// (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–Ω—è—Ç—å hard –ª–∏–º–∏—Ç ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞
			if(currentHard < limit){
				// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–º–æ—â–∏
				this->help(currentHard, limit);
				// –ü–æ–¥–Ω–∏–º–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
				rl.rlim_cur = static_cast <rlim_t> (soft);
				// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–Ω—è—Ç—å hard –ª–∏–º–∏—Ç
				rl.rlim_max = static_cast <rlim_t> (limit);
				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
				if(::setrlimit(RLIMIT_NOFILE, &rl) == 0){
					/**
					 * –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
					 */
					#if DEBUG_MODE
						// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
						this->_log->print("Successfully raised hard FD limit to %llu", log_t::flag_t::INFO, limit);
					#endif
				// –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
				} else {
					/**
					 * –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
					 */
					#if DEBUG_MODE
						// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
						this->_log->debug("%s", __PRETTY_FUNCTION__, std::make_tuple(limit), log_t::flag_t::WARNING, ::strerror(errno));
					/**
					* –ï—Å–ª–∏ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –Ω–µ –≤–∫–ª—é—á—ë–Ω
					*/
					#else
						// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
						this->_log->print("Failed to raise hard FD limit to %llu (need root?): %s", log_t::flag_t::WARNING, limit, ::strerror(errno));
					#endif
				}
			}
			// –í—ã–≤–æ–¥–∏–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			return true;
		// –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å
		} else {
			/**
			 * –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
			 */
			#if DEBUG_MODE
				// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
				this->_log->debug("%s", __PRETTY_FUNCTION__, std::make_tuple(limit), log_t::flag_t::WARNING, ::strerror(errno));
			/**
			* –ï—Å–ª–∏ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –Ω–µ –≤–∫–ª—é—á—ë–Ω
			*/
			#else
				// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
				this->_log->print("Failed to raise soft FD limit to %llu: %s", log_t::flag_t::WARNING, static_cast <uint64_t> (soft), ::strerror(errno));
			#endif
		}
	#endif
	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	return false;
}
/**
 * @brief –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
 *
 * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
 */
std::pair <uint64_t, uint64_t> awh::FDS::limit() const noexcept {
	// –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
	std::pair <uint64_t, uint64_t> result = {0, 0};
	/**
	 * –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã MS Windows
	 */
	#if _WIN32 || _WIN64
		/**
		 * –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–æ–∫
		 */
		try {
			// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
			result.first = 65536;
			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∫–µ—Ç–æ–≤
			result.second = 100000;
			// SetHandleCount ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–µ, –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ª–∏–º–∏—Ç
			if(::SetHandleCount(static_cast <uint32_t> (result.first))){
				/**
				 * –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
				 */
				#if DEBUG_MODE
					// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
					this->_log->print("Called SetHandleCount(%llu) successfully", log_t::flag_t::INFO, result.first);
				#endif
			// –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
			} else {
				/**
				 * –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
				 */
				#if DEBUG_MODE
					// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
					this->_log->debug("SetHandleCount(%llu) failed", __PRETTY_FUNCTION__, {}, log_t::flag_t::WARNING, result.first);
				/**
				* –ï—Å–ª–∏ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –Ω–µ –≤–∫–ª—é—á—ë–Ω
				*/
				#else
					// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
					this->_log->print("SetHandleCount(%llu) failed", log_t::flag_t::WARNING, result.first);
				#endif
				// –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
				return std::make_pair(0, 0);
			}
			// –°–æ–∑–¥–∞—ë–º —Å–æ–∫–µ—Ç—ã, –ø–æ–∫–∞ –Ω–µ —É–ø—Ä—ë–º—Å—è –≤ –ª–∏–º–∏—Ç
   			vector <SOCKET> socks;
			// —á—Ç–æ–±—ã –Ω–µ –∞–ª–ª–æ—Ü–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç–æ —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å
			socks.reserve(1000);
			// –°–æ–∫–µ—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
			SOCKET sock = INVALID_SOCKET;
			// –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ 100000 —Å–æ–∫–µ—Ç–æ–≤
			for(uint64_t i = 0; i < result.second; ++i){
				// –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–æ–∫–µ—Ç–æ–≤
				if((sock = ::socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) == INVALID_SOCKET){
					// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–æ–∫–µ—Ç–æ–≤
					for(auto & sock : socks)
						// –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–æ–∫–µ—Ç—ã
						::closesocket(sock);
					// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–∫–µ—Ç–æ–≤
					result.second = static_cast <uint64_t> (i);
					// –í—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç
					return result;
				}
				socks.push_back(sock);
				// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –Ω–µ –¥–µ—Ä–∂–∏–º —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 1000
				if(socks.size() >= 1000){
					// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–æ–∫–µ—Ç–æ–≤
					for(auto & sock : socks)
						// –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–æ–∫–µ—Ç—ã
						::closesocket(sock);
					// –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–∫–µ—Ç–æ–≤
					socks.clear();
				}
			}
			// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–æ–∫–µ—Ç–æ–≤
			for(auto & sock : socks)
				// –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–æ–∫–µ—Ç—ã
				::closesocket(sock);
		/**
		 * –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞
		 */
		} catch(const exception & error) {
			/**
			 * –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
			 */
			#if DEBUG_MODE
				// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
				this->_log->debug("%s", __PRETTY_FUNCTION__, {}, log_t::flag_t::CRITICAL, error.what());
			/**
			* –ï—Å–ª–∏ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –Ω–µ –≤–∫–ª—é—á—ë–Ω
			*/
			#else
				// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
				this->_log->print("%s", log_t::flag_t::CRITICAL, error.what());
			#endif
		}
	/**
	 * –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
	 */
	#else
		/**
		 * –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–æ–∫
		 */
		try {
			/**
			 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
			 */
			struct rlimit rl;
			// –í—ã–ø–æ–ª–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞—Ö
			if(::getrlimit(RLIMIT_NOFILE, &rl) != 0){
				/**
				 * –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
				 */
				#if DEBUG_MODE
					// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
					this->_log->debug("%s", __PRETTY_FUNCTION__, {}, log_t::flag_t::CRITICAL, ::strerror(errno));
				/**
				* –ï—Å–ª–∏ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –Ω–µ –≤–∫–ª—é—á—ë–Ω
				*/
				#else
					// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
					this->_log->print("%s", log_t::flag_t::CRITICAL, ::strerror(errno));
				#endif
				// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
				return result;
			}
			// –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
			result.first = static_cast <uint64_t> (rl.rlim_cur);
			// –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
			result.second = static_cast <uint64_t> (rl.rlim_max);
		/**
		 * –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞
		 */
		} catch(const exception & error) {
			/**
			 * –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
			 */
			#if DEBUG_MODE
				// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
				this->_log->debug("%s", __PRETTY_FUNCTION__, {}, log_t::flag_t::CRITICAL, error.what());
			/**
			* –ï—Å–ª–∏ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –Ω–µ –≤–∫–ª—é—á—ë–Ω
			*/
			#else
				// –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
				this->_log->print("%s", log_t::flag_t::CRITICAL, error.what());
			#endif
		}
	#endif
	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	return result;
}
